<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="assembly" Type="System.String" Description="The assembly to reflect" %>
<%@ Property Name="className" Type="System.String" Description="Class to reflect" %>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Reflection" %>


<%@ Assembly Name="FChoice.Toolkits.Clarify" %>
<%@ Import Namespace="FChoice.Toolkits.Clarify" %>


//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Web;
using System.Web.Services;

using FChoice.WebServices.Clarify;

<%
Assembly assem = Assembly.LoadFrom( assembly );

Type[] types = assem.GetTypes();

foreach(Type t in types)
{
	if( t.Name == className )
	{
%>
using Protocol = FChoice.WebServices.Clarify.Client.Protocols.<%=t.Name%>Srv;

namespace FChoice.WebServices.Clarify.Client.<%=WebServiceClientCodeGen.ConvertToBaseName(t.Name)%>
{
<%
		MethodInfo[] methods = t.GetMethods() ;
		foreach(MethodInfo m in methods)
		{
			if( WebServiceClientCodeGen.IsCodeGenMethod(m) && WebServiceClientCodeGen.IsSetupOverload(m) )
			{
				ParameterInfo[] parameters = m.GetParameters();
				foreach(ParameterInfo p in parameters)
				{
%>
	#region <%=p.ParameterType.Name%>WS
	public class <%=p.ParameterType.Name%>WS
	{
		#region Constructors
<%
					PropertyInfo[] properties = p.ParameterType.GetProperties();
					ConstructorInfo[] constructors = p.ParameterType.GetConstructors();
					
					foreach(ConstructorInfo cons in constructors)
					{
%>
		public <%=p.ParameterType.Name%>WS(<%=WebServiceClientCodeGen.GetMethodSig(cons)%>)
		{
			ConstructorCue = <%=WebServiceClientCodeGen.GetConstuctorIndexAttributeValue(cons)%>;
<%
						foreach(ParameterInfo param in cons.GetParameters())
						{	
							foreach(PropertyInfo prop in properties)
							{
								if( prop.Name.ToLower() == param.Name.ToLower() )
								{
%>
			this.<%=prop.Name%> = <%=param.Name%>;
<%
									break;
								}
							}
						}
%>							
		}
		
<%					

					}
%>
		#endregion
		
<%
					
					foreach(PropertyInfo prop in properties)
					{
%>
		private <%=WebServiceClientCodeGen.ConvertPropertyTypeToProtocol(prop)%> _<%=prop.Name%>;
<%
					}
					
					foreach(PropertyInfo prop in properties)
					{
%>
		public <%=WebServiceClientCodeGen.ConvertPropertyTypeToProtocol(prop)%> <%=prop.Name%>
		{
			get{ return _<%=prop.Name%>; }
			set{ DirtyFieldFlags |= <%=WebServiceClientCodeGen.GetPropertyBitAttributeValue(prop)%>;_<%=prop.Name%> = value; }
		}
		
<%
					}					
%>

		internal int DirtyFieldFlags;
		internal int ConstructorCue;
		
		internal Protocol.<%=p.ParameterType.Name%>Protocol ToProtocol()
		{
			Protocol.<%=p.ParameterType.Name%>Protocol protocol = new Protocol.<%=p.ParameterType.Name%>Protocol();

<%			
					foreach(PropertyInfo prop in properties)
					{
%>
			protocol.<%=prop.Name%> = this.<%=prop.Name%>;
<%
					}					
%>
			protocol.ConstructorCue = this.ConstructorCue;
			protocol.DirtyFieldFlags = this.DirtyFieldFlags;
			
			return protocol;			
		}
		
	}
	#endregion
	
<%				
				}
			}		
		}
%>
}
<%
	}
}
%>