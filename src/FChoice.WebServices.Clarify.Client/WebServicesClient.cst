<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="assembly" Type="System.String" Description="The assembly to reflect" %>
<%@ Property Name="className" Type="System.String" Description="Class to reflect" %>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Reflection" %>

<%@ Assembly Name="FChoice.Toolkits.Clarify" %>
<%@ Import Namespace="FChoice.Toolkits.Clarify" %>

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Web;
using System.Web.Services;
<%
Assembly assem = Assembly.LoadFrom( assembly );

Type[] types = assem.GetTypes();

foreach(Type t in types)
{
	if( t.Name == className )
	{
%>
using Protocol = FChoice.WebServices.Clarify.Client.Protocols.<%=t.Name%>Srv;
using FChoice.WebServices.Clarify.Client;

namespace FChoice.WebServices.Clarify.Client.<%=WebServiceClientCodeGen.ConvertToBaseName(t.Name)%>
{
	public class <%=t.Name%>WS
	{
		private Protocol.<%=t.Name%>Srv toolkitProtocol;
		
		public <%=t.Name%>WS(ClarifySessionWS session)
		{
			toolkitProtocol = new Protocol.<%=t.Name%>Srv();
			toolkitProtocol.Url = new Uri( session.BaseUri, "<%=t.Name%>Srv.asmx" ).ToString();
			toolkitProtocol.AuthenticationHeaderValue = new Protocol.AuthenticationHeader();
			
			toolkitProtocol.AuthenticationHeaderValue.SessionID = session.SessionToken;
		}
		
<%
		MethodInfo[] methods = t.GetMethods() ;
		foreach(MethodInfo m in methods)
		{
			if( WebServiceClientCodeGen.IsCodeGenMethod(m) && !WebServiceClientCodeGen.IsSetupWithTransaction(m) )
			{
%>
		public <%=WebServiceClientCodeGen.ConvertTypeToProtocol(m.ReturnType)%> <%=m.Name%>(<%=WebServiceClientCodeGen.GetMethodSig(m)%>)
		{
<%
				if( WebServiceClientCodeGen.IsSetupOverload(m) )
				{
%>
			return toolkitProtocol.<%=m.Name%>( setupParam.ToProtocol() );
<%					
				}
				else
				{
%>
			return toolkitProtocol.<%=m.Name%>( <%=WebServiceClientCodeGen.GetMethodSig(m, true)%> );
<%				
				}
%>		
		}
		
<%
			}
		}
%>
	}
}
<%
	}
}
%>