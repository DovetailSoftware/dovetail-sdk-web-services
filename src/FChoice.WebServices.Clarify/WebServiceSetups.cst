<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="assembly" Type="System.String" Description="The assembly to reflect" %>
<%@ Property Name="className" Type="System.String" Description="Class to reflect" %>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Reflection" %>


<%@ Assembly Name="FChoice.Toolkits.Clarify" %>
<%@ Import Namespace="FChoice.Toolkits.Clarify" %>


//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Web;
using System.Web.Services;

using FChoice.Toolkits.Clarify;
using FChoice.WebServices.Clarify;

<%
Assembly assem = Assembly.LoadFrom( assembly );

Type[] types = assem.GetTypes();

foreach(Type t in types)
{
	if( t.Name == className )
	{
%>
namespace FChoice.WebServices.Clarify.Protocols.<%=WebServiceCodeGen.ConvertToBaseName(t.Name)%>
{
<%
		MethodInfo[] methods = t.GetMethods() ;
		foreach(MethodInfo m in methods)
		{
			if( WebServiceCodeGen.IsCodeGenMethod(m) && WebServiceCodeGen.IsSetupOverload(m) )
			{
				ParameterInfo[] parameters = m.GetParameters();
				foreach(ParameterInfo p in parameters)
				{
%>
	[Serializable]
	public class <%=p.ParameterType.Name%>Protocol
	{
		public <%=p.ParameterType.Name%>Protocol(){}

<%
					int propertyCount = 0;
					PropertyInfo[] properties = p.ParameterType.GetProperties();
					foreach(PropertyInfo prop in properties)
					{
%>
		public <%=WebServiceCodeGen.ConvertPropertyType(prop)%> <%=prop.Name%>;
<%
						propertyCount++;			
					}
%>

		public int DirtyFieldFlags;
		public int ConstructorCue;
		
	}
<%				
				}
			}		
		}
%>
}
<%
	}
}
%>