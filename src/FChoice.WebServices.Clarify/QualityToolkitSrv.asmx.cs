//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Web;
using System.Web.Services;
using System.Web.Services.Protocols;

using FChoice.Foundation.Clarify;
using FChoice.Foundation.Clarify.Compatibility;
using FChoice.Foundation.Clarify.Compatibility.Toolkits;
using FChoice.Toolkits.Clarify;
using FChoice.WebServices.Clarify;

namespace FChoice.WebServices.Clarify
{
	[SoapRpcService(RoutingStyle=SoapServiceRoutingStyle.SoapAction)]
	[WebService(Description="fcSDK QualityToolkit Web Service", Namespace="http://www.fchoice.com/schemas/FChoice.WebServices.Clarify.QualityToolkitSrv_v1")]
	public class QualityToolkitSrv : System.Web.Services.WebService
	{
	
		public AuthenticationHeader AuthHeader;
		
		[WebMethod(MessageName="FixFailed")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol FixFailed(System.String crIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.FixFailed(crIDNum) );	
			
		}
		
		[WebMethod(MessageName="FixFailed2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol FixFailed(Protocols.Quality.FixFailedSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			FChoice.Toolkits.Clarify.Quality.FixFailedSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Quality.FixFailedSetup(setupParam.CRIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CRIDNum = setupParam.CRIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.TestCase = setupParam.TestCase;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.FixedInRelease = setupParam.FixedInRelease;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.FailedDate = setupParam.FailedDate;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.FixFailed(setup) );
			
		}
		
		[WebMethod(MessageName="LogCREmail")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogCREmail(System.String crIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LogCREmail(crIDNum) );	
			
		}
		
		[WebMethod(MessageName="LogCREmail2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogCREmail(Protocols.Quality.LogCREmailSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			FChoice.Toolkits.Clarify.Quality.LogCREmailSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Quality.LogCREmailSetup(setupParam.CRIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CRIDNum = setupParam.CRIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.LogDate = setupParam.LogDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Message = setupParam.Message;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Recipient = setupParam.Recipient;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.CCList = setupParam.CCList;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.SendEmail = setupParam.SendEmail;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.LogCREmail(setup) );
			
		}
		
		[WebMethod(MessageName="ReplicateCR")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReplicateCR(System.String crIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ReplicateCR(crIDNum) );	
			
		}
		
		[WebMethod(MessageName="ReplicateCR2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReplicateCR(Protocols.Quality.ReplicateCRSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			FChoice.Toolkits.Clarify.Quality.ReplicateCRSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Quality.ReplicateCRSetup(setupParam.CRIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CRIDNum = setupParam.CRIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ReplicatedDate = setupParam.ReplicatedDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ReplicateCR(setup) );
			
		}
		
//		[WebMethod(MessageName="UpdateCR")]
//		[SoapHeader("AuthHeader")]
//		public Protocols.ToolkitResultProtocol UpdateCR(System.String crIDNum)
//		{
//			ClarifySession session = Global.GetSession( AuthHeader );
//			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
//			
//			return new Protocols.ToolkitResultProtocol( toolkit.UpdateCR(crIDNum) );	
//			
//		}
		
		[WebMethod(MessageName="UpdateCR2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateCR(Protocols.Quality.UpdateCRSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			FChoice.Toolkits.Clarify.Quality.UpdateCRSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Quality.UpdateCRSetup(setupParam.CRIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CRIDNum = setupParam.CRIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.Title = setupParam.Title;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.CRType = setupParam.CRType;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Priority = setupParam.Priority;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.Frequency = setupParam.Frequency;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.FoundOnCPU = setupParam.FoundOnCPU;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.OperatingSystem = setupParam.OperatingSystem;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.Memory = setupParam.Memory;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.CRClass = setupParam.CRClass;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.IntroductionPhase = setupParam.IntroductionPhase;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.TestClass = setupParam.TestClass;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.FixedIn = setupParam.FixedIn;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.UpdateDate = setupParam.UpdateDate;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(262144, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateCR(setup) );
			
		}
		
		[WebMethod(MessageName="FixCR")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol FixCR(System.String crIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.FixCR(crIDNum) );	
			
		}
		
		[WebMethod(MessageName="FixCR2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol FixCR(Protocols.Quality.FixCRSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			FChoice.Toolkits.Clarify.Quality.FixCRSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Quality.FixCRSetup(setupParam.CRIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CRIDNum = setupParam.CRIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.FixDate = setupParam.FixDate;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.FixCR(setup) );
			
		}
		
		[WebMethod(MessageName="DuplicateCR")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DuplicateCR(System.String crIDNum, System.String masterCRIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DuplicateCR(crIDNum, masterCRIDNum) );	
			
		}
		
		[WebMethod(MessageName="DuplicateCR2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DuplicateCR(Protocols.Quality.DuplicateCRSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			FChoice.Toolkits.Clarify.Quality.DuplicateCRSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Quality.DuplicateCRSetup(setupParam.CRIDNum, setupParam.MasterCRIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CRIDNum = setupParam.CRIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.MasterCRIDNum = setupParam.MasterCRIDNum;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.CloseDate = setupParam.CloseDate;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DuplicateCR(setup) );
			
		}
		
		[WebMethod(MessageName="AddModuleToCR")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddModuleToCR(System.Int32 fixObjid, System.String fileName)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AddModuleToCR(fixObjid, fileName) );	
			
		}
		
		[WebMethod(MessageName="AddModuleToCR2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddModuleToCR(Protocols.Quality.AddModuleToCRSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			FChoice.Toolkits.Clarify.Quality.AddModuleToCRSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Quality.AddModuleToCRSetup(setupParam.FixObjid, setupParam.FileName);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.FixObjid = setupParam.FixObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.FileName = setupParam.FileName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.FileRevision = setupParam.FileRevision;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AddModuleToCR(setup) );
			
		}
		
		[WebMethod(MessageName="ChangeCRStatus")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ChangeCRStatus(System.String crIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ChangeCRStatus(crIDNum) );	
			
		}
		
		[WebMethod(MessageName="ChangeCRStatus2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ChangeCRStatus(Protocols.Quality.ChangeCRStatusSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			FChoice.Toolkits.Clarify.Quality.ChangeCRStatusSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Quality.ChangeCRStatusSetup(setupParam.CRIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CRIDNum = setupParam.CRIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewStatus = setupParam.NewStatus;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ChangeDate = setupParam.ChangeDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ChangeCRStatus(setup) );
			
		}
		
		[WebMethod(MessageName="ReopenCR")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReopenCR(System.String crIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ReopenCR(crIDNum) );	
			
		}
		
		[WebMethod(MessageName="ReopenCR2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReopenCR(Protocols.Quality.ReopenCRSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			FChoice.Toolkits.Clarify.Quality.ReopenCRSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Quality.ReopenCRSetup(setupParam.CRIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CRIDNum = setupParam.CRIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ReopenDate = setupParam.ReopenDate;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ReopenCR(setup) );
			
		}
		
		[WebMethod(MessageName="CloseCR")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CloseCR(System.String crIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CloseCR(crIDNum) );	
			
		}
		
		[WebMethod(MessageName="CloseCR2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CloseCR(Protocols.Quality.CloseCRSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			FChoice.Toolkits.Clarify.Quality.CloseCRSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Quality.CloseCRSetup(setupParam.CRIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CRIDNum = setupParam.CRIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.TestCase = setupParam.TestCase;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.FixedInRelease = setupParam.FixedInRelease;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.CloseDate = setupParam.CloseDate;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CloseCR(setup) );
			
		}
		
		[WebMethod(MessageName="CheckClearQualityTransition")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CheckClearQualityTransition(System.String oldCondition, System.String oldStatus, System.String newCondition, System.String newStatus, System.String userName)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CheckClearQualityTransition(oldCondition, oldStatus, newCondition, newStatus, userName) );	
			
		}
		
		[WebMethod(MessageName="CheckClearQualityTransition2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CheckClearQualityTransition(Protocols.Quality.CheckClearQualityTransitionSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			FChoice.Toolkits.Clarify.Quality.CheckClearQualityTransitionSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Quality.CheckClearQualityTransitionSetup(setupParam.OldCondition, setupParam.OldStatus, setupParam.NewCondition, setupParam.NewStatus, setupParam.UserName);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.OldCondition = setupParam.OldCondition;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.OldStatus = setupParam.OldStatus;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.NewCondition = setupParam.NewCondition;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.NewStatus = setupParam.NewStatus;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CheckClearQualityTransition(setup) );
			
		}
		
		[WebMethod(MessageName="LogCRNote")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogCRNote(System.String crIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LogCRNote(crIDNum) );	
			
		}
		
		[WebMethod(MessageName="LogCRNote2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogCRNote(Protocols.Quality.LogCRNoteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			FChoice.Toolkits.Clarify.Quality.LogCRNoteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Quality.LogCRNoteSetup(setupParam.CRIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CRIDNum = setupParam.CRIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.InternalUseOnlyNotes = setupParam.InternalUseOnlyNotes;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.LogDate = setupParam.LogDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.LogCRNote(setup) );
			
		}
		
		[WebMethod(MessageName="CreateCR")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateCR(System.String partNumber, System.String partRevision, System.String partDomain)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateCR(partNumber, partRevision, partDomain) );	
			
		}
		
		[WebMethod(MessageName="CreateCR2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateCR(Protocols.Quality.CreateCRSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			FChoice.Toolkits.Clarify.Quality.CreateCRSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Quality.CreateCRSetup(setupParam.PartNumber, setupParam.PartRevision, setupParam.PartDomain);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Title = setupParam.Title;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.CRType = setupParam.CRType;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.Priority = setupParam.Priority;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.Frequency = setupParam.Frequency;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.FoundOnCPU = setupParam.FoundOnCPU;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.OperatingSystem = setupParam.OperatingSystem;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.Memory = setupParam.Memory;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.CRClass = setupParam.CRClass;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.IntroductionPhase = setupParam.IntroductionPhase;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.TestClass = setupParam.TestClass;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.FixedIn = setupParam.FixedIn;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.VerificationTest = setupParam.VerificationTest;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				setup.Queue = setupParam.Queue;			
			}
				
			if( Global.IsPropertyDirty(262144, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(524288, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(1048576, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(2097152, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateCR(setup) );
			
		}
		
		[WebMethod(MessageName="YankCR")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol YankCR(System.String cridnum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.YankCR(cridnum) );	
			
		}
		
		[WebMethod(MessageName="YankCR2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol YankCR(Protocols.Quality.YankCRSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			FChoice.Toolkits.Clarify.Quality.YankCRSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Quality.YankCRSetup(setupParam.CRIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CRIDNum = setupParam.CRIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.YankDate = setupParam.YankDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.YankCR(setup) );
			
		}
		
		[WebMethod(MessageName="MoveCR")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveCR(System.String cridnum, System.String newWipBin)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.MoveCR(cridnum, newWipBin) );	
			
		}
		
		[WebMethod(MessageName="MoveCR2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveCR(Protocols.Quality.MoveCRSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			FChoice.Toolkits.Clarify.Quality.MoveCRSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Quality.MoveCRSetup(setupParam.CRIDNum, setupParam.NewWipBin);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CRIDNum = setupParam.CRIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewWipBin = setupParam.NewWipBin;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.MoveCR(setup) );
			
		}
		
		[WebMethod(MessageName="AssignCR")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AssignCR(System.String cridnum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AssignCR(cridnum) );	
			
		}
		
		[WebMethod(MessageName="AssignCR2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AssignCR(Protocols.Quality.AssignCRSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			FChoice.Toolkits.Clarify.Quality.AssignCRSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Quality.AssignCRSetup(setupParam.CRIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CRIDNum = setupParam.CRIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewUser = setupParam.NewUser;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.AssignDate = setupParam.AssignDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AssignCR(setup) );
			
		}
		
		[WebMethod(MessageName="ForwardCR")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ForwardCR(System.String cridnum, System.String newQueue)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ForwardCR(cridnum, newQueue) );	
			
		}
		
		[WebMethod(MessageName="ForwardCR2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ForwardCR(Protocols.Quality.ForwardCRSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			FChoice.Toolkits.Clarify.Quality.ForwardCRSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Quality.ForwardCRSetup(setupParam.CRIDNum, setupParam.NewQueue);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CRIDNum = setupParam.CRIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewQueue = setupParam.NewQueue;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ForwardDate = setupParam.ForwardDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ForwardCR(setup) );
			
		}
		
		[WebMethod(MessageName="RejectCR")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RejectCR(System.String cridnum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.RejectCR(cridnum) );	
			
		}
		
		[WebMethod(MessageName="RejectCR2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RejectCR(Protocols.Quality.RejectCRSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			FChoice.Toolkits.Clarify.Quality.RejectCRSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Quality.RejectCRSetup(setupParam.CRIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CRIDNum = setupParam.CRIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.RejectDate = setupParam.RejectDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.RejectCR(setup) );
			
		}
		
		[WebMethod(MessageName="AcceptCR")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AcceptCR(System.String cridnum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AcceptCR(cridnum) );	
			
		}
		
		[WebMethod(MessageName="AcceptCR2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AcceptCR(Protocols.Quality.AcceptCRSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			FChoice.Toolkits.Clarify.Quality.AcceptCRSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Quality.AcceptCRSetup(setupParam.CRIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CRIDNum = setupParam.CRIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.AcceptDate = setupParam.AcceptDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AcceptCR(setup) );
			
		}
		
		[WebMethod(MessageName="DispatchCR")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DispatchCR(System.String cridnum, System.String queue)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DispatchCR(cridnum, queue) );	
			
		}
		
		[WebMethod(MessageName="DispatchCR2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DispatchCR(Protocols.Quality.DispatchCRSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Quality.QualityToolkit toolkit = new FChoice.Toolkits.Clarify.Quality.QualityToolkit( session );
			FChoice.Toolkits.Clarify.Quality.DispatchCRSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Quality.DispatchCRSetup(setupParam.CRIDNum, setupParam.Queue);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CRIDNum = setupParam.CRIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Queue = setupParam.Queue;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.DispatchDate = setupParam.DispatchDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DispatchCR(setup) );
			
		}
		
	}
}
