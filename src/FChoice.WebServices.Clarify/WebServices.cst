<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="assembly" Type="System.String" Description="The assembly to reflect" %>
<%@ Property Name="className" Type="System.String" Description="Class to reflect" %>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Reflection" %>

<%@ Assembly Name="FChoice.Toolkits.Clarify" %>
<%@ Import Namespace="FChoice.Toolkits.Clarify" %>

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Web;
using System.Web.Services;
using System.Web.Services.Protocols;

using FChoice.Foundation.Clarify;
using FChoice.Foundation.Clarify.Compatibility;
using FChoice.Foundation.Clarify.Compatibility.Toolkits;
using FChoice.Toolkits.Clarify;
using FChoice.WebServices.Clarify;

<%
Assembly assem = Assembly.LoadFrom( assembly );

Type[] types = assem.GetTypes();

foreach(Type t in types)
{
	if( t.Name == className )
	{
%>
namespace FChoice.WebServices.Clarify
{
	[SoapRpcService(RoutingStyle=SoapServiceRoutingStyle.SoapAction)]
	[WebService(Description="fcSDK <%=t.Name%> Web Service", Namespace="http://www.fchoice.com/schemas/FChoice.WebServices.Clarify.<%=t.Name%>Srv_v1")]
	public class <%=t.Name%>Srv : System.Web.Services.WebService
	{
	
		public AuthenticationHeader AuthHeader;
		
<%
		MethodInfo[] methods = t.GetMethods() ;
		foreach(MethodInfo m in methods)
		{
			if( WebServiceCodeGen.IsCodeGenMethod(m) )
			{
%>
		[WebMethod(MessageName="<%=WebServiceCodeGen.GetMessageName(m)%>")]
		[SoapHeader("AuthHeader")]
		public <%=WebServiceCodeGen.ConvertToolkitResult(m)%> <%=m.Name%>(<%=WebServiceCodeGen.GetMethodSig(m)%>)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			<%=t.FullName%> toolkit = new <%=t.FullName%>( session );
<%
			if( !WebServiceCodeGen.IsOverloadWithSetupObject(m) && !WebServiceCodeGen.IsSetupWithTransaction(m) )
			{
%>
			
			return new <%=WebServiceCodeGen.ConvertToolkitResult(m)%>( toolkit.<%=m.Name%>(<%=WebServiceCodeGen.GetConvertedMethodSigValues(m)%>) );	
<%			
			}
			else
			{
				ParameterInfo setupParam = WebServiceCodeGen.GetParameter( m, 0 );
				
%>
			<%=setupParam.ParameterType.FullName%> setup;
			
			switch( <%=setupParam.Name%>.ConstructorCue )
			{
<%
				//Type setupObject = assem.GetType(t.Namespace + "." + m.Name + "Setup", true);	
				ConstructorInfo[] allSetupConstructors = setupParam.ParameterType.GetConstructors();

				foreach(ConstructorInfo constructor in allSetupConstructors)
				{
%>
				case <%=WebServiceCodeGen.GetConstuctorIndexAttributeValue(constructor)%>:
					setup = new <%=setupParam.ParameterType.FullName%>(<%=WebServiceCodeGen.GetSetupConstructorValues(constructor, setupParam)%>);
					break;
<%
				}				
%>			
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", <%=setupParam.Name%>.ConstructorCue));
			}
			
<%
				PropertyInfo[] properties = setupParam.ParameterType.GetProperties(BindingFlags.Public|BindingFlags.Instance);
				foreach(PropertyInfo prop in properties)
				{
%>
			if( Global.IsPropertyDirty(<%=WebServiceCodeGen.GetPropertyBitAttributeValue(prop)%>, <%=setupParam.Name%>.DirtyFieldFlags) )
			{
				<%=WebServiceCodeGen.GetFullConvertExpression(prop.PropertyType, prop.Name)%>			
			}
				
<%				
				}
%>				
							
			return new <%=WebServiceCodeGen.ConvertToolkitResult(m)%>( toolkit.<%=m.Name%>(setup) );
<%					
			}			
%>		
			
		}
		
<%
			}		
		}
%>
	}
}
<%
	}
}
%>