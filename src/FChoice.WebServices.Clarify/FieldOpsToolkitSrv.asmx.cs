//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Web;
using System.Web.Services;
using System.Web.Services.Protocols;

using FChoice.Foundation.Clarify;
using FChoice.Foundation.Clarify.Compatibility;
using FChoice.Foundation.Clarify.Compatibility.Toolkits;
using FChoice.Toolkits.Clarify;
using FChoice.WebServices.Clarify;

namespace FChoice.WebServices.Clarify
{
	[SoapRpcService(RoutingStyle=SoapServiceRoutingStyle.SoapAction)]
	[WebService(Description="fcSDK FieldOpsToolkit Web Service", Namespace="http://www.fchoice.com/schemas/FChoice.WebServices.Clarify.FieldOpsToolkitSrv_v1")]
	public class FieldOpsToolkitSrv : System.Web.Services.WebService
	{
	
		public AuthenticationHeader AuthHeader;
		
		[WebMethod(MessageName="LogPartsUsedExchange")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogPartsUsedExchange(System.String partRequestDetailIDNum, System.Int32 removeSitePartObjid, System.String installPartNumber, System.String installPartRevision, System.String installPartDomain, System.String installSerialNumber)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LogPartsUsedExchange(partRequestDetailIDNum, removeSitePartObjid, installPartNumber, installPartRevision, installPartDomain, installSerialNumber) );	
			
		}
		
		[WebMethod(MessageName="LogPartsUsedExchange2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogPartsUsedExchange(System.String partRequestDetailIDNum, System.Int32 removeSitePartObjid, System.String installPartNumber, System.String installPartRevision, System.String installPartDomain, System.Int32 installQuantity)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LogPartsUsedExchange(partRequestDetailIDNum, removeSitePartObjid, installPartNumber, installPartRevision, installPartDomain, installQuantity) );	
			
		}
		
		[WebMethod(MessageName="LogPartsUsedExchange3")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogPartsUsedExchange(System.String partRequestDetailIDNum, System.String caseIDNum, System.Int32 removeSitePartObjid, System.String installPartNumber, System.String installPartRevision, System.String installPartDomain, System.String installSerialNumber)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LogPartsUsedExchange(partRequestDetailIDNum, caseIDNum, removeSitePartObjid, installPartNumber, installPartRevision, installPartDomain, installSerialNumber) );	
			
		}
		
		[WebMethod(MessageName="LogPartsUsedExchange4")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogPartsUsedExchange(System.String partRequestDetailIDNum, System.String caseIDNum, System.Int32 removeSitePartObjid, System.String installPartNumber, System.String installPartRevision, System.String installPartDomain, System.Int32 installQuantity)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LogPartsUsedExchange(partRequestDetailIDNum, caseIDNum, removeSitePartObjid, installPartNumber, installPartRevision, installPartDomain, installQuantity) );	
			
		}
		
		[WebMethod(MessageName="LogPartsUsedExchange5")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogPartsUsedExchange(Protocols.FieldOps.LogPartsUsedExchangeSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.LogPartsUsedExchangeSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.LogPartsUsedExchangeSetup(setupParam.PartRequestDetailIDNum, setupParam.RemoveSitePartObjid, setupParam.InstallPartNumber, setupParam.InstallPartRevision, setupParam.InstallPartDomain, setupParam.InstallSerialNumber);
					break;
				case 1:
					setup = new FChoice.Toolkits.Clarify.FieldOps.LogPartsUsedExchangeSetup(setupParam.PartRequestDetailIDNum, setupParam.RemoveSitePartObjid, setupParam.InstallPartNumber, setupParam.InstallPartRevision, setupParam.InstallPartDomain, setupParam.InstallQuantity);
					break;
				case 2:
					setup = new FChoice.Toolkits.Clarify.FieldOps.LogPartsUsedExchangeSetup(setupParam.PartRequestDetailIDNum, setupParam.CaseIDNum, setupParam.RemoveSitePartObjid, setupParam.InstallPartNumber, setupParam.InstallPartRevision, setupParam.InstallPartDomain, setupParam.InstallSerialNumber);
					break;
				case 3:
					setup = new FChoice.Toolkits.Clarify.FieldOps.LogPartsUsedExchangeSetup(setupParam.PartRequestDetailIDNum, setupParam.CaseIDNum, setupParam.RemoveSitePartObjid, setupParam.InstallPartNumber, setupParam.InstallPartRevision, setupParam.InstallPartDomain, setupParam.InstallQuantity);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartRequestDetailIDNum = setupParam.PartRequestDetailIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ParentSitePartObjid = setupParam.ParentSitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.InstallAtSite = setupParam.InstallAtSite;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.RemoveSitePartObjid = setupParam.RemoveSitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.ToLocation = setupParam.ToLocation;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.ToBin = setupParam.ToBin;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.ToContainer = setupParam.ToContainer;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.ToGood = setupParam.ToGood;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.FailureCode = setupParam.FailureCode;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.InstallPartNumber = setupParam.InstallPartNumber;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.InstallPartRevision = setupParam.InstallPartRevision;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.InstallPartDomain = setupParam.InstallPartDomain;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.InstallSerialNumber = setupParam.InstallSerialNumber;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.InstallQuantity = setupParam.InstallQuantity;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.InstallPrice = setupParam.InstallPrice;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				setup.FromLocation = setupParam.FromLocation;			
			}
				
			if( Global.IsPropertyDirty(262144, setupParam.DirtyFieldFlags) )
			{
				setup.FromBin = setupParam.FromBin;			
			}
				
			if( Global.IsPropertyDirty(524288, setupParam.DirtyFieldFlags) )
			{
				setup.FromContainer = setupParam.FromContainer;			
			}
				
			if( Global.IsPropertyDirty(1048576, setupParam.DirtyFieldFlags) )
			{
				setup.FromGood = setupParam.FromGood;			
			}
				
			if( Global.IsPropertyDirty(2097152, setupParam.DirtyFieldFlags) )
			{
				setup.EngineerUserName = setupParam.EngineerUserName;			
			}
				
			if( Global.IsPropertyDirty(4194304, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(8388608, setupParam.DirtyFieldFlags) )
			{
				setup.AllowMove = setupParam.AllowMove;			
			}
				
			if( Global.IsPropertyDirty(16777216, setupParam.DirtyFieldFlags) )
			{
				setup.LogDate = setupParam.LogDate;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.LogPartsUsedExchange(setup) );
			
		}
		
		[WebMethod(MessageName="LogPartsUsedConsume")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogPartsUsedConsume(System.String partRequestDetailIDNum, System.String installPartNumber, System.String installPartRevision, System.String installPartDomain, System.String installSerialNumber)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LogPartsUsedConsume(partRequestDetailIDNum, installPartNumber, installPartRevision, installPartDomain, installSerialNumber) );	
			
		}
		
		[WebMethod(MessageName="LogPartsUsedConsume2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogPartsUsedConsume(System.String partRequestDetailIDNum, System.String installPartNumber, System.String installPartRevision, System.String installPartDomain, System.Int32 installQuantity)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LogPartsUsedConsume(partRequestDetailIDNum, installPartNumber, installPartRevision, installPartDomain, installQuantity) );	
			
		}
		
		[WebMethod(MessageName="LogPartsUsedConsume3")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogPartsUsedConsume(System.String partRequestDetailIDNum, System.String caseIDNum, System.String installPartNumber, System.String installPartRevision, System.String installPartDomain, System.String installSerialNumber)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LogPartsUsedConsume(partRequestDetailIDNum, caseIDNum, installPartNumber, installPartRevision, installPartDomain, installSerialNumber) );	
			
		}
		
		[WebMethod(MessageName="LogPartsUsedConsume4")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogPartsUsedConsume(System.String partRequestDetailIDNum, System.String caseIDNum, System.String installPartNumber, System.String installPartRevision, System.String installPartDomain, System.Int32 installQuantity)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LogPartsUsedConsume(partRequestDetailIDNum, caseIDNum, installPartNumber, installPartRevision, installPartDomain, installQuantity) );	
			
		}
		
		[WebMethod(MessageName="LogPartsUsedConsume5")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogPartsUsedConsume(Protocols.FieldOps.LogPartsUsedConsumeSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.LogPartsUsedConsumeSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.LogPartsUsedConsumeSetup(setupParam.PartRequestDetailIDNum, setupParam.InstallPartNumber, setupParam.InstallPartRevision, setupParam.InstallPartDomain, setupParam.InstallSerialNumber);
					break;
				case 1:
					setup = new FChoice.Toolkits.Clarify.FieldOps.LogPartsUsedConsumeSetup(setupParam.PartRequestDetailIDNum, setupParam.InstallPartNumber, setupParam.InstallPartRevision, setupParam.InstallPartDomain, setupParam.InstallQuantity);
					break;
				case 2:
					setup = new FChoice.Toolkits.Clarify.FieldOps.LogPartsUsedConsumeSetup(setupParam.PartRequestDetailIDNum, setupParam.CaseIDNum, setupParam.InstallPartNumber, setupParam.InstallPartRevision, setupParam.InstallPartDomain, setupParam.InstallSerialNumber);
					break;
				case 3:
					setup = new FChoice.Toolkits.Clarify.FieldOps.LogPartsUsedConsumeSetup(setupParam.PartRequestDetailIDNum, setupParam.CaseIDNum, setupParam.InstallPartNumber, setupParam.InstallPartRevision, setupParam.InstallPartDomain, setupParam.InstallQuantity);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartRequestDetailIDNum = setupParam.PartRequestDetailIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ParentSitePartObjid = setupParam.ParentSitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.InstallAtSite = setupParam.InstallAtSite;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.InstallPartNumber = setupParam.InstallPartNumber;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.InstallPartRevision = setupParam.InstallPartRevision;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.InstallPartDomain = setupParam.InstallPartDomain;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.InstallSerialNumber = setupParam.InstallSerialNumber;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.InstallQuantity = setupParam.InstallQuantity;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.InstallPrice = setupParam.InstallPrice;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				setup.FromLocation = setupParam.FromLocation;			
			}
				
			if( Global.IsPropertyDirty(262144, setupParam.DirtyFieldFlags) )
			{
				setup.FromBin = setupParam.FromBin;			
			}
				
			if( Global.IsPropertyDirty(524288, setupParam.DirtyFieldFlags) )
			{
				setup.FromContainer = setupParam.FromContainer;			
			}
				
			if( Global.IsPropertyDirty(1048576, setupParam.DirtyFieldFlags) )
			{
				setup.FromGood = setupParam.FromGood;			
			}
				
			if( Global.IsPropertyDirty(2097152, setupParam.DirtyFieldFlags) )
			{
				setup.EngineerUserName = setupParam.EngineerUserName;			
			}
				
			if( Global.IsPropertyDirty(4194304, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(8388608, setupParam.DirtyFieldFlags) )
			{
				setup.AllowMove = setupParam.AllowMove;			
			}
				
			if( Global.IsPropertyDirty(16777216, setupParam.DirtyFieldFlags) )
			{
				setup.LogDate = setupParam.LogDate;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.LogPartsUsedConsume(setup) );
			
		}
		
		[WebMethod(MessageName="LogPartsUsedInstall")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogPartsUsedInstall(System.String partRequestDetailIDNum, System.String installPartNumber, System.String installPartRevision, System.String installPartDomain, System.String installSerialNumber)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LogPartsUsedInstall(partRequestDetailIDNum, installPartNumber, installPartRevision, installPartDomain, installSerialNumber) );	
			
		}
		
		[WebMethod(MessageName="LogPartsUsedInstall2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogPartsUsedInstall(System.String partRequestDetailIDNum, System.String installPartNumber, System.String installPartRevision, System.String installPartDomain, System.Int32 installQuantity)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LogPartsUsedInstall(partRequestDetailIDNum, installPartNumber, installPartRevision, installPartDomain, installQuantity) );	
			
		}
		
		[WebMethod(MessageName="LogPartsUsedInstall3")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogPartsUsedInstall(System.String partRequestDetailIDNum, System.String caseIDNum, System.String installPartNumber, System.String installPartRevision, System.String installPartDomain, System.String installSerialNumber)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LogPartsUsedInstall(partRequestDetailIDNum, caseIDNum, installPartNumber, installPartRevision, installPartDomain, installSerialNumber) );	
			
		}
		
		[WebMethod(MessageName="LogPartsUsedInstall4")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogPartsUsedInstall(System.String partRequestDetailIDNum, System.String caseIDNum, System.String installPartNumber, System.String installPartRevision, System.String installPartDomain, System.Int32 installQuantity)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LogPartsUsedInstall(partRequestDetailIDNum, caseIDNum, installPartNumber, installPartRevision, installPartDomain, installQuantity) );	
			
		}
		
		[WebMethod(MessageName="LogPartsUsedInstall5")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogPartsUsedInstall(Protocols.FieldOps.LogPartsUsedInstallSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.LogPartsUsedInstallSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.LogPartsUsedInstallSetup(setupParam.PartRequestDetailIDNum, setupParam.InstallPartNumber, setupParam.InstallPartRevision, setupParam.InstallPartDomain, setupParam.InstallSerialNumber);
					break;
				case 1:
					setup = new FChoice.Toolkits.Clarify.FieldOps.LogPartsUsedInstallSetup(setupParam.PartRequestDetailIDNum, setupParam.InstallPartNumber, setupParam.InstallPartRevision, setupParam.InstallPartDomain, setupParam.InstallQuantity);
					break;
				case 2:
					setup = new FChoice.Toolkits.Clarify.FieldOps.LogPartsUsedInstallSetup(setupParam.PartRequestDetailIDNum, setupParam.CaseIDNum, setupParam.InstallPartNumber, setupParam.InstallPartRevision, setupParam.InstallPartDomain, setupParam.InstallSerialNumber);
					break;
				case 3:
					setup = new FChoice.Toolkits.Clarify.FieldOps.LogPartsUsedInstallSetup(setupParam.PartRequestDetailIDNum, setupParam.CaseIDNum, setupParam.InstallPartNumber, setupParam.InstallPartRevision, setupParam.InstallPartDomain, setupParam.InstallQuantity);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartRequestDetailIDNum = setupParam.PartRequestDetailIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ParentSitePartObjid = setupParam.ParentSitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.InstallAtSite = setupParam.InstallAtSite;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.InstallPartNumber = setupParam.InstallPartNumber;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.InstallPartRevision = setupParam.InstallPartRevision;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.InstallPartDomain = setupParam.InstallPartDomain;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.InstallSerialNumber = setupParam.InstallSerialNumber;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.InstallQuantity = setupParam.InstallQuantity;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.InstallPrice = setupParam.InstallPrice;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				setup.FromLocation = setupParam.FromLocation;			
			}
				
			if( Global.IsPropertyDirty(262144, setupParam.DirtyFieldFlags) )
			{
				setup.FromBin = setupParam.FromBin;			
			}
				
			if( Global.IsPropertyDirty(524288, setupParam.DirtyFieldFlags) )
			{
				setup.FromContainer = setupParam.FromContainer;			
			}
				
			if( Global.IsPropertyDirty(1048576, setupParam.DirtyFieldFlags) )
			{
				setup.FromGood = setupParam.FromGood;			
			}
				
			if( Global.IsPropertyDirty(2097152, setupParam.DirtyFieldFlags) )
			{
				setup.EngineerUserName = setupParam.EngineerUserName;			
			}
				
			if( Global.IsPropertyDirty(4194304, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(8388608, setupParam.DirtyFieldFlags) )
			{
				setup.AllowMove = setupParam.AllowMove;			
			}
				
			if( Global.IsPropertyDirty(16777216, setupParam.DirtyFieldFlags) )
			{
				setup.LogDate = setupParam.LogDate;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.LogPartsUsedInstall(setup) );
			
		}
		
		[WebMethod(MessageName="LogPartsUsedRemove")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogPartsUsedRemove(System.String partRequestDetailIDNum, System.Int32 removeSitePartObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LogPartsUsedRemove(partRequestDetailIDNum, removeSitePartObjid) );	
			
		}
		
		[WebMethod(MessageName="LogPartsUsedRemove2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogPartsUsedRemove(System.String partRequestDetailIDNum, System.String caseIDNum, System.Int32 removeSitePartObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LogPartsUsedRemove(partRequestDetailIDNum, caseIDNum, removeSitePartObjid) );	
			
		}
		
		[WebMethod(MessageName="LogPartsUsedRemove3")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogPartsUsedRemove(Protocols.FieldOps.LogPartsUsedRemoveSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.LogPartsUsedRemoveSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.LogPartsUsedRemoveSetup(setupParam.PartRequestDetailIDNum, setupParam.RemoveSitePartObjid);
					break;
				case 1:
					setup = new FChoice.Toolkits.Clarify.FieldOps.LogPartsUsedRemoveSetup(setupParam.PartRequestDetailIDNum, setupParam.CaseIDNum, setupParam.RemoveSitePartObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartRequestDetailIDNum = setupParam.PartRequestDetailIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ParentSitePartObjid = setupParam.ParentSitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.InstallAtSite = setupParam.InstallAtSite;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.RemoveSitePartObjid = setupParam.RemoveSitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.ToLocation = setupParam.ToLocation;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.ToBin = setupParam.ToBin;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.ToContainer = setupParam.ToContainer;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.ToGood = setupParam.ToGood;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.FailureCode = setupParam.FailureCode;			
			}

			if (Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags))
			{
				setup.RemoveQuantity = setupParam.RemoveQuantity;
			}
				
			if( Global.IsPropertyDirty(2097152, setupParam.DirtyFieldFlags) )
			{
				setup.EngineerUserName = setupParam.EngineerUserName;			
			}
				
			if( Global.IsPropertyDirty(4194304, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(8388608, setupParam.DirtyFieldFlags) )
			{
				setup.AllowMove = setupParam.AllowMove;			
			}
				
			if( Global.IsPropertyDirty(16777216, setupParam.DirtyFieldFlags) )
			{
				setup.LogDate = setupParam.LogDate;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.LogPartsUsedRemove(setup) );
			
		}
		
		[WebMethod(MessageName="LogPartsUsedUpgrade")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogPartsUsedUpgrade(System.String partRequestDetailIDNum, System.Int32 removeSitePartObjid, System.String installPartNumber, System.String installPartRevision, System.String installPartDomain, System.String installSerialNumber)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LogPartsUsedUpgrade(partRequestDetailIDNum, removeSitePartObjid, installPartNumber, installPartRevision, installPartDomain, installSerialNumber) );	
			
		}
		
		[WebMethod(MessageName="LogPartsUsedUpgrade2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogPartsUsedUpgrade(System.String partRequestDetailIDNum, System.Int32 removeSitePartObjid, System.String installPartNumber, System.String installPartRevision, System.String installPartDomain, System.Int32 installQuantity)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LogPartsUsedUpgrade(partRequestDetailIDNum, removeSitePartObjid, installPartNumber, installPartRevision, installPartDomain, installQuantity) );	
			
		}
		
		[WebMethod(MessageName="LogPartsUsedUpgrade3")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogPartsUsedUpgrade(System.String partRequestDetailIDNum, System.String caseIDNum, System.Int32 removeSitePartObjid, System.String installPartNumber, System.String installPartRevision, System.String installPartDomain, System.String installSerialNumber)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LogPartsUsedUpgrade(partRequestDetailIDNum, caseIDNum, removeSitePartObjid, installPartNumber, installPartRevision, installPartDomain, installSerialNumber) );	
			
		}
		
		[WebMethod(MessageName="LogPartsUsedUpgrade4")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogPartsUsedUpgrade(System.String partRequestDetailIDNum, System.String caseIDNum, System.Int32 removeSitePartObjid, System.String installPartNumber, System.String installPartRevision, System.String installPartDomain, System.Int32 installQuantity)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LogPartsUsedUpgrade(partRequestDetailIDNum, caseIDNum, removeSitePartObjid, installPartNumber, installPartRevision, installPartDomain, installQuantity) );	
			
		}
		
		[WebMethod(MessageName="LogPartsUsedUpgrade5")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogPartsUsedUpgrade(Protocols.FieldOps.LogPartsUsedUpgradeSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.LogPartsUsedUpgradeSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.LogPartsUsedUpgradeSetup(setupParam.PartRequestDetailIDNum, setupParam.RemoveSitePartObjid, setupParam.InstallPartNumber, setupParam.InstallPartRevision, setupParam.InstallPartDomain, setupParam.InstallSerialNumber);
					break;
				case 1:
					setup = new FChoice.Toolkits.Clarify.FieldOps.LogPartsUsedUpgradeSetup(setupParam.PartRequestDetailIDNum, setupParam.RemoveSitePartObjid, setupParam.InstallPartNumber, setupParam.InstallPartRevision, setupParam.InstallPartDomain, setupParam.InstallQuantity);
					break;
				case 2:
					setup = new FChoice.Toolkits.Clarify.FieldOps.LogPartsUsedUpgradeSetup(setupParam.PartRequestDetailIDNum, setupParam.CaseIDNum, setupParam.RemoveSitePartObjid, setupParam.InstallPartNumber, setupParam.InstallPartRevision, setupParam.InstallPartDomain, setupParam.InstallSerialNumber);
					break;
				case 3:
					setup = new FChoice.Toolkits.Clarify.FieldOps.LogPartsUsedUpgradeSetup(setupParam.PartRequestDetailIDNum, setupParam.CaseIDNum, setupParam.RemoveSitePartObjid, setupParam.InstallPartNumber, setupParam.InstallPartRevision, setupParam.InstallPartDomain, setupParam.InstallQuantity);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartRequestDetailIDNum = setupParam.PartRequestDetailIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ParentSitePartObjid = setupParam.ParentSitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.InstallAtSite = setupParam.InstallAtSite;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.RemoveSitePartObjid = setupParam.RemoveSitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.ToLocation = setupParam.ToLocation;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.ToBin = setupParam.ToBin;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.ToContainer = setupParam.ToContainer;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.ToGood = setupParam.ToGood;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.FailureCode = setupParam.FailureCode;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.InstallPartNumber = setupParam.InstallPartNumber;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.InstallPartRevision = setupParam.InstallPartRevision;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.InstallPartDomain = setupParam.InstallPartDomain;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.InstallSerialNumber = setupParam.InstallSerialNumber;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.InstallQuantity = setupParam.InstallQuantity;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.InstallPrice = setupParam.InstallPrice;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				setup.FromLocation = setupParam.FromLocation;			
			}
				
			if( Global.IsPropertyDirty(262144, setupParam.DirtyFieldFlags) )
			{
				setup.FromBin = setupParam.FromBin;			
			}
				
			if( Global.IsPropertyDirty(524288, setupParam.DirtyFieldFlags) )
			{
				setup.FromContainer = setupParam.FromContainer;			
			}
				
			if( Global.IsPropertyDirty(1048576, setupParam.DirtyFieldFlags) )
			{
				setup.FromGood = setupParam.FromGood;			
			}
				
			if( Global.IsPropertyDirty(2097152, setupParam.DirtyFieldFlags) )
			{
				setup.EngineerUserName = setupParam.EngineerUserName;			
			}
				
			if( Global.IsPropertyDirty(4194304, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(8388608, setupParam.DirtyFieldFlags) )
			{
				setup.AllowMove = setupParam.AllowMove;			
			}
				
			if( Global.IsPropertyDirty(16777216, setupParam.DirtyFieldFlags) )
			{
				setup.LogDate = setupParam.LogDate;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.LogPartsUsedUpgrade(setup) );
			
		}
		
		[WebMethod(MessageName="PartTransfer")]
		[SoapHeader("AuthHeader")]
		public Protocols.FieldOps.PartTransferResultProtocol PartTransfer(System.String partNumber, System.String partRevision, System.String partDomain, System.Int32 quantity, Protocols.LocationProtocol fromlocation, Protocols.LocationProtocol tolocation)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.FieldOps.PartTransferResultProtocol( toolkit.PartTransfer(partNumber, partRevision, partDomain, quantity, fromlocation.ToLocation(), tolocation.ToLocation()) );	
			
		}
		
		[WebMethod(MessageName="PartTransfer2")]
		[SoapHeader("AuthHeader")]
		public Protocols.FieldOps.PartTransferResultProtocol PartTransfer(System.String partNumber, System.String partRevision, System.String partDomain, System.String serialNumber, Protocols.LocationProtocol fromlocation, Protocols.LocationProtocol tolocation)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.FieldOps.PartTransferResultProtocol( toolkit.PartTransfer(partNumber, partRevision, partDomain, serialNumber, fromlocation.ToLocation(), tolocation.ToLocation()) );	
			
		}
		
		[WebMethod(MessageName="PartTransfer3")]
		[SoapHeader("AuthHeader")]
		public Protocols.FieldOps.PartTransferResultProtocol PartTransfer(Protocols.FieldOps.PartTransferSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.PartTransferSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.PartTransferSetup(setupParam.PartNumber, setupParam.PartRevision, setupParam.PartDomain, setupParam.Quantity, setupParam.FromLocation.ToLocation(), setupParam.ToLocation.ToLocation());
					break;
				case 1:
					setup = new FChoice.Toolkits.Clarify.FieldOps.PartTransferSetup(setupParam.PartNumber, setupParam.PartRevision, setupParam.PartDomain, setupParam.SerialNumber, setupParam.FromLocation.ToLocation(), setupParam.ToLocation.ToLocation());
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Quantity = setupParam.Quantity;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.SerialNumber = setupParam.SerialNumber;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.FromGood = setupParam.FromGood;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.ToGood = setupParam.ToGood;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.TransferDate = setupParam.TransferDate;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.ReferenceIDNum = setupParam.ReferenceIDNum;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(8388608, setupParam.DirtyFieldFlags) )
			{
				setupParam.FromLocation = new Protocols.LocationProtocol(); setupParam.FromLocation.IsPrimaryBinSuggestion = setup.FromLocation.IsPrimaryBinSuggestion; setupParam.FromLocation.LocationName = setup.FromLocation.LocationName; setupParam.FromLocation.BinName = setup.FromLocation.BinName;			
			}
				
			if( Global.IsPropertyDirty(16777216, setupParam.DirtyFieldFlags) )
			{
				setupParam.ToLocation = new Protocols.LocationProtocol(); setupParam.ToLocation.IsPrimaryBinSuggestion = setup.ToLocation.IsPrimaryBinSuggestion; setupParam.ToLocation.LocationName = setup.ToLocation.LocationName; setupParam.ToLocation.BinName = setup.ToLocation.BinName;			
			}
				
							
			return new Protocols.FieldOps.PartTransferResultProtocol( toolkit.PartTransfer(setup) );
			
		}
		
		[WebMethod(MessageName="MoveSitePartToBin")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveSitePartToBin(System.Int32 sitePartObjid, System.Int32 parentBinObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.MoveSitePartToBin(sitePartObjid, parentBinObjid) );	
			
		}
		
		[WebMethod(MessageName="MoveSitePartToBin2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveSitePartToBin(Protocols.FieldOps.MoveSitePartToBinSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.MoveSitePartToBinSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.MoveSitePartToBinSetup(setupParam.SitePartObjid, setupParam.ParentBinObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SitePartObjid = setupParam.SitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.MoveDate = setupParam.MoveDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ParentBinObjid = setupParam.ParentBinObjid;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.AddActivityLog = setupParam.AddActivityLog;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.InstallAndMove = setupParam.InstallAndMove;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.MoveSitePartToBin(setup) );
			
		}
		
		[WebMethod(MessageName="MoveSitePartToSite")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveSitePartToSite(System.Int32 sitePartObjid, System.String siteIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.MoveSitePartToSite(sitePartObjid, siteIDNum) );	
			
		}
		
		[WebMethod(MessageName="MoveSitePartToSite2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveSitePartToSite(Protocols.FieldOps.MoveSitePartToSiteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.MoveSitePartToSiteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.MoveSitePartToSiteSetup(setupParam.SitePartObjid, setupParam.SiteIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SitePartObjid = setupParam.SitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.MoveDate = setupParam.MoveDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.AddActivityLog = setupParam.AddActivityLog;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.InstallAndMove = setupParam.InstallAndMove;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.MoveSitePartToSite(setup) );
			
		}
		
		[WebMethod(MessageName="MoveSitePartToPart")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveSitePartToPart(System.Int32 sitePartObjid, System.Int32 parentSitePartObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.MoveSitePartToPart(sitePartObjid, parentSitePartObjid) );	
			
		}
		
		[WebMethod(MessageName="MoveSitePartToPart2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveSitePartToPart(Protocols.FieldOps.MoveSitePartToPartSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.MoveSitePartToPartSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.MoveSitePartToPartSetup(setupParam.SitePartObjid, setupParam.ParentSitePartObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SitePartObjid = setupParam.SitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.MoveDate = setupParam.MoveDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ParentSitePartObjid = setupParam.ParentSitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.AddActivityLog = setupParam.AddActivityLog;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.InstallAndMove = setupParam.InstallAndMove;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.MoveSitePartToPart(setup) );
			
		}
		
		[WebMethod(MessageName="ReinstallSitePart")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReinstallSitePart(System.Int32 sitePartObjid, System.String siteIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ReinstallSitePart(sitePartObjid, siteIDNum) );	
			
		}
		
		[WebMethod(MessageName="ReinstallSitePart2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReinstallSitePart(Protocols.FieldOps.ReinstallSitePartSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.ReinstallSitePartSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.ReinstallSitePartSetup(setupParam.SitePartObjid, setupParam.SiteIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SitePartObjid = setupParam.SitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ParentBinObjid = setupParam.ParentBinObjid;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ParentSitePartObjid = setupParam.ParentSitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ReinstallDate = setupParam.ReinstallDate;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.AddActivityLog = setupParam.AddActivityLog;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.UseInstall = setupParam.UseInstall;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ReinstallSitePart(setup) );
			
		}
		
		[WebMethod(MessageName="DeinstallSitePart")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeinstallSitePart(System.Int32 sitePartObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DeinstallSitePart(sitePartObjid) );	
			
		}
		
		[WebMethod(MessageName="DeinstallSitePart2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeinstallSitePart(Protocols.FieldOps.DeinstallSitePartSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.DeinstallSitePartSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.DeinstallSitePartSetup(setupParam.SitePartObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SitePartObjid = setupParam.SitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.DeinstallDate = setupParam.DeinstallDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UseRemove = setupParam.UseRemove;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DeinstallSitePart(setup) );
			
		}
		
//		[WebMethod(MessageName="UpdateSitePart")]
//		[SoapHeader("AuthHeader")]
//		public Protocols.ToolkitResultProtocol UpdateSitePart(System.Int32 sitePartObjid)
//		{
//			ClarifySession session = Global.GetSession( AuthHeader );
//			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
//			
//			return new Protocols.ToolkitResultProtocol( toolkit.UpdateSitePart(sitePartObjid) );	
//			
//		}
		
		[WebMethod(MessageName="UpdateSitePart2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateSitePart(Protocols.FieldOps.UpdateSitePartSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.UpdateSitePartSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.UpdateSitePartSetup(setupParam.SitePartObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SitePartObjid = setupParam.SitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.InstanceName = setupParam.InstanceName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.SerialNumber = setupParam.SerialNumber;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.InvoiceNumber = setupParam.InvoiceNumber;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ShipDate = setupParam.ShipDate;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.InstallDate = setupParam.InstallDate;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.WarrantyDate = setupParam.WarrantyDate;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.Quantity = setupParam.Quantity;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.PartStatus = setupParam.PartStatus;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.Comments = setupParam.Comments;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.ServiceEndDate = setupParam.ServiceEndDate;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.AddActivityLog = setupParam.AddActivityLog;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateSitePart(setup) );
			
		}
		
		[WebMethod(MessageName="InstallSitePart")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol InstallSitePart(System.String siteIDNum, System.String partNumber, System.String partrevision, System.String partdomain, System.Int32 quantity)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.InstallSitePart(siteIDNum, partNumber, partrevision, partdomain, quantity) );	
			
		}
		
		[WebMethod(MessageName="InstallSitePart2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol InstallSitePart(System.String siteIDNum, System.String partNumber, System.String partrevision, System.String partdomain, System.String serialNumber)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.InstallSitePart(siteIDNum, partNumber, partrevision, partdomain, serialNumber) );	
			
		}
		
		[WebMethod(MessageName="InstallSitePart3")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol InstallSitePart(Protocols.FieldOps.InstallSitePartSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.InstallSitePartSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.InstallSitePartSetup(setupParam.SiteIDNum, setupParam.PartNumber, setupParam.PartRevision, setupParam.PartDomain, setupParam.Quantity);
					break;
				case 1:
					setup = new FChoice.Toolkits.Clarify.FieldOps.InstallSitePartSetup(setupParam.SiteIDNum, setupParam.PartNumber, setupParam.PartRevision, setupParam.PartDomain, setupParam.SerialNumber);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.Quantity = setupParam.Quantity;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.SerialNumber = setupParam.SerialNumber;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.ParentBinObjid = setupParam.ParentBinObjid;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.ParentSitePartObjid = setupParam.ParentSitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.InstanceName = setupParam.InstanceName;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.Comments = setupParam.Comments;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.PartStatus = setupParam.PartStatus;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.InvoiceNumber = setupParam.InvoiceNumber;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.InstallDate = setupParam.InstallDate;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.ShipDate = setupParam.ShipDate;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.AddActivityLog = setupParam.AddActivityLog;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.InstallSitePart(setup) );
			
		}
		
		[WebMethod(MessageName="DeleteServiceInterruption")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteServiceInterruption(System.Int32 appointmentObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteServiceInterruption(appointmentObjid) );	
			
		}
		
		[WebMethod(MessageName="DeleteServiceInterruption2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteServiceInterruption(Protocols.FieldOps.DeleteServiceInterruptionSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.DeleteServiceInterruptionSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.DeleteServiceInterruptionSetup(setupParam.AppointmentObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.AppointmentObjid = setupParam.AppointmentObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteServiceInterruption(setup) );
			
		}
		
//		[WebMethod(MessageName="UpdateServiceInterruption")]
//		[SoapHeader("AuthHeader")]
//		public Protocols.ToolkitResultProtocol UpdateServiceInterruption(System.Int32 appointmentObjid)
//		{
//			ClarifySession session = Global.GetSession( AuthHeader );
//			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
//			
//			return new Protocols.ToolkitResultProtocol( toolkit.UpdateServiceInterruption(appointmentObjid) );	
//			
//		}
		
		[WebMethod(MessageName="UpdateServiceInterruption2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateServiceInterruption(Protocols.FieldOps.UpdateServiceInterruptionSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.UpdateServiceInterruptionSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.UpdateServiceInterruptionSetup(setupParam.AppointmentObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.AppointmentObjid = setupParam.AppointmentObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.StartDate = setupParam.StartDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.EndDate = setupParam.EndDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.Duration = TimeSpan.FromSeconds(setupParam.Duration);			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ServiceClass = setupParam.ServiceClass;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.ServiceType = setupParam.ServiceType;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateServiceInterruption(setup) );
			
		}
		
		[WebMethod(MessageName="AddServiceInterruption")]
		[SoapHeader("AuthHeader")]
		public Protocols.FieldOps.AddServiceInterruptionResultProtocol AddServiceInterruption(System.String caseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.FieldOps.AddServiceInterruptionResultProtocol( toolkit.AddServiceInterruption(caseIDNum) );	
			
		}
		
		[WebMethod(MessageName="AddServiceInterruption2")]
		[SoapHeader("AuthHeader")]
		public Protocols.FieldOps.AddServiceInterruptionResultProtocol AddServiceInterruption(Protocols.FieldOps.AddServiceInterruptionSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.AddServiceInterruptionSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.AddServiceInterruptionSetup(setupParam.CaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.SitePartObjid = setupParam.SitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.StartDate = setupParam.StartDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.EndDate = setupParam.EndDate;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.Duration = TimeSpan.FromSeconds(setupParam.Duration);			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.ServiceClass = setupParam.ServiceClass;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.ServiceType = setupParam.ServiceType;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
							
			return new Protocols.FieldOps.AddServiceInterruptionResultProtocol( toolkit.AddServiceInterruption(setup) );
			
		}
		
		[WebMethod(MessageName="DeleteExpenseLog")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteExpenseLog(System.Int32 expenseLogObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteExpenseLog(expenseLogObjid) );	
			
		}
		
		[WebMethod(MessageName="DeleteExpenseLog2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteExpenseLog(Protocols.FieldOps.DeleteExpenseLogSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.DeleteExpenseLogSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.DeleteExpenseLogSetup(setupParam.ExpenseLogObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ExpenseLogObjid = setupParam.ExpenseLogObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.LastModifiedDate = setupParam.LastModifiedDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteExpenseLog(setup) );
			
		}
		
		[WebMethod(MessageName="UpdateExpenseLog")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateExpenseLog(System.Int32 expenseLogObjid, System.Double quantity, System.Double rate)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateExpenseLog(expenseLogObjid, quantity, rate) );	
			
		}
		
		[WebMethod(MessageName="UpdateExpenseLog2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateExpenseLog(Protocols.FieldOps.UpdateExpenseLogSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.UpdateExpenseLogSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.UpdateExpenseLogSetup(setupParam.ExpenseLogObjid, setupParam.Quantity, setupParam.Rate);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ExpenseLogObjid = setupParam.ExpenseLogObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.PerformedByUserName = setupParam.PerformedByUserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ExpenseType = setupParam.ExpenseType;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Quantity = setupParam.Quantity;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.Rate = setupParam.Rate;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.IsBillable = setupParam.IsBillable;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.BillTo = setupParam.BillTo;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.Resolution = setupParam.Resolution;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateExpenseLog(setup) );
			
		}
		
		[WebMethod(MessageName="CreateExpenseLog")]
		[SoapHeader("AuthHeader")]
		public Protocols.FieldOps.CreateExpenseLogResultProtocol CreateExpenseLog(System.Int32 onsiteLogObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.FieldOps.CreateExpenseLogResultProtocol( toolkit.CreateExpenseLog(onsiteLogObjid) );	
			
		}
		
		[WebMethod(MessageName="CreateExpenseLog2")]
		[SoapHeader("AuthHeader")]
		public Protocols.FieldOps.CreateExpenseLogResultProtocol CreateExpenseLog(Protocols.FieldOps.CreateExpenseLogSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.CreateExpenseLogSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.CreateExpenseLogSetup(setupParam.OnsiteLogObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.OnsiteLogObjid = setupParam.OnsiteLogObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.PerformedByUserName = setupParam.PerformedByUserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.ExpenseType = setupParam.ExpenseType;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.Quantity = setupParam.Quantity;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.Rate = setupParam.Rate;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.IsBillable = setupParam.IsBillable;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.BillTo = setupParam.BillTo;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.Resolution = setupParam.Resolution;			
			}
				
							
			return new Protocols.FieldOps.CreateExpenseLogResultProtocol( toolkit.CreateExpenseLog(setup) );
			
		}
		
		[WebMethod(MessageName="DeleteTimeLog")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteTimeLog(System.Int32 timeLogObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteTimeLog(timeLogObjid) );	
			
		}
		
		[WebMethod(MessageName="DeleteTimeLog2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteTimeLog(Protocols.FieldOps.DeleteTimeLogSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.DeleteTimeLogSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.DeleteTimeLogSetup(setupParam.TimeLogObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.TimeLogObjid = setupParam.TimeLogObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.LastModifiedDate = setupParam.LastModifiedDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteTimeLog(setup) );
			
		}
		
//		[WebMethod(MessageName="UpdateTimeLog")]
//		[SoapHeader("AuthHeader")]
//		public Protocols.ToolkitResultProtocol UpdateTimeLog(System.Int32 timeLogObjid)
//		{
//			ClarifySession session = Global.GetSession( AuthHeader );
//			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
//			
//			return new Protocols.ToolkitResultProtocol( toolkit.UpdateTimeLog(timeLogObjid) );	
//			
//		}
		
		[WebMethod(MessageName="UpdateTimeLog2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateTimeLog(Protocols.FieldOps.UpdateTimeLogSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.UpdateTimeLogSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.UpdateTimeLogSetup(setupParam.TimeLogObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.TimeLogObjid = setupParam.TimeLogObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.PerformedByUserName = setupParam.PerformedByUserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.TimeType = setupParam.TimeType;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.Duration = TimeSpan.FromSeconds(setupParam.Duration);			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.IsBillable = setupParam.IsBillable;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.BillTo = setupParam.BillTo;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.WorkCenter = setupParam.WorkCenter;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.Resolution = setupParam.Resolution;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateTimeLog(setup) );
			
		}
		
		[WebMethod(MessageName="CreateTimeLog")]
		[SoapHeader("AuthHeader")]
		public Protocols.FieldOps.CreateTimeLogResultProtocol CreateTimeLog(System.Int32 onsiteLogObjid, System.DateTime startDate, System.Int32 duration)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.FieldOps.CreateTimeLogResultProtocol( toolkit.CreateTimeLog(onsiteLogObjid, startDate, TimeSpan.FromSeconds(duration)) );	
			
		}
		
		[WebMethod(MessageName="CreateTimeLog2")]
		[SoapHeader("AuthHeader")]
		public Protocols.FieldOps.CreateTimeLogResultProtocol CreateTimeLog(Protocols.FieldOps.CreateTimeLogSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.CreateTimeLogSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.CreateTimeLogSetup(setupParam.OnsiteLogObjid, setupParam.StartDate, TimeSpan.FromSeconds(setupParam.Duration));
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.OnsiteLogObjid = setupParam.OnsiteLogObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.PerformedByUserName = setupParam.PerformedByUserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.TimeType = setupParam.TimeType;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.StartDate = setupParam.StartDate;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.Duration = TimeSpan.FromSeconds(setupParam.Duration);			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.IsBillable = setupParam.IsBillable;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.BillTo = setupParam.BillTo;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.WorkCenter = setupParam.WorkCenter;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.Resolution = setupParam.Resolution;			
			}
				
							
			return new Protocols.FieldOps.CreateTimeLogResultProtocol( toolkit.CreateTimeLog(setup) );
			
		}
		
		[WebMethod(MessageName="DeleteOnsiteLog")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteOnsiteLog(System.Int32 onsiteLogObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteOnsiteLog(onsiteLogObjid) );	
			
		}
		
		[WebMethod(MessageName="DeleteOnsiteLog2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteOnsiteLog(Protocols.FieldOps.DeleteOnsiteLogSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.DeleteOnsiteLogSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.DeleteOnsiteLogSetup(setupParam.OnsiteLogObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.OnsiteLogObjid = setupParam.OnsiteLogObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NoteDate = setupParam.NoteDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteOnsiteLog(setup) );
			
		}
		
		[WebMethod(MessageName="CreateOnsiteLog")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateOnsiteLog(FChoice.Toolkits.Clarify.CaseObjectType objectType, System.String objectIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateOnsiteLog(objectType, objectIDNum) );	
			
		}
		
		[WebMethod(MessageName="CreateOnsiteLog2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateOnsiteLog(Protocols.FieldOps.CreateOnsiteLogSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.CreateOnsiteLogSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.CreateOnsiteLogSetup(setupParam.ObjectType, setupParam.ObjectIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ObjectType = setupParam.ObjectType;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ObjectIDNum = setupParam.ObjectIDNum;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.LastModifiedDate = setupParam.LastModifiedDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.Resolution = setupParam.Resolution;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.PerformedByUserName = setupParam.PerformedByUserName;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateOnsiteLog(setup) );
			
		}
		
		[WebMethod(MessageName="DeleteAppointment")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteAppointment(System.Int32 appointmentObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteAppointment(appointmentObjid) );	
			
		}
		
		[WebMethod(MessageName="DeleteAppointment2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteAppointment(Protocols.FieldOps.DeleteAppointmentSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.DeleteAppointmentSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.DeleteAppointmentSetup(setupParam.AppointmentObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.AppointmentObjid = setupParam.AppointmentObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteAppointment(setup) );
			
		}
		
//		[WebMethod(MessageName="UpdateAppointment")]
//		[SoapHeader("AuthHeader")]
//		public Protocols.ToolkitResultProtocol UpdateAppointment(System.Int32 appointmentObjid)
//		{
//			ClarifySession session = Global.GetSession( AuthHeader );
//			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
//			
//			return new Protocols.ToolkitResultProtocol( toolkit.UpdateAppointment(appointmentObjid) );	
//			
//		}
		
		[WebMethod(MessageName="UpdateAppointment2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateAppointment(Protocols.FieldOps.UpdateAppointmentSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.UpdateAppointmentSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.UpdateAppointmentSetup(setupParam.AppointmentObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.AppointmentObjid = setupParam.AppointmentObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.StartDate = setupParam.StartDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.EndDate = setupParam.EndDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Duration = TimeSpan.FromSeconds(setupParam.Duration);			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.CellText = setupParam.CellText;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.AppointmentClass = setupParam.AppointmentClass;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.AppointmentType = setupParam.AppointmentType;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateAppointment(setup) );
			
		}
		
		[WebMethod(MessageName="CreateAppointment")]
		[SoapHeader("AuthHeader")]
		public Protocols.FieldOps.CreateAppointmentResultProtocol CreateAppointment(System.DateTime startDate, System.DateTime endDate)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.FieldOps.CreateAppointmentResultProtocol( toolkit.CreateAppointment(startDate, endDate) );	
			
		}
		
		[WebMethod(MessageName="CreateAppointment2")]
		[SoapHeader("AuthHeader")]
		public Protocols.FieldOps.CreateAppointmentResultProtocol CreateAppointment(System.DateTime startDate, System.Int32 duration)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.FieldOps.CreateAppointmentResultProtocol( toolkit.CreateAppointment(startDate, TimeSpan.FromSeconds(duration)) );	
			
		}
		
		[WebMethod(MessageName="CreateAppointment3")]
		[SoapHeader("AuthHeader")]
		public Protocols.FieldOps.CreateAppointmentResultProtocol CreateAppointment(System.Int32 duration, System.DateTime endDate)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.FieldOps.CreateAppointmentResultProtocol( toolkit.CreateAppointment(TimeSpan.FromSeconds(duration), endDate) );	
			
		}
		
		[WebMethod(MessageName="CreateAppointment4")]
		[SoapHeader("AuthHeader")]
		public Protocols.FieldOps.CreateAppointmentResultProtocol CreateAppointment(Protocols.FieldOps.CreateAppointmentSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.CreateAppointmentSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.CreateAppointmentSetup(setupParam.StartDate, setupParam.EndDate);
					break;
				case 1:
					setup = new FChoice.Toolkits.Clarify.FieldOps.CreateAppointmentSetup(setupParam.StartDate, TimeSpan.FromSeconds(setupParam.Duration));
					break;
				case 2:
					setup = new FChoice.Toolkits.Clarify.FieldOps.CreateAppointmentSetup(TimeSpan.FromSeconds(setupParam.Duration), setupParam.EndDate);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.StartDate = setupParam.StartDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.EndDate = setupParam.EndDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Duration = TimeSpan.FromSeconds(setupParam.Duration);			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.CellText = setupParam.CellText;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.EmployeeFirstName = setupParam.EmployeeFirstName;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.EmployeeLastName = setupParam.EmployeeLastName;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.SitePartObjid = setupParam.SitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.AppointmentClass = setupParam.AppointmentClass;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.AppointmentType = setupParam.AppointmentType;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
							
			return new Protocols.FieldOps.CreateAppointmentResultProtocol( toolkit.CreateAppointment(setup) );
			
		}
		
		[WebMethod(MessageName="DispatchFieldEngineer")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DispatchFieldEngineer(System.String caseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DispatchFieldEngineer(caseIDNum) );	
			
		}
		
		[WebMethod(MessageName="DispatchFieldEngineer2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DispatchFieldEngineer(Protocols.FieldOps.DispatchFieldEngineerSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit toolkit = new FChoice.Toolkits.Clarify.FieldOps.FieldOpsToolkit( session );
			FChoice.Toolkits.Clarify.FieldOps.DispatchFieldEngineerSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.FieldOps.DispatchFieldEngineerSetup(setupParam.CaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.DispatchDate = setupParam.DispatchDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.WorkOrder = setupParam.WorkOrder;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.AppointmentDate = setupParam.AppointmentDate;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.Duration = TimeSpan.FromSeconds(setupParam.Duration);			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.Address1 = setupParam.Address1;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.Address2 = setupParam.Address2;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.City = setupParam.City;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.State = setupParam.State;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.ZipCode = setupParam.ZipCode;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.MainPhone = setupParam.MainPhone;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.AlternatePhone = setupParam.AlternatePhone;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				setup.PaymentMethod = setupParam.PaymentMethod;			
			}
				
			if( Global.IsPropertyDirty(262144, setupParam.DirtyFieldFlags) )
			{
				setup.ReferenceNumber = setupParam.ReferenceNumber;			
			}
				
			if( Global.IsPropertyDirty(524288, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(1048576, setupParam.DirtyFieldFlags) )
			{
				setup.RequestedETADate = setupParam.RequestedETADate;			
			}
				
			if( Global.IsPropertyDirty(2097152, setupParam.DirtyFieldFlags) )
			{
				setup.AppointmentConfirmed = setupParam.AppointmentConfirmed;			
			}
				
			if( Global.IsPropertyDirty(4194304, setupParam.DirtyFieldFlags) )
			{
				setup.CellText = setupParam.CellText;			
			}
				
			if( Global.IsPropertyDirty(8388608, setupParam.DirtyFieldFlags) )
			{
				setup.Proxy = setupParam.Proxy;			
			}
				
			if( Global.IsPropertyDirty(33554432, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DispatchFieldEngineer(setup) );
			
		}
		
	}
}
