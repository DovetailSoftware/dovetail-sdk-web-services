//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Web;
using System.Web.Services;
using System.Web.Services.Protocols;

using FChoice.Foundation.Clarify;
using FChoice.Foundation.Clarify.Compatibility;
using FChoice.Foundation.Clarify.Compatibility.Toolkits;
using FChoice.Toolkits.Clarify;
using FChoice.WebServices.Clarify;

namespace FChoice.WebServices.Clarify
{
	[SoapRpcService(RoutingStyle=SoapServiceRoutingStyle.SoapAction)]
	[WebService(Description="fcSDK SupportToolkit Web Service", Namespace="http://www.fchoice.com/schemas/FChoice.WebServices.Clarify.SupportToolkitSrv_v1")]
	public class SupportToolkitSrv : System.Web.Services.WebService
	{
	
		public AuthenticationHeader AuthHeader;
		
		[WebMethod(MessageName="GetSubcaseTimeAndExpenses")]
		[SoapHeader("AuthHeader")]
		public Protocols.Support.GetSubcaseTimeAndExpensesResultProtocol GetSubcaseTimeAndExpenses(System.String subcaseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.Support.GetSubcaseTimeAndExpensesResultProtocol( toolkit.GetSubcaseTimeAndExpenses(subcaseIDNum) );	
			
		}
		
		[WebMethod(MessageName="GetSubcaseTimeAndExpenses2")]
		[SoapHeader("AuthHeader")]
		public Protocols.Support.GetSubcaseTimeAndExpensesResultProtocol GetSubcaseTimeAndExpenses(Protocols.Support.GetSubcaseTimeAndExpensesSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.GetSubcaseTimeAndExpensesSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.GetSubcaseTimeAndExpensesSetup(setupParam.SubcaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SubcaseIDNum = setupParam.SubcaseIDNum;			
			}
				
							
			return new Protocols.Support.GetSubcaseTimeAndExpensesResultProtocol( toolkit.GetSubcaseTimeAndExpenses(setup) );
			
		}
		
		[WebMethod(MessageName="GetCaseTimeAndExpenses")]
		[SoapHeader("AuthHeader")]
		public Protocols.Support.GetCaseTimeAndExpensesResultProtocol GetCaseTimeAndExpenses(System.String caseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.Support.GetCaseTimeAndExpensesResultProtocol( toolkit.GetCaseTimeAndExpenses(caseIDNum) );	
			
		}
		
		[WebMethod(MessageName="GetCaseTimeAndExpenses2")]
		[SoapHeader("AuthHeader")]
		public Protocols.Support.GetCaseTimeAndExpensesResultProtocol GetCaseTimeAndExpenses(Protocols.Support.GetCaseTimeAndExpensesSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.GetCaseTimeAndExpensesSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.GetCaseTimeAndExpensesSetup(setupParam.CaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
							
			return new Protocols.Support.GetCaseTimeAndExpensesResultProtocol( toolkit.GetCaseTimeAndExpenses(setup) );
			
		}
		
		[WebMethod(MessageName="LogSubcaseEmail")]
		[SoapHeader("AuthHeader")]
		public Protocols.Support.LogSubcaseEmailResultProtocol LogSubcaseEmail(System.String subcaseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.Support.LogSubcaseEmailResultProtocol( toolkit.LogSubcaseEmail(subcaseIDNum) );	
			
		}
		
		[WebMethod(MessageName="LogSubcaseEmail2")]
		[SoapHeader("AuthHeader")]
		public Protocols.Support.LogSubcaseEmailResultProtocol LogSubcaseEmail(Protocols.Support.LogSubcaseEmailSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.LogSubcaseEmailSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.LogSubcaseEmailSetup(setupParam.SubcaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SubcaseIDNum = setupParam.SubcaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ActionType = setupParam.ActionType;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.LogDate = setupParam.LogDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Message = setupParam.Message;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.Recipient = setupParam.Recipient;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.CCList = setupParam.CCList;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.NewStatus = setupParam.NewStatus;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentTitle = setupParam.CommitmentTitle;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentNotes = setupParam.CommitmentNotes;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentDueDate = setupParam.CommitmentDueDate;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentPriorWarning = TimeSpan.FromSeconds(setupParam.CommitmentPriorWarning);			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.IsCommitmentToCustomer = setupParam.IsCommitmentToCustomer;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentActionType = setupParam.CommitmentActionType;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentContactObjid = setupParam.CommitmentContactObjid;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.SendEmail = setupParam.SendEmail;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.Support.LogSubcaseEmailResultProtocol( toolkit.LogSubcaseEmail(setup) );
			
		}
		
		[WebMethod(MessageName="LogCaseEmail")]
		[SoapHeader("AuthHeader")]
		public Protocols.Support.LogCaseEmailResultProtocol LogCaseEmail(System.String caseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.Support.LogCaseEmailResultProtocol( toolkit.LogCaseEmail(caseIDNum) );	
			
		}
		
		[WebMethod(MessageName="LogCaseEmail2")]
		[SoapHeader("AuthHeader")]
		public Protocols.Support.LogCaseEmailResultProtocol LogCaseEmail(Protocols.Support.LogCaseEmailSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.LogCaseEmailSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.LogCaseEmailSetup(setupParam.CaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ActionType = setupParam.ActionType;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.LogDate = setupParam.LogDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Message = setupParam.Message;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.Recipient = setupParam.Recipient;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.CCList = setupParam.CCList;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.NewStatus = setupParam.NewStatus;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentTitle = setupParam.CommitmentTitle;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentNotes = setupParam.CommitmentNotes;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentDueDate = setupParam.CommitmentDueDate;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentPriorWarning = TimeSpan.FromSeconds(setupParam.CommitmentPriorWarning);			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.IsCommitmentToCustomer = setupParam.IsCommitmentToCustomer;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentActionType = setupParam.CommitmentActionType;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentContactObjid = setupParam.CommitmentContactObjid;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.SendEmail = setupParam.SendEmail;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.Support.LogCaseEmailResultProtocol( toolkit.LogCaseEmail(setup) );
			
		}
		
		[WebMethod(MessageName="UnrelateCaseFromParentCase")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UnrelateCaseFromParentCase(System.String caseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.UnrelateCaseFromParentCase(caseIDNum) );	
			
		}
		
		[WebMethod(MessageName="UnrelateCaseFromParentCase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UnrelateCaseFromParentCase(Protocols.Support.UnrelateCaseFromParentCaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.UnrelateCaseFromParentCaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.UnrelateCaseFromParentCaseSetup(setupParam.CaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UnrelateCaseFromParentCase(setup) );
			
		}
		
		[WebMethod(MessageName="RelateCaseToParentCase")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RelateCaseToParentCase(System.String caseIDNum, System.String parentCaseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.RelateCaseToParentCase(caseIDNum, parentCaseIDNum) );	
			
		}
		
		[WebMethod(MessageName="RelateCaseToParentCase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RelateCaseToParentCase(Protocols.Support.RelateCaseToParentCaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.RelateCaseToParentCaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.RelateCaseToParentCaseSetup(setupParam.CaseIDNum, setupParam.ParentCaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ParentCaseIDNum = setupParam.ParentCaseIDNum;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.RelateCaseToParentCase(setup) );
			
		}
		
		[WebMethod(MessageName="LogSubcaseNote")]
		[SoapHeader("AuthHeader")]
		public Protocols.Support.LogSubcaseNoteResultProtocol LogSubcaseNote(System.String subcaseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.Support.LogSubcaseNoteResultProtocol( toolkit.LogSubcaseNote(subcaseIDNum) );	
			
		}
		
		[WebMethod(MessageName="LogSubcaseNote2")]
		[SoapHeader("AuthHeader")]
		public Protocols.Support.LogSubcaseNoteResultProtocol LogSubcaseNote(Protocols.Support.LogSubcaseNoteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.LogSubcaseNoteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.LogSubcaseNoteSetup(setupParam.SubcaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SubcaseIDNum = setupParam.SubcaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ActionType = setupParam.ActionType;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.InternalUseOnlyNotes = setupParam.InternalUseOnlyNotes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.LogDate = setupParam.LogDate;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.NewStatus = setupParam.NewStatus;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentTitle = setupParam.CommitmentTitle;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentNotes = setupParam.CommitmentNotes;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentDueDate = setupParam.CommitmentDueDate;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentPriorWarning = TimeSpan.FromSeconds(setupParam.CommitmentPriorWarning);			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.IsCommitmentToCustomer = setupParam.IsCommitmentToCustomer;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.Support.LogSubcaseNoteResultProtocol( toolkit.LogSubcaseNote(setup) );
			
		}
		
		[WebMethod(MessageName="LogCaseNote")]
		[SoapHeader("AuthHeader")]
		public Protocols.Support.LogCaseNoteResultProtocol LogCaseNote(System.String caseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.Support.LogCaseNoteResultProtocol( toolkit.LogCaseNote(caseIDNum) );	
			
		}
		
		[WebMethod(MessageName="LogCaseNote2")]
		[SoapHeader("AuthHeader")]
		public Protocols.Support.LogCaseNoteResultProtocol LogCaseNote(Protocols.Support.LogCaseNoteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.LogCaseNoteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.LogCaseNoteSetup(setupParam.CaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ActionType = setupParam.ActionType;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.InternalUseOnlyNotes = setupParam.InternalUseOnlyNotes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.LogDate = setupParam.LogDate;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.NewStatus = setupParam.NewStatus;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentTitle = setupParam.CommitmentTitle;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentNotes = setupParam.CommitmentNotes;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentDueDate = setupParam.CommitmentDueDate;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentPriorWarning = TimeSpan.FromSeconds(setupParam.CommitmentPriorWarning);			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.IsCommitmentToCustomer = setupParam.IsCommitmentToCustomer;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.Support.LogCaseNoteResultProtocol( toolkit.LogCaseNote(setup) );
			
		}
		
		[WebMethod(MessageName="LogSubcaseResearch")]
		[SoapHeader("AuthHeader")]
		public Protocols.Support.LogSubcaseResearchResultProtocol LogSubcaseResearch(System.String subcaseIDNum, System.Int32 researchDuration)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.Support.LogSubcaseResearchResultProtocol( toolkit.LogSubcaseResearch(subcaseIDNum, TimeSpan.FromSeconds(researchDuration)) );	
			
		}
		
		[WebMethod(MessageName="LogSubcaseResearch2")]
		[SoapHeader("AuthHeader")]
		public Protocols.Support.LogSubcaseResearchResultProtocol LogSubcaseResearch(Protocols.Support.LogSubcaseResearchSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.LogSubcaseResearchSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.LogSubcaseResearchSetup(setupParam.SubcaseIDNum, TimeSpan.FromSeconds(setupParam.ResearchDuration));
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SubcaseIDNum = setupParam.SubcaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ActionType = setupParam.ActionType;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.InternalUseOnlyNotes = setupParam.InternalUseOnlyNotes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.LogDate = setupParam.LogDate;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ResearchDuration = TimeSpan.FromSeconds(setupParam.ResearchDuration);			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.NewStatus = setupParam.NewStatus;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentTitle = setupParam.CommitmentTitle;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentNotes = setupParam.CommitmentNotes;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentDueDate = setupParam.CommitmentDueDate;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentPriorWarning = TimeSpan.FromSeconds(setupParam.CommitmentPriorWarning);			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.IsCommitmentToCustomer = setupParam.IsCommitmentToCustomer;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.Support.LogSubcaseResearchResultProtocol( toolkit.LogSubcaseResearch(setup) );
			
		}
		
		[WebMethod(MessageName="LogCaseResearch")]
		[SoapHeader("AuthHeader")]
		public Protocols.Support.LogCaseResearchResultProtocol LogCaseResearch(System.String caseIDNum, System.Int32 researchDuration)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.Support.LogCaseResearchResultProtocol( toolkit.LogCaseResearch(caseIDNum, TimeSpan.FromSeconds(researchDuration)) );	
			
		}
		
		[WebMethod(MessageName="LogCaseResearch2")]
		[SoapHeader("AuthHeader")]
		public Protocols.Support.LogCaseResearchResultProtocol LogCaseResearch(Protocols.Support.LogCaseResearchSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.LogCaseResearchSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.LogCaseResearchSetup(setupParam.CaseIDNum, TimeSpan.FromSeconds(setupParam.ResearchDuration));
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ActionType = setupParam.ActionType;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.InternalUseOnlyNotes = setupParam.InternalUseOnlyNotes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.LogDate = setupParam.LogDate;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ResearchDuration = TimeSpan.FromSeconds(setupParam.ResearchDuration);			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.NewStatus = setupParam.NewStatus;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentTitle = setupParam.CommitmentTitle;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentNotes = setupParam.CommitmentNotes;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentDueDate = setupParam.CommitmentDueDate;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentPriorWarning = TimeSpan.FromSeconds(setupParam.CommitmentPriorWarning);			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.IsCommitmentToCustomer = setupParam.IsCommitmentToCustomer;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.Support.LogCaseResearchResultProtocol( toolkit.LogCaseResearch(setup) );
			
		}
		
		[WebMethod(MessageName="LogSubcasePhone")]
		[SoapHeader("AuthHeader")]
		public Protocols.Support.LogSubcasePhoneResultProtocol LogSubcasePhone(System.String subcaseIDNum, System.String contactFirstName, System.String contactLastName, System.String contactPhone)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.Support.LogSubcasePhoneResultProtocol( toolkit.LogSubcasePhone(subcaseIDNum, contactFirstName, contactLastName, contactPhone) );	
			
		}
		
		[WebMethod(MessageName="LogSubcasePhone2")]
		[SoapHeader("AuthHeader")]
		public Protocols.Support.LogSubcasePhoneResultProtocol LogSubcasePhone(Protocols.Support.LogSubcasePhoneSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.LogSubcasePhoneSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.LogSubcasePhoneSetup(setupParam.SubcaseIDNum, setupParam.ContactFirstName, setupParam.ContactLastName, setupParam.ContactPhone);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SubcaseIDNum = setupParam.SubcaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ContactPhone = setupParam.ContactPhone;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ActionType = setupParam.ActionType;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.InternalUseOnlyNotes = setupParam.InternalUseOnlyNotes;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.LogDate = setupParam.LogDate;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.LogEndDate = setupParam.LogEndDate;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.NewStatus = setupParam.NewStatus;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentTitle = setupParam.CommitmentTitle;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentNotes = setupParam.CommitmentNotes;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentDueDate = setupParam.CommitmentDueDate;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentPriorWarning = TimeSpan.FromSeconds(setupParam.CommitmentPriorWarning);			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.IsCommitmentToCustomer = setupParam.IsCommitmentToCustomer;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.Support.LogSubcasePhoneResultProtocol( toolkit.LogSubcasePhone(setup) );
			
		}
		
		[WebMethod(MessageName="LogCasePhone")]
		[SoapHeader("AuthHeader")]
		public Protocols.Support.LogCasePhoneResultProtocol LogCasePhone(System.String caseIDNum, System.String contactFirstName, System.String contactLastName, System.String contactPhone)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.Support.LogCasePhoneResultProtocol( toolkit.LogCasePhone(caseIDNum, contactFirstName, contactLastName, contactPhone) );	
			
		}
		
		[WebMethod(MessageName="LogCasePhone2")]
		[SoapHeader("AuthHeader")]
		public Protocols.Support.LogCasePhoneResultProtocol LogCasePhone(Protocols.Support.LogCasePhoneSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.LogCasePhoneSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.LogCasePhoneSetup(setupParam.CaseIDNum, setupParam.ContactFirstName, setupParam.ContactLastName, setupParam.ContactPhone);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ContactPhone = setupParam.ContactPhone;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ActionType = setupParam.ActionType;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.InternalUseOnlyNotes = setupParam.InternalUseOnlyNotes;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.LogDate = setupParam.LogDate;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.LogEndDate = setupParam.LogEndDate;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.NewStatus = setupParam.NewStatus;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentTitle = setupParam.CommitmentTitle;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentNotes = setupParam.CommitmentNotes;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentDueDate = setupParam.CommitmentDueDate;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentPriorWarning = TimeSpan.FromSeconds(setupParam.CommitmentPriorWarning);			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.IsCommitmentToCustomer = setupParam.IsCommitmentToCustomer;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.Support.LogCasePhoneResultProtocol( toolkit.LogCasePhone(setup) );
			
		}
		
		[WebMethod(MessageName="ReopenSubcase")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReopenSubcase(System.String subcaseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ReopenSubcase(subcaseIDNum) );	
			
		}
		
		[WebMethod(MessageName="ReopenSubcase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReopenSubcase(Protocols.Support.ReopenSubcaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.ReopenSubcaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.ReopenSubcaseSetup(setupParam.SubcaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SubcaseIDNum = setupParam.SubcaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ReopenDate = setupParam.ReopenDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ReopenSubcase(setup) );
			
		}
		
		[WebMethod(MessageName="ReopenCase")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReopenCase(System.String caseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ReopenCase(caseIDNum) );	
			
		}
		
		[WebMethod(MessageName="ReopenCase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReopenCase(Protocols.Support.ReopenCaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.ReopenCaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.ReopenCaseSetup(setupParam.CaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ReopenDate = setupParam.ReopenDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ReopenCase(setup) );
			
		}
		
//		[WebMethod(MessageName="UpdateSubcase")]
//		[SoapHeader("AuthHeader")]
//		public Protocols.ToolkitResultProtocol UpdateSubcase(System.String subcaseIDNum)
//		{
//			ClarifySession session = Global.GetSession( AuthHeader );
//			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
//			
//			return new Protocols.ToolkitResultProtocol( toolkit.UpdateSubcase(subcaseIDNum) );	
//			
//		}
		
		[WebMethod(MessageName="UpdateSubcase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateSubcase(Protocols.Support.UpdateSubcaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.UpdateSubcaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.UpdateSubcaseSetup(setupParam.SubcaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SubcaseIDNum = setupParam.SubcaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Priority = setupParam.Priority;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Severity = setupParam.Severity;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UpdateDate = setupParam.UpdateDate;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.OnlyOwner = setupParam.OnlyOwner;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateSubcase(setup) );
			
		}
		
//		[WebMethod(MessageName="UpdateCase")]
//		[SoapHeader("AuthHeader")]
//		public Protocols.ToolkitResultProtocol UpdateCase(System.String caseIDNum)
//		{
//			ClarifySession session = Global.GetSession( AuthHeader );
//			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
//			
//			return new Protocols.ToolkitResultProtocol( toolkit.UpdateCase(caseIDNum) );	
//			
//		}
		
		[WebMethod(MessageName="UpdateCase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateCase(Protocols.Support.UpdateCaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.UpdateCaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.UpdateCaseSetup(setupParam.CaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Priority = setupParam.Priority;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Severity = setupParam.Severity;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.CaseType = setupParam.CaseType;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.UpdateDate = setupParam.UpdateDate;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.OnlyOwner = setupParam.OnlyOwner;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.Title = setupParam.Title;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevisionObjid = setupParam.PartRevisionObjid;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.SitePartObjid = setupParam.SitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.ContractObjid = setupParam.ContractObjid;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.ClearSitePartRelation = setupParam.ClearSitePartRelation;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.ClearContractRelation = setupParam.ClearContractRelation;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.ClearPartRevisionRelation = setupParam.ClearPartRevisionRelation;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateCase(setup) );
			
		}
		
		[WebMethod(MessageName="AssignSubcase")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AssignSubcase(System.String subcaseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AssignSubcase(subcaseIDNum) );	
			
		}
		
		[WebMethod(MessageName="AssignSubcase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AssignSubcase(Protocols.Support.AssignSubcaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.AssignSubcaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.AssignSubcaseSetup(setupParam.SubcaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SubcaseIDNum = setupParam.SubcaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewUser = setupParam.NewUser;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.AssignDate = setupParam.AssignDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AssignSubcase(setup) );
			
		}
		
		[WebMethod(MessageName="AssignCase")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AssignCase(System.String caseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AssignCase(caseIDNum) );	
			
		}
		
		[WebMethod(MessageName="AssignCase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AssignCase(Protocols.Support.AssignCaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.AssignCaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.AssignCaseSetup(setupParam.CaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewUser = setupParam.NewUser;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.AssignDate = setupParam.AssignDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AssignCase(setup) );
			
		}
		
		[WebMethod(MessageName="RejectSubcase")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RejectSubcase(System.String subcaseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.RejectSubcase(subcaseIDNum) );	
			
		}
		
		[WebMethod(MessageName="RejectSubcase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RejectSubcase(Protocols.Support.RejectSubcaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.RejectSubcaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.RejectSubcaseSetup(setupParam.SubcaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SubcaseIDNum = setupParam.SubcaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.RejectDate = setupParam.RejectDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.RejectSubcase(setup) );
			
		}
		
		[WebMethod(MessageName="RejectCase")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RejectCase(System.String caseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.RejectCase(caseIDNum) );	
			
		}
		
		[WebMethod(MessageName="RejectCase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RejectCase(Protocols.Support.RejectCaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.RejectCaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.RejectCaseSetup(setupParam.CaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.RejectDate = setupParam.RejectDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.RejectCase(setup) );
			
		}
		
		[WebMethod(MessageName="AcceptSubcase")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AcceptSubcase(System.String subcaseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AcceptSubcase(subcaseIDNum) );	
			
		}
		
		[WebMethod(MessageName="AcceptSubcase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AcceptSubcase(Protocols.Support.AcceptSubcaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.AcceptSubcaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.AcceptSubcaseSetup(setupParam.SubcaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SubcaseIDNum = setupParam.SubcaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.AcceptDate = setupParam.AcceptDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AcceptSubcase(setup) );
			
		}
		
		[WebMethod(MessageName="AcceptCase")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AcceptCase(System.String caseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AcceptCase(caseIDNum) );	
			
		}
		
		[WebMethod(MessageName="AcceptCase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AcceptCase(Protocols.Support.AcceptCaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.AcceptCaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.AcceptCaseSetup(setupParam.CaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.AcceptDate = setupParam.AcceptDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AcceptCase(setup) );
			
		}
		
		[WebMethod(MessageName="MoveSubcase")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveSubcase(System.String subcaseIDNum, System.String newWipBin)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.MoveSubcase(subcaseIDNum, newWipBin) );	
			
		}
		
		[WebMethod(MessageName="MoveSubcase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveSubcase(Protocols.Support.MoveSubcaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.MoveSubcaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.MoveSubcaseSetup(setupParam.SubcaseIDNum, setupParam.NewWipBin);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SubcaseIDNum = setupParam.SubcaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewWipBin = setupParam.NewWipBin;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.MoveSubcase(setup) );
			
		}
		
		[WebMethod(MessageName="MoveCase")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveCase(System.String caseIDNum, System.String newWipBin)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.MoveCase(caseIDNum, newWipBin) );	
			
		}
		
		[WebMethod(MessageName="MoveCase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveCase(Protocols.Support.MoveCaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.MoveCaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.MoveCaseSetup(setupParam.CaseIDNum, setupParam.NewWipBin);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewWipBin = setupParam.NewWipBin;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.MoveCase(setup) );
			
		}
		
		[WebMethod(MessageName="FulfillCommitment")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol FulfillCommitment(System.Int32 logObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.FulfillCommitment(logObjid) );	
			
		}
		
		[WebMethod(MessageName="FulfillCommitment2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol FulfillCommitment(Protocols.Support.FulfillCommitmentSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.FulfillCommitmentSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.FulfillCommitmentSetup(setupParam.LogObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.LogObjid = setupParam.LogObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.FulfillDate = setupParam.FulfillDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.FulfillCommitment(setup) );
			
		}
		
		[WebMethod(MessageName="UpdateSubcaseCommitment")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateSubcaseCommitment(System.String subcaseIDNum, System.DateTime commitmentDate, System.Int32 commitmentObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateSubcaseCommitment(subcaseIDNum, commitmentDate, commitmentObjid) );	
			
		}
		
		[WebMethod(MessageName="UpdateSubcaseCommitment2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateSubcaseCommitment(Protocols.Support.UpdateSubcaseCommitmentSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.UpdateSubcaseCommitmentSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.UpdateSubcaseCommitmentSetup(setupParam.SubcaseIDNum, setupParam.CommitmentDate, setupParam.CommitmentObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SubcaseIDNum = setupParam.SubcaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Title = setupParam.Title;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ActionType = setupParam.ActionType;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentDate = setupParam.CommitmentDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentObjid = setupParam.CommitmentObjid;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.PriorWarning = TimeSpan.FromSeconds(setupParam.PriorWarning);			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.IsMadeToCustomer = setupParam.IsMadeToCustomer;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.ContactPhone = setupParam.ContactPhone;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.UpdateDate = setupParam.UpdateDate;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateSubcaseCommitment(setup) );
			
		}
		
		[WebMethod(MessageName="UpdateCaseCommitment")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateCaseCommitment(System.String caseIDNum, System.DateTime commitmentDate, System.Int32 commitmentObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateCaseCommitment(caseIDNum, commitmentDate, commitmentObjid) );	
			
		}
		
		[WebMethod(MessageName="UpdateCaseCommitment2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateCaseCommitment(Protocols.Support.UpdateCaseCommitmentSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.UpdateCaseCommitmentSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.UpdateCaseCommitmentSetup(setupParam.CaseIDNum, setupParam.CommitmentDate, setupParam.CommitmentObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Title = setupParam.Title;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ActionType = setupParam.ActionType;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentDate = setupParam.CommitmentDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentObjid = setupParam.CommitmentObjid;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.PriorWarning = TimeSpan.FromSeconds(setupParam.PriorWarning);			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.IsMadeToCustomer = setupParam.IsMadeToCustomer;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.ContactPhone = setupParam.ContactPhone;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.UpdateDate = setupParam.UpdateDate;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateCaseCommitment(setup) );
			
		}
		
		[WebMethod(MessageName="LogSubcaseCommitment")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogSubcaseCommitment(System.String subcaseIDNum, System.String title, System.Int32 priorWarning, System.String contactFirstName, System.String contactLastName, System.String contactPhone)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LogSubcaseCommitment(subcaseIDNum, title, TimeSpan.FromSeconds(priorWarning), contactFirstName, contactLastName, contactPhone) );	
			
		}
		
		[WebMethod(MessageName="LogSubcaseCommitment2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogSubcaseCommitment(Protocols.Support.LogSubcaseCommitmentSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.LogSubcaseCommitmentSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.LogSubcaseCommitmentSetup(setupParam.SubcaseIDNum, setupParam.Title, TimeSpan.FromSeconds(setupParam.PriorWarning), setupParam.ContactFirstName, setupParam.ContactLastName, setupParam.ContactPhone);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SubcaseIDNum = setupParam.SubcaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Title = setupParam.Title;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ActionType = setupParam.ActionType;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.LogDate = setupParam.LogDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentDate = setupParam.CommitmentDate;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.PriorWarning = TimeSpan.FromSeconds(setupParam.PriorWarning);			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.IsMadeToCustomer = setupParam.IsMadeToCustomer;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.ContactPhone = setupParam.ContactPhone;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateCommitmentEmail = setupParam.GenerateCommitmentEmail;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.LogSubcaseCommitment(setup) );
			
		}
		
		[WebMethod(MessageName="LogCaseCommitment")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogCaseCommitment(System.String caseIDNum, System.String title, System.Int32 priorWarning, System.String contactFirstName, System.String contactLastName, System.String contactPhone)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LogCaseCommitment(caseIDNum, title, TimeSpan.FromSeconds(priorWarning), contactFirstName, contactLastName, contactPhone) );	
			
		}
		
		[WebMethod(MessageName="LogCaseCommitment2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogCaseCommitment(Protocols.Support.LogCaseCommitmentSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.LogCaseCommitmentSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.LogCaseCommitmentSetup(setupParam.CaseIDNum, setupParam.Title, TimeSpan.FromSeconds(setupParam.PriorWarning), setupParam.ContactFirstName, setupParam.ContactLastName, setupParam.ContactPhone);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Title = setupParam.Title;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ActionType = setupParam.ActionType;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.LogDate = setupParam.LogDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.CommitmentDate = setupParam.CommitmentDate;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.PriorWarning = TimeSpan.FromSeconds(setupParam.PriorWarning);			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.IsMadeToCustomer = setupParam.IsMadeToCustomer;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.ContactPhone = setupParam.ContactPhone;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateCommitmentEmail = setupParam.GenerateCommitmentEmail;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.LogCaseCommitment(setup) );
			
		}
		
		[WebMethod(MessageName="YankSubcase")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol YankSubcase(System.String subcaseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.YankSubcase(subcaseIDNum) );	
			
		}
		
		[WebMethod(MessageName="YankSubcase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol YankSubcase(Protocols.Support.YankSubcaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.YankSubcaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.YankSubcaseSetup(setupParam.SubcaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SubcaseIDNum = setupParam.SubcaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.YankDate = setupParam.YankDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.YankSubcase(setup) );
			
		}
		
		[WebMethod(MessageName="YankCase")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol YankCase(System.String caseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.YankCase(caseIDNum) );	
			
		}
		
		[WebMethod(MessageName="YankCase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol YankCase(Protocols.Support.YankCaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.YankCaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.YankCaseSetup(setupParam.CaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.YankDate = setupParam.YankDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.YankCase(setup) );
			
		}
		
		[WebMethod(MessageName="InitialResponse")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol InitialResponse(System.String caseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.InitialResponse(caseIDNum) );	
			
		}
		
		[WebMethod(MessageName="InitialResponse2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol InitialResponse(Protocols.Support.InitialResponseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.InitialResponseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.InitialResponseSetup(setupParam.CaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ResponseDate = setupParam.ResponseDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.IsVIAPhone = setupParam.IsVIAPhone;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.InitialResponse(setup) );
			
		}
		
		[WebMethod(MessageName="ForwardSubcase")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ForwardSubcase(System.String subcaseIDNum, System.String newQueue)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ForwardSubcase(subcaseIDNum, newQueue) );	
			
		}
		
		[WebMethod(MessageName="ForwardSubcase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ForwardSubcase(Protocols.Support.ForwardSubcaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.ForwardSubcaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.ForwardSubcaseSetup(setupParam.SubcaseIDNum, setupParam.NewQueue);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SubcaseIDNum = setupParam.SubcaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewQueue = setupParam.NewQueue;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ForwardDate = setupParam.ForwardDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ForwardSubcase(setup) );
			
		}
		
		[WebMethod(MessageName="ForwardCase")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ForwardCase(System.String caseIDNum, System.String newQueue)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ForwardCase(caseIDNum, newQueue) );	
			
		}
		
		[WebMethod(MessageName="ForwardCase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ForwardCase(Protocols.Support.ForwardCaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.ForwardCaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.ForwardCaseSetup(setupParam.CaseIDNum, setupParam.NewQueue);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewQueue = setupParam.NewQueue;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ForwardDate = setupParam.ForwardDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ForwardCase(setup) );
			
		}
		
		[WebMethod(MessageName="DispatchSubcase")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DispatchSubcase(System.String subcaseIDNum, System.String queue)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DispatchSubcase(subcaseIDNum, queue) );	
			
		}
		
		[WebMethod(MessageName="DispatchSubcase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DispatchSubcase(Protocols.Support.DispatchSubcaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.DispatchSubcaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.DispatchSubcaseSetup(setupParam.SubcaseIDNum, setupParam.Queue);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SubcaseIDNum = setupParam.SubcaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Queue = setupParam.Queue;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.DispatchDate = setupParam.DispatchDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DispatchSubcase(setup) );
			
		}
		
		[WebMethod(MessageName="DispatchCase")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DispatchCase(System.String caseIDNum, System.String queue)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DispatchCase(caseIDNum, queue) );	
			
		}
		
		[WebMethod(MessageName="DispatchCase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DispatchCase(Protocols.Support.DispatchCaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.DispatchCaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.DispatchCaseSetup(setupParam.CaseIDNum, setupParam.Queue);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Queue = setupParam.Queue;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.DispatchDate = setupParam.DispatchDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DispatchCase(setup) );
			
		}
		
		[WebMethod(MessageName="CreateSubcase")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateSubcase(System.String caseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateSubcase(caseIDNum) );	
			
		}
		
		[WebMethod(MessageName="CreateSubcase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateSubcase(Protocols.Support.CreateSubcaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.CreateSubcaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.CreateSubcaseSetup(setupParam.CaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Title = setupParam.Title;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.IsGeneral = setupParam.IsGeneral;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Priority = setupParam.Priority;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.Severity = setupParam.Severity;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.Queue = setupParam.Queue;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.DueDate = setupParam.DueDate;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.PriorWarning = TimeSpan.FromSeconds(setupParam.PriorWarning);			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateSubcase(setup) );
			
		}
		
		[WebMethod(MessageName="CreateCase")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateCase(System.String siteIDNum, System.String contactFirstName, System.String contactLastName, System.String contactPhone)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateCase(siteIDNum, contactFirstName, contactLastName, contactPhone) );	
			
		}
		
		[WebMethod(MessageName="CreateCase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateCase(Protocols.Support.CreateCaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.CreateCaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.CreateCaseSetup(setupParam.SiteIDNum, setupParam.ContactFirstName, setupParam.ContactLastName, setupParam.ContactPhone);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ContactPhone = setupParam.ContactPhone;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.SerialNumber = setupParam.SerialNumber;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.SitePartObjid = setupParam.SitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.ContractIDNum = setupParam.ContractIDNum;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.Title = setupParam.Title;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.CaseType = setupParam.CaseType;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.Priority = setupParam.Priority;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.Severity = setupParam.Severity;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.PhoneLogNotes = setupParam.PhoneLogNotes;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.Queue = setupParam.Queue;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(262144, setupParam.DirtyFieldFlags) )
			{
				setup.PhoneEndDate = setupParam.PhoneEndDate;			
			}
				
			if( Global.IsPropertyDirty(524288, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(1048576, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(2097152, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateCase(setup) );
			
		}
		
		[WebMethod(MessageName="CreateCaseObjid")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateCaseObjid()
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateCaseObjid() );	
			
		}
		
		[WebMethod(MessageName="CreateCaseObjid2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateCaseObjid(Protocols.Support.CreateCaseObjidSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.CreateCaseObjidSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.CreateCaseObjidSetup();
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ContactPhone = setupParam.ContactPhone;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.SitePartObjid = setupParam.SitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.Title = setupParam.Title;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.CaseType = setupParam.CaseType;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Priority = setupParam.Priority;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.Serverity = setupParam.Serverity;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.PhoneLogNotes = setupParam.PhoneLogNotes;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.Queue = setupParam.Queue;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.PhoneEndDate = setupParam.PhoneEndDate;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.ContactObjid = setupParam.ContactObjid;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.SiteObjid = setupParam.SiteObjid;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevisionObjid = setupParam.PartRevisionObjid;			
			}
				
			if( Global.IsPropertyDirty(262144, setupParam.DirtyFieldFlags) )
			{
				setup.ContractObjid = setupParam.ContractObjid;			
			}
				
			if( Global.IsPropertyDirty(524288, setupParam.DirtyFieldFlags) )
			{
				setup.AddressObjid = setupParam.AddressObjid;			
			}
				
			if( Global.IsPropertyDirty(1048576, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateCaseObjid(setup) );
			
		}
		
		[WebMethod(MessageName="CloseSubcase")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CloseSubcase(System.String subcaseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CloseSubcase(subcaseIDNum) );	
			
		}
		
		[WebMethod(MessageName="CloseSubcase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CloseSubcase(Protocols.Support.CloseSubcaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.CloseSubcaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.CloseSubcaseSetup(setupParam.SubcaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SubcaseIDNum = setupParam.SubcaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Resolution = setupParam.Resolution;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Summary = setupParam.Summary;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.CloseDate = setupParam.CloseDate;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CloseSubcase(setup) );
			
		}
		
		[WebMethod(MessageName="CloseCase")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CloseCase(System.String caseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CloseCase(caseIDNum) );	
			
		}
		
		[WebMethod(MessageName="CloseCase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CloseCase(Protocols.Support.CloseCaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.CloseCaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.CloseCaseSetup(setupParam.CaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Resolution = setupParam.Resolution;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Summary = setupParam.Summary;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.CloseDate = setupParam.CloseDate;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.UnitsUsed = setupParam.UnitsUsed;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setupParam.CaseTimeAndExpenses.FillCaseTimeAndExpenses(setup.CaseTimeAndExpenses);			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CloseCase(setup) );
			
		}
		
		[WebMethod(MessageName="ChangeSubcaseStatus")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ChangeSubcaseStatus(System.String subcaseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ChangeSubcaseStatus(subcaseIDNum) );	
			
		}
		
		[WebMethod(MessageName="ChangeSubcaseStatus2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ChangeSubcaseStatus(Protocols.Support.ChangeSubcaseStatusSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.ChangeSubcaseStatusSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.ChangeSubcaseStatusSetup(setupParam.SubcaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SubcaseIDNum = setupParam.SubcaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewStatus = setupParam.NewStatus;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ChangeDate = setupParam.ChangeDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ChangeSubcaseStatus(setup) );
			
		}
		
		[WebMethod(MessageName="ChangeCaseStatus")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ChangeCaseStatus(System.String caseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ChangeCaseStatus(caseIDNum) );	
			
		}
		
		[WebMethod(MessageName="ChangeCaseStatus2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ChangeCaseStatus(Protocols.Support.ChangeCaseStatusSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.ChangeCaseStatusSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.ChangeCaseStatusSetup(setupParam.CaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewStatus = setupParam.NewStatus;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ChangeDate = setupParam.ChangeDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ChangeCaseStatus(setup) );
			
		}
		
		[WebMethod(MessageName="ChangeCaseSite")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ChangeCaseSite(System.String caseIDNum, System.String siteIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ChangeCaseSite(caseIDNum, siteIDNum) );	
			
		}
		
		[WebMethod(MessageName="ChangeCaseSite2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ChangeCaseSite(Protocols.Support.ChangeCaseSiteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.ChangeCaseSiteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.ChangeCaseSiteSetup(setupParam.CaseIDNum, setupParam.SiteIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ContactPhone = setupParam.ContactPhone;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ChangeDate = setupParam.ChangeDate;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ChangeCaseSite(setup) );
			
		}
		
		[WebMethod(MessageName="ChangeCaseContact")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ChangeCaseContact(System.String caseIDNum, System.String contactFirstName, System.String contactLastName, System.String contactPhone)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ChangeCaseContact(caseIDNum, contactFirstName, contactLastName, contactPhone) );	
			
		}
		
		[WebMethod(MessageName="ChangeCaseContact2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ChangeCaseContact(Protocols.Support.ChangeCaseContactSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Support.SupportToolkit toolkit = new FChoice.Toolkits.Clarify.Support.SupportToolkit( session );
			FChoice.Toolkits.Clarify.Support.ChangeCaseContactSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Support.ChangeCaseContactSetup(setupParam.CaseIDNum, setupParam.ContactFirstName, setupParam.ContactLastName, setupParam.ContactPhone);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ContactPhone = setupParam.ContactPhone;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ChangeDate = setupParam.ChangeDate;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ChangeCaseContact(setup) );
			
		}
		
	}
}
