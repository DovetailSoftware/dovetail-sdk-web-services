//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Web;
using System.Web.Services;
using System.Web.Services.Protocols;

using FChoice.Foundation.Clarify;
using FChoice.Foundation.Clarify.Compatibility;
using FChoice.Foundation.Clarify.Compatibility.Toolkits;
using FChoice.Toolkits.Clarify;
using FChoice.WebServices.Clarify;

namespace FChoice.WebServices.Clarify
{
	[SoapRpcService(RoutingStyle=SoapServiceRoutingStyle.SoapAction)]
	[WebService(Description="fcSDK ContractsToolkit Web Service", Namespace="http://www.fchoice.com/schemas/FChoice.WebServices.Clarify.ContractsToolkitSrv_v1")]
	public class ContractsToolkitSrv : System.Web.Services.WebService
	{
	
		public AuthenticationHeader AuthHeader;
		
		[WebMethod(MessageName="UnrelateContractItemFromSitePart")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UnrelateContractItemFromSitePart(System.Int32 contractObjid, System.String partNumber, System.String partDomain, System.String partRevision)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.UnrelateContractItemFromSitePart(contractObjid, partNumber, partDomain, partRevision) );	
			
		}
		
		[WebMethod(MessageName="UnrelateContractItemFromSitePart2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UnrelateContractItemFromSitePart(Protocols.Contracts.UnrelateContractItemFromSitePartSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			FChoice.Toolkits.Clarify.Contracts.UnrelateContractItemFromSitePartSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Contracts.UnrelateContractItemFromSitePartSetup(setupParam.ContractObjid, setupParam.PartNumber, setupParam.PartDomain, setupParam.PartRevision);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ContractObjid = setupParam.ContractObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UnrelateContractItemFromSitePart(setup) );
			
		}
		
		[WebMethod(MessageName="RelateContractItemToSitePart")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RelateContractItemToSitePart(System.Int32 contractObjid, System.String partNumber, System.String partDomain, System.String partRevision, System.String serialNumber)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.RelateContractItemToSitePart(contractObjid, partNumber, partDomain, partRevision, serialNumber) );	
			
		}
		
		[WebMethod(MessageName="RelateContractItemToSitePart2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RelateContractItemToSitePart(Protocols.Contracts.RelateContractItemToSitePartSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			FChoice.Toolkits.Clarify.Contracts.RelateContractItemToSitePartSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Contracts.RelateContractItemToSitePartSetup(setupParam.ContractObjid, setupParam.PartNumber, setupParam.PartDomain, setupParam.PartRevision, setupParam.SerialNumber);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ContractObjid = setupParam.ContractObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.SerialNumber = setupParam.SerialNumber;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.RelateContractItemToSitePart(setup) );
			
		}
		
		[WebMethod(MessageName="CreatePriceInstance")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreatePriceInstance(System.String partNumber, System.String partRevision, System.String partDomain, System.String supportProgram, System.String priceProgram, FChoice.Toolkits.Clarify.PriceInstanceType priceType, System.Int32 quantity)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreatePriceInstance(partNumber, partRevision, partDomain, supportProgram, priceProgram, priceType, quantity) );	
			
		}
		
		[WebMethod(MessageName="CreatePriceInstance2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreatePriceInstance(Protocols.Contracts.CreatePriceInstanceSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			FChoice.Toolkits.Clarify.Contracts.CreatePriceInstanceSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Contracts.CreatePriceInstanceSetup(setupParam.PartNumber, setupParam.PartRevision, setupParam.PartDomain, setupParam.SupportProgram, setupParam.PriceProgram, setupParam.PriceType, setupParam.Quantity);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.SupportProgram = setupParam.SupportProgram;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.PriceProgram = setupParam.PriceProgram;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.PriceType = setupParam.PriceType;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Quantity = setupParam.Quantity;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.Price = setupParam.Price;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.EffectiveDate = setupParam.EffectiveDate;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.ExpireDate = setupParam.ExpireDate;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreatePriceInstance(setup) );
			
		}
		
		[WebMethod(MessageName="AddPOToSchedule")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddPOToSchedule(System.String contractIDNum, System.String scheduleIDNum, System.String poIDNum, System.Decimal poAmount)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AddPOToSchedule(contractIDNum, scheduleIDNum, poIDNum, poAmount) );	
			
		}
		
		[WebMethod(MessageName="AddPOToSchedule2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddPOToSchedule(Protocols.Contracts.AddPOToScheduleSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			FChoice.Toolkits.Clarify.Contracts.AddPOToScheduleSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Contracts.AddPOToScheduleSetup(setupParam.ContractIDNum, setupParam.ScheduleIDNum, setupParam.POIDNum, setupParam.POAmount);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ContractIDNum = setupParam.ContractIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ScheduleIDNum = setupParam.ScheduleIDNum;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.POIDNum = setupParam.POIDNum;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.PaymentOption = setupParam.PaymentOption;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.PaymentTerms = setupParam.PaymentTerms;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.POAmount = setupParam.POAmount;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.PODate = setupParam.PODate;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.ExpireDate = setupParam.ExpireDate;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.POStatus = setupParam.POStatus;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AddPOToSchedule(setup) );
			
		}
		
		[WebMethod(MessageName="CreateContractLineItem")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateContractLineItem(System.String contractIDNum, System.String partNumber, System.String partDomain, System.String partRevision, System.Int32 quantity, System.String priceSchedule, System.Int32 parentLineItemObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateContractLineItem(contractIDNum, partNumber, partDomain, partRevision, quantity, priceSchedule, parentLineItemObjid) );	
			
		}
		
		[WebMethod(MessageName="CreateContractLineItem2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateContractLineItem(System.String contractIDNum, System.String partNumber, System.String partDomain, System.String partRevision, System.String priceSchedule, System.String serialNumber, System.Int32 parentLineItemObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateContractLineItem(contractIDNum, partNumber, partDomain, partRevision, priceSchedule, serialNumber, parentLineItemObjid) );	
			
		}
		
		[WebMethod(MessageName="CreateContractLineItem3")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateContractLineItem(Protocols.Contracts.CreateContractLineItemSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			FChoice.Toolkits.Clarify.Contracts.CreateContractLineItemSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Contracts.CreateContractLineItemSetup(setupParam.ContractIDNum, setupParam.PartNumber, setupParam.PartDomain, setupParam.PartRevision, setupParam.Quantity, setupParam.PriceSchedule, setupParam.ParentLineItemObjid);
					break;
				case 1:
					setup = new FChoice.Toolkits.Clarify.Contracts.CreateContractLineItemSetup(setupParam.ContractIDNum, setupParam.PartNumber, setupParam.PartDomain, setupParam.PartRevision, setupParam.PriceSchedule, setupParam.SerialNumber, setupParam.ParentLineItemObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ContractIDNum = setupParam.ContractIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.StartDate = setupParam.StartDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.EndDate = setupParam.EndDate;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.Quantity = setupParam.Quantity;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.PriceSchedule = setupParam.PriceSchedule;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.OverridePrice = setupParam.OverridePrice;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.UnitsUsed = setupParam.UnitsUsed;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.SerialNumber = setupParam.SerialNumber;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.IsTaxable = setupParam.IsTaxable;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.AutoInstall = setupParam.AutoInstall;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.Comments = setupParam.Comments;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.QuotedSiteIDNum = setupParam.QuotedSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				setup.ServicedAtSiteIDNum = setupParam.ServicedAtSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(262144, setupParam.DirtyFieldFlags) )
			{
				setup.ParentLineItemObjid = setupParam.ParentLineItemObjid;			
			}
				
			if( Global.IsPropertyDirty(524288, setupParam.DirtyFieldFlags) )
			{
				setup.POIDNum = setupParam.POIDNum;			
			}
				
			if( Global.IsPropertyDirty(1048576, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateContractLineItem(setup) );
			
		}
		
		[WebMethod(MessageName="ReopenContract")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReopenContract(System.String contractIDNum, System.String status)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ReopenContract(contractIDNum, status) );	
			
		}
		
		[WebMethod(MessageName="ReopenContract2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReopenContract(Protocols.Contracts.ReopenContractSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			FChoice.Toolkits.Clarify.Contracts.ReopenContractSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Contracts.ReopenContractSetup(setupParam.ContractIDNum, setupParam.Status);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ContractIDNum = setupParam.ContractIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ReopenDate = setupParam.ReopenDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ReopenContract(setup) );
			
		}
		
		[WebMethod(MessageName="DeleteSitePart")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteSitePart(System.Int32 sitePartObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteSitePart(sitePartObjid) );	
			
		}
		
		[WebMethod(MessageName="DeleteSitePart2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteSitePart(Protocols.Contracts.DeleteSitePartSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			FChoice.Toolkits.Clarify.Contracts.DeleteSitePartSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Contracts.DeleteSitePartSetup(setupParam.SitePartObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SitePartObjid = setupParam.SitePartObjid;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteSitePart(setup) );
			
		}
		
		[WebMethod(MessageName="LogContractNote")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogContractNote(System.String contractIDNum, System.String notes)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LogContractNote(contractIDNum, notes) );	
			
		}
		
		[WebMethod(MessageName="LogContractNote2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogContractNote(Protocols.Contracts.LogContractNoteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			FChoice.Toolkits.Clarify.Contracts.LogContractNoteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Contracts.LogContractNoteSetup(setupParam.ContractIDNum, setupParam.Notes);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ContractIDNum = setupParam.ContractIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ActionType = setupParam.ActionType;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.InternalUseOnlyNotes = setupParam.InternalUseOnlyNotes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.LogDate = setupParam.LogDate;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.LogContractNote(setup) );
			
		}
		
		[WebMethod(MessageName="RejectContract")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RejectContract(System.String contractIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.RejectContract(contractIDNum) );	
			
		}
		
		[WebMethod(MessageName="RejectContract2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RejectContract(Protocols.Contracts.RejectContractSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			FChoice.Toolkits.Clarify.Contracts.RejectContractSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Contracts.RejectContractSetup(setupParam.ContractIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ContractIDNum = setupParam.ContractIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.RejectDate = setupParam.RejectDate;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.RejectContract(setup) );
			
		}
		
//		[WebMethod(MessageName="UpdateSchedule")]
//		[SoapHeader("AuthHeader")]
//		private Protocols.ToolkitResultProtocol UpdateSchedule(System.String contractIDNum, System.String scheduleIDNum)
//		{
//			ClarifySession session = Global.GetSession( AuthHeader );
//			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
//			
//			return new Protocols.ToolkitResultProtocol( toolkit.UpdateSchedule(contractIDNum, scheduleIDNum) );	
//			
//		}
		
		[WebMethod(MessageName="UpdateSchedule2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateSchedule(Protocols.Contracts.UpdateScheduleSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			FChoice.Toolkits.Clarify.Contracts.UpdateScheduleSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Contracts.UpdateScheduleSetup(setupParam.ContractIDNum, setupParam.ScheduleIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ContractIDNum = setupParam.ContractIDNum;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ScheduleIDNum = setupParam.ScheduleIDNum;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.BillSiteIDNum = setupParam.BillSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.BillingATTN = setupParam.BillingATTN;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ShipToSiteIDNum = setupParam.ShipToSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.PriceProgram = setupParam.PriceProgram;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.BillingFrequency = setupParam.BillingFrequency;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.BillingOption = setupParam.BillingOption;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.BillingPeriodStartDate = setupParam.BillingPeriodStartDate;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.FirstBillingDate = setupParam.FirstBillingDate;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.ChargeStartDate = setupParam.ChargeStartDate;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.ChargeEndDate = setupParam.ChargeEndDate;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateSchedule(setup) );
			
		}
		
		[WebMethod(MessageName="CreateSchedule")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateSchedule(System.String contractIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateSchedule(contractIDNum) );	
			
		}
		
		[WebMethod(MessageName="CreateSchedule2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateSchedule(Protocols.Contracts.CreateScheduleSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			FChoice.Toolkits.Clarify.Contracts.CreateScheduleSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Contracts.CreateScheduleSetup(setupParam.ContractIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ContractIDNum = setupParam.ContractIDNum;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ScheduleIDNum = setupParam.ScheduleIDNum;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.BillSiteIDNum = setupParam.BillSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.BillingATTN = setupParam.BillingATTN;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ShipToSiteIDNum = setupParam.ShipToSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.PriceProgram = setupParam.PriceProgram;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.BillingFrequency = setupParam.BillingFrequency;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.BillingOption = setupParam.BillingOption;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.BillingPeriodStartDate = setupParam.BillingPeriodStartDate;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.FirstBillingDate = setupParam.FirstBillingDate;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.ChargeStartDate = setupParam.ChargeStartDate;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.ChargeEndDate = setupParam.ChargeEndDate;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateSchedule(setup) );
			
		}
		
		[WebMethod(MessageName="YankQuote")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol YankQuote(System.String quoteIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.YankQuote(quoteIDNum) );	
			
		}
		
		[WebMethod(MessageName="YankQuote2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol YankQuote(Protocols.Contracts.YankQuoteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			FChoice.Toolkits.Clarify.Contracts.YankQuoteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Contracts.YankQuoteSetup(setupParam.QuoteIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.QuoteIDNum = setupParam.QuoteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.YankDate = setupParam.YankDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.YankQuote(setup) );
			
		}
		
		[WebMethod(MessageName="RejectQuote")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RejectQuote(System.String quoteIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.RejectQuote(quoteIDNum) );	
			
		}
		
		[WebMethod(MessageName="RejectQuote2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RejectQuote(Protocols.Contracts.RejectQuoteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			FChoice.Toolkits.Clarify.Contracts.RejectQuoteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Contracts.RejectQuoteSetup(setupParam.QuoteIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.QuoteIDNum = setupParam.QuoteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.RejectDate = setupParam.RejectDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.RejectQuote(setup) );
			
		}
		
		[WebMethod(MessageName="MoveQuote")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveQuote(System.String quoteIDNum, System.String newWipBin)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.MoveQuote(quoteIDNum, newWipBin) );	
			
		}
		
		[WebMethod(MessageName="MoveQuote2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveQuote(Protocols.Contracts.MoveQuoteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			FChoice.Toolkits.Clarify.Contracts.MoveQuoteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Contracts.MoveQuoteSetup(setupParam.QuoteIDNum, setupParam.NewWipBin);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.QuoteIDNum = setupParam.QuoteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewWipBin = setupParam.NewWipBin;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.MoveQuote(setup) );
			
		}
		
		[WebMethod(MessageName="ForwardQuote")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ForwardQuote(System.String quoteIDNum, System.String newQueue)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ForwardQuote(quoteIDNum, newQueue) );	
			
		}
		
		[WebMethod(MessageName="ForwardQuote2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ForwardQuote(Protocols.Contracts.ForwardQuoteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			FChoice.Toolkits.Clarify.Contracts.ForwardQuoteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Contracts.ForwardQuoteSetup(setupParam.QuoteIDNum, setupParam.NewQueue);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.QuoteIDNum = setupParam.QuoteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewQueue = setupParam.NewQueue;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ForwardDate = setupParam.ForwardDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ForwardQuote(setup) );
			
		}
		
		[WebMethod(MessageName="DispatchQuote")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DispatchQuote(System.String quoteIDNum, System.String queue)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DispatchQuote(quoteIDNum, queue) );	
			
		}
		
		[WebMethod(MessageName="DispatchQuote2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DispatchQuote(Protocols.Contracts.DispatchQuoteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			FChoice.Toolkits.Clarify.Contracts.DispatchQuoteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Contracts.DispatchQuoteSetup(setupParam.QuoteIDNum, setupParam.Queue);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.QuoteIDNum = setupParam.QuoteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Queue = setupParam.Queue;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.DispatchDate = setupParam.DispatchDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DispatchQuote(setup) );
			
		}
		
		[WebMethod(MessageName="ChangeQuoteStatus")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ChangeQuoteStatus(System.String quoteIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ChangeQuoteStatus(quoteIDNum) );	
			
		}
		
		[WebMethod(MessageName="ChangeQuoteStatus2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ChangeQuoteStatus(Protocols.Contracts.ChangeQuoteStatusSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			FChoice.Toolkits.Clarify.Contracts.ChangeQuoteStatusSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Contracts.ChangeQuoteStatusSetup(setupParam.QuoteIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.QuoteIDNum = setupParam.QuoteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewStatus = setupParam.NewStatus;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ChangeDate = setupParam.ChangeDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ChangeQuoteStatus(setup) );
			
		}
		
		[WebMethod(MessageName="AssignQuote")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AssignQuote(System.String quoteIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AssignQuote(quoteIDNum) );	
			
		}
		
		[WebMethod(MessageName="AssignQuote2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AssignQuote(Protocols.Contracts.AssignQuoteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			FChoice.Toolkits.Clarify.Contracts.AssignQuoteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Contracts.AssignQuoteSetup(setupParam.QuoteIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.QuoteIDNum = setupParam.QuoteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewUser = setupParam.NewUser;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.AssignDate = setupParam.AssignDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AssignQuote(setup) );
			
		}
		
		[WebMethod(MessageName="AcceptQuote")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AcceptQuote(System.String quoteIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AcceptQuote(quoteIDNum) );	
			
		}
		
		[WebMethod(MessageName="AcceptQuote2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AcceptQuote(Protocols.Contracts.AcceptQuoteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			FChoice.Toolkits.Clarify.Contracts.AcceptQuoteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Contracts.AcceptQuoteSetup(setupParam.QuoteIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.QuoteIDNum = setupParam.QuoteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.AcceptDate = setupParam.AcceptDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AcceptQuote(setup) );
			
		}
		
		[WebMethod(MessageName="CreateContract")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateContract(System.String title)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateContract(title) );	
			
		}
		
		[WebMethod(MessageName="CreateContract2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateContract(Protocols.Contracts.CreateContractSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Contracts.ContractsToolkit toolkit = new FChoice.Toolkits.Clarify.Contracts.ContractsToolkit( session );
			FChoice.Toolkits.Clarify.Contracts.CreateContractSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Contracts.CreateContractSetup(setupParam.Title);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ContractIDNum = setupParam.ContractIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Title = setupParam.Title;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.AccountIDNum = setupParam.AccountIDNum;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.AccountName = setupParam.AccountName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.ContactPhone = setupParam.ContactPhone;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.ContractType = setupParam.ContractType;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.Terms = setupParam.Terms;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.PriceProgram = setupParam.PriceProgram;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.AdminUserName = setupParam.AdminUserName;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.BillToSiteIDNum = setupParam.BillToSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.ShipToSiteIDNum = setupParam.ShipToSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.StartDate = setupParam.StartDate;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.ExpireDate = setupParam.ExpireDate;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				setup.DefaultStartDate = setupParam.DefaultStartDate;			
			}
				
			if( Global.IsPropertyDirty(262144, setupParam.DirtyFieldFlags) )
			{
				setup.DefaultExpirationDate = setupParam.DefaultExpirationDate;			
			}
				
			if( Global.IsPropertyDirty(524288, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(1048576, setupParam.DirtyFieldFlags) )
			{
				setup.Queue = setupParam.Queue;			
			}
				
			if( Global.IsPropertyDirty(2097152, setupParam.DirtyFieldFlags) )
			{
				setup.IsWarranty = setupParam.IsWarranty;			
			}
				
			if( Global.IsPropertyDirty(4194304, setupParam.DirtyFieldFlags) )
			{
				setup.IsEvergreen = setupParam.IsEvergreen;			
			}
				
			if( Global.IsPropertyDirty(8388608, setupParam.DirtyFieldFlags) )
			{
				setup.RenewPriorDays = setupParam.RenewPriorDays;			
			}
				
			if( Global.IsPropertyDirty(16777216, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(33554432, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateContract(setup) );
			
		}
		
	}
}
