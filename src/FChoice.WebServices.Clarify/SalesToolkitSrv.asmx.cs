//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Web;
using System.Web.Services;
using System.Web.Services.Protocols;

using FChoice.Foundation.Clarify;
using FChoice.Foundation.Clarify.Compatibility;
using FChoice.Foundation.Clarify.Compatibility.Toolkits;
using FChoice.Toolkits.Clarify;
using FChoice.WebServices.Clarify;

namespace FChoice.WebServices.Clarify
{
	[SoapRpcService(RoutingStyle=SoapServiceRoutingStyle.SoapAction)]
	[WebService(Description="fcSDK SalesToolkit Web Service", Namespace="http://www.fchoice.com/schemas/FChoice.WebServices.Clarify.SalesToolkitSrv_v1")]
	public class SalesToolkitSrv : System.Web.Services.WebService
	{
	
		public AuthenticationHeader AuthHeader;
		
		[WebMethod(MessageName="ReopenOpportunity")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReopenOpportunity(System.String opportunityIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ReopenOpportunity(opportunityIDNum) );	
			
		}
		
		[WebMethod(MessageName="ReopenOpportunity2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReopenOpportunity(Protocols.Sales.ReopenOpportunitySetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.ReopenOpportunitySetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.ReopenOpportunitySetup(setupParam.OpportunityIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.OpportunityIDNum = setupParam.OpportunityIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ReopenDate = setupParam.ReopenDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ReopenOpportunity(setup) );
			
		}
		
		[WebMethod(MessageName="CloseOpportunity")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CloseOpportunity(System.String opportunityIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CloseOpportunity(opportunityIDNum) );	
			
		}
		
		[WebMethod(MessageName="CloseOpportunity2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CloseOpportunity(Protocols.Sales.CloseOpportunitySetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.CloseOpportunitySetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.CloseOpportunitySetup(setupParam.OpportunityIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.OpportunityIDNum = setupParam.OpportunityIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.CloseDate = setupParam.CloseDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CloseOpportunity(setup) );
			
		}
		
		[WebMethod(MessageName="LogLeadPhone")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogLeadPhone(System.Int32 leadObjid, System.String contactFirstName, System.String contactLastName, System.String contactPhone, System.Int32 duration)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LogLeadPhone(leadObjid, contactFirstName, contactLastName, contactPhone, TimeSpan.FromSeconds(duration)) );	
			
		}
		
		[WebMethod(MessageName="LogLeadPhone2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogLeadPhone(Protocols.Sales.LogLeadPhoneSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.LogLeadPhoneSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.LogLeadPhoneSetup(setupParam.LeadObjid, setupParam.ContactFirstName, setupParam.ContactLastName, setupParam.ContactPhone, TimeSpan.FromSeconds(setupParam.Duration));
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.LeadObjid = setupParam.LeadObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.InternalUseOnlyNotes = setupParam.InternalUseOnlyNotes;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ContactPhone = setupParam.ContactPhone;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.ActionType = setupParam.ActionType;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.LogDate = setupParam.LogDate;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.Duration = TimeSpan.FromSeconds(setupParam.Duration);			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.LogLeadPhone(setup) );
			
		}
		
		[WebMethod(MessageName="LogLeadNote")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogLeadNote(System.Int32 leadObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LogLeadNote(leadObjid) );	
			
		}
		
		[WebMethod(MessageName="LogLeadNote2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LogLeadNote(Protocols.Sales.LogLeadNoteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.LogLeadNoteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.LogLeadNoteSetup(setupParam.LeadObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.LeadObjid = setupParam.LeadObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.InternalUseOnlyNotes = setupParam.InternalUseOnlyNotes;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.LogDate = setupParam.LogDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.LogLeadNote(setup) );
			
		}
		
		[WebMethod(MessageName="AssignLead")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AssignLead(System.Int32 leadObjid, System.String newOwner)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AssignLead(leadObjid, newOwner) );	
			
		}
		
		[WebMethod(MessageName="AssignLead2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AssignLead(Protocols.Sales.AssignLeadSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.AssignLeadSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.AssignLeadSetup(setupParam.LeadObjid, setupParam.NewOwner);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.LeadObjid = setupParam.LeadObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewOwner = setupParam.NewOwner;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.AssignDate = setupParam.AssignDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AssignLead(setup) );
			
		}
		
		[WebMethod(MessageName="CreateLead")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateLead(System.String state, System.String country, System.String timeZone, FChoice.Toolkits.Clarify.LeadSiteType siteType, System.String leadSource)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateLead(state, country, timeZone, siteType, leadSource) );	
			
		}
		
		[WebMethod(MessageName="CreateLead2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateLead(Protocols.Sales.CreateLeadSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.CreateLeadSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.CreateLeadSetup(setupParam.State, setupParam.Country, setupParam.TimeZone, setupParam.SiteType, setupParam.LeadSource);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.LeadObjid = setupParam.LeadObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ContactPhone = setupParam.ContactPhone;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.Fax = setupParam.Fax;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.Address = setupParam.Address;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Address2 = setupParam.Address2;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.City = setupParam.City;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.State = setupParam.State;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.PostalCode = setupParam.PostalCode;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.Country = setupParam.Country;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.TimeZone = setupParam.TimeZone;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.Email = setupParam.Email;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.Title = setupParam.Title;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.CompanyName = setupParam.CompanyName;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.SiteName = setupParam.SiteName;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.SiteType = setupParam.SiteType;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				setup.Rating = setupParam.Rating;			
			}
				
			if( Global.IsPropertyDirty(262144, setupParam.DirtyFieldFlags) )
			{
				setup.ContactRole = setupParam.ContactRole;			
			}
				
			if( Global.IsPropertyDirty(524288, setupParam.DirtyFieldFlags) )
			{
				setup.LeadSource = setupParam.LeadSource;			
			}
				
			if( Global.IsPropertyDirty(1048576, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(2097152, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(4194304, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(8388608, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateLead(setup) );
			
		}
		
//		[WebMethod(MessageName="UpdateLead")]
//		[SoapHeader("AuthHeader")]
//		public Protocols.ToolkitResultProtocol UpdateLead(System.Int32 leadObjid)
//		{
//			ClarifySession session = Global.GetSession( AuthHeader );
//			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
//			
//			return new Protocols.ToolkitResultProtocol( toolkit.UpdateLead(leadObjid) );	
//			
//		}
		
		[WebMethod(MessageName="UpdateLead2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateLead(Protocols.Sales.UpdateLeadSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.UpdateLeadSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.UpdateLeadSetup(setupParam.LeadObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.LeadObjid = setupParam.LeadObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ContactPhone = setupParam.ContactPhone;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.Fax = setupParam.Fax;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.Address = setupParam.Address;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Address2 = setupParam.Address2;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.City = setupParam.City;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.State = setupParam.State;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.PostalCode = setupParam.PostalCode;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.Country = setupParam.Country;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.TimeZone = setupParam.TimeZone;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.Email = setupParam.Email;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.Title = setupParam.Title;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.CompanyName = setupParam.CompanyName;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.SiteName = setupParam.SiteName;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.SiteType = setupParam.SiteType;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				setup.Rating = setupParam.Rating;			
			}
				
			if( Global.IsPropertyDirty(262144, setupParam.DirtyFieldFlags) )
			{
				setup.ContactRole = setupParam.ContactRole;			
			}
				
			if( Global.IsPropertyDirty(524288, setupParam.DirtyFieldFlags) )
			{
				setup.LeadSource = setupParam.LeadSource;			
			}
				
			if( Global.IsPropertyDirty(1048576, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(2097152, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(4194304, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(8388608, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateLead(setup) );
			
		}
		
		[WebMethod(MessageName="CreateQuoteLineItem")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateQuoteLineItem(System.String contractIDNum, System.String partNumber, System.String partDomain, System.String partRevision, System.Int32 quantity, System.String priceSchedule, System.Int32 parentLineItemObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateQuoteLineItem(contractIDNum, partNumber, partDomain, partRevision, quantity, priceSchedule, parentLineItemObjid) );	
			
		}
		
		[WebMethod(MessageName="CreateQuoteLineItem2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateQuoteLineItem(System.String contractIDNum, System.String partNumber, System.String partDomain, System.String partRevision, System.String priceSchedule, System.String serialNumber, System.Int32 parentLineItemObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateQuoteLineItem(contractIDNum, partNumber, partDomain, partRevision, priceSchedule, serialNumber, parentLineItemObjid) );	
			
		}
		
		[WebMethod(MessageName="CreateQuoteLineItem3")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateQuoteLineItem(Protocols.Sales.CreateQuoteLineItemSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.CreateQuoteLineItemSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.CreateQuoteLineItemSetup(setupParam.ContractIDNum, setupParam.PartNumber, setupParam.PartDomain, setupParam.PartRevision, setupParam.Quantity, setupParam.PriceSchedule, setupParam.ParentLineItemObjid);
					break;
				case 1:
					setup = new FChoice.Toolkits.Clarify.Sales.CreateQuoteLineItemSetup(setupParam.ContractIDNum, setupParam.PartNumber, setupParam.PartDomain, setupParam.PartRevision, setupParam.PriceSchedule, setupParam.SerialNumber, setupParam.ParentLineItemObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ContractIDNum = setupParam.ContractIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.StartDate = setupParam.StartDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.EndDate = setupParam.EndDate;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.Quantity = setupParam.Quantity;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.PriceSchedule = setupParam.PriceSchedule;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.OverridePrice = setupParam.OverridePrice;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.UnitsUsed = setupParam.UnitsUsed;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.SerialNumber = setupParam.SerialNumber;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.IsTaxable = setupParam.IsTaxable;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.AutoInstall = setupParam.AutoInstall;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.Comments = setupParam.Comments;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.QuotedSiteIDNum = setupParam.QuotedSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				setup.ServicedAtSiteIDNum = setupParam.ServicedAtSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(262144, setupParam.DirtyFieldFlags) )
			{
				setup.ParentLineItemObjid = setupParam.ParentLineItemObjid;			
			}
				
			if( Global.IsPropertyDirty(524288, setupParam.DirtyFieldFlags) )
			{
				setup.POIDNum = setupParam.POIDNum;			
			}
				
			if( Global.IsPropertyDirty(1048576, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateQuoteLineItem(setup) );
			
		}
		
		[WebMethod(MessageName="CreateQuote")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateQuote(System.String quoteTitle)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateQuote(quoteTitle) );	
			
		}
		
		[WebMethod(MessageName="CreateQuote2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateQuote(Protocols.Sales.CreateQuoteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.CreateQuoteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.CreateQuoteSetup(setupParam.QuoteTitle);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.QuoteTitle = setupParam.QuoteTitle;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.AccountIDNum = setupParam.AccountIDNum;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.OpportunityIDNum = setupParam.OpportunityIDNum;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.ContactPhone = setupParam.ContactPhone;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.BillToSiteIDNum = setupParam.BillToSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.ShipToSiteIDNum = setupParam.ShipToSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.Currency = setupParam.Currency;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.PriceProgram = setupParam.PriceProgram;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.Queue = setupParam.Queue;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.AdminUserName = setupParam.AdminUserName;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.QuoteLengthInDays = setupParam.QuoteLengthInDays;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(262144, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateQuote(setup) );
			
		}
		
		[WebMethod(MessageName="ChangeQuoteStatus")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ChangeQuoteStatus(System.String quoteIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ChangeQuoteStatus(quoteIDNum) );	
			
		}
		
		[WebMethod(MessageName="ChangeQuoteStatus2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ChangeQuoteStatus(Protocols.Sales.ChangeQuoteStatusSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.ChangeQuoteStatusSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.ChangeQuoteStatusSetup(setupParam.QuoteIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.QuoteIDNum = setupParam.QuoteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewStatus = setupParam.NewStatus;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ChangeDate = setupParam.ChangeDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ChangeQuoteStatus(setup) );
			
		}
		
		[WebMethod(MessageName="ChangeOpportunityStatus")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ChangeOpportunityStatus(System.String opportunityIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ChangeOpportunityStatus(opportunityIDNum) );	
			
		}
		
		[WebMethod(MessageName="ChangeOpportunityStatus2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ChangeOpportunityStatus(Protocols.Sales.ChangeOpportunityStatusSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.ChangeOpportunityStatusSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.ChangeOpportunityStatusSetup(setupParam.OpportunityIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.OpportunityIDNum = setupParam.OpportunityIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewStatus = setupParam.NewStatus;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ChangeDate = setupParam.ChangeDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ChangeOpportunityStatus(setup) );
			
		}
		
		[WebMethod(MessageName="ChangeActionItemStatus")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ChangeActionItemStatus(System.String actionItemIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ChangeActionItemStatus(actionItemIDNum) );	
			
		}
		
		[WebMethod(MessageName="ChangeActionItemStatus2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ChangeActionItemStatus(Protocols.Sales.ChangeActionItemStatusSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.ChangeActionItemStatusSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.ChangeActionItemStatusSetup(setupParam.ActionItemIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ActionItemIDNum = setupParam.ActionItemIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewStatus = setupParam.NewStatus;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ChangeDate = setupParam.ChangeDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ChangeActionItemStatus(setup) );
			
		}
		
		[WebMethod(MessageName="MoveQuote")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveQuote(System.String quoteIDNum, System.String newWipBin)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.MoveQuote(quoteIDNum, newWipBin) );	
			
		}
		
		[WebMethod(MessageName="MoveQuote2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveQuote(Protocols.Sales.MoveQuoteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.MoveQuoteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.MoveQuoteSetup(setupParam.QuoteIDNum, setupParam.NewWipBin);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.QuoteIDNum = setupParam.QuoteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewWipBin = setupParam.NewWipBin;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.MoveQuote(setup) );
			
		}
		
		[WebMethod(MessageName="MoveOpportunity")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveOpportunity(System.String opportunityIDNum, System.String newWipBin)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.MoveOpportunity(opportunityIDNum, newWipBin) );	
			
		}
		
		[WebMethod(MessageName="MoveOpportunity2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveOpportunity(Protocols.Sales.MoveOpportunitySetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.MoveOpportunitySetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.MoveOpportunitySetup(setupParam.OpportunityIDNum, setupParam.NewWipBin);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.OpportunityIDNum = setupParam.OpportunityIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewWipBin = setupParam.NewWipBin;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.MoveOpportunity(setup) );
			
		}
		
		[WebMethod(MessageName="MoveActionItem")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveActionItem(System.String actionItemIDNum, System.String newWipBin)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.MoveActionItem(actionItemIDNum, newWipBin) );	
			
		}
		
		[WebMethod(MessageName="MoveActionItem2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveActionItem(Protocols.Sales.MoveActionItemSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.MoveActionItemSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.MoveActionItemSetup(setupParam.ActionItemIDNum, setupParam.NewWipBin);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ActionItemIDNum = setupParam.ActionItemIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewWipBin = setupParam.NewWipBin;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.MoveActionItem(setup) );
			
		}
		
		[WebMethod(MessageName="AssignQuote")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AssignQuote(System.String quoteIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AssignQuote(quoteIDNum) );	
			
		}
		
		[WebMethod(MessageName="AssignQuote2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AssignQuote(Protocols.Sales.AssignQuoteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.AssignQuoteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.AssignQuoteSetup(setupParam.QuoteIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.QuoteIDNum = setupParam.QuoteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewUser = setupParam.NewUser;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.AssignDate = setupParam.AssignDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AssignQuote(setup) );
			
		}
		
		[WebMethod(MessageName="AssignOpportunity")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AssignOpportunity(System.String opportunityIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AssignOpportunity(opportunityIDNum) );	
			
		}
		
		[WebMethod(MessageName="AssignOpportunity2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AssignOpportunity(Protocols.Sales.AssignOpportunitySetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.AssignOpportunitySetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.AssignOpportunitySetup(setupParam.OpportunityIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.OpportunityIDNum = setupParam.OpportunityIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewUser = setupParam.NewUser;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.AssignDate = setupParam.AssignDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AssignOpportunity(setup) );
			
		}
		
		[WebMethod(MessageName="AssignActionItem")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AssignActionItem(System.String actionItemIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AssignActionItem(actionItemIDNum) );	
			
		}
		
		[WebMethod(MessageName="AssignActionItem2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AssignActionItem(Protocols.Sales.AssignActionItemSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.AssignActionItemSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.AssignActionItemSetup(setupParam.ActionItemIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ActionItemIDNum = setupParam.ActionItemIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewUser = setupParam.NewUser;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.AssignDate = setupParam.AssignDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AssignActionItem(setup) );
			
		}
		
		[WebMethod(MessageName="YankQuote")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol YankQuote(System.String quoteIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.YankQuote(quoteIDNum) );	
			
		}
		
		[WebMethod(MessageName="YankQuote2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol YankQuote(Protocols.Sales.YankQuoteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.YankQuoteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.YankQuoteSetup(setupParam.QuoteIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.QuoteIDNum = setupParam.QuoteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.YankDate = setupParam.YankDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.YankQuote(setup) );
			
		}
		
		[WebMethod(MessageName="YankOpportunity")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol YankOpportunity(System.String opportunityIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.YankOpportunity(opportunityIDNum) );	
			
		}
		
		[WebMethod(MessageName="YankOpportunity2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol YankOpportunity(Protocols.Sales.YankOpportunitySetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.YankOpportunitySetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.YankOpportunitySetup(setupParam.OpportunityIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.OpportunityIDNum = setupParam.OpportunityIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.YankDate = setupParam.YankDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.YankOpportunity(setup) );
			
		}
		
		[WebMethod(MessageName="YankActionItem")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol YankActionItem(System.String actionItemIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.YankActionItem(actionItemIDNum) );	
			
		}
		
		[WebMethod(MessageName="YankActionItem2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol YankActionItem(Protocols.Sales.YankActionItemSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.YankActionItemSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.YankActionItemSetup(setupParam.ActionItemIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ActionItemIDNum = setupParam.ActionItemIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.YankDate = setupParam.YankDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.YankActionItem(setup) );
			
		}
		
		[WebMethod(MessageName="ForwardQuote")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ForwardQuote(System.String quoteIDNum, System.String newQueue)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ForwardQuote(quoteIDNum, newQueue) );	
			
		}
		
		[WebMethod(MessageName="ForwardQuote2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ForwardQuote(Protocols.Sales.ForwardQuoteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.ForwardQuoteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.ForwardQuoteSetup(setupParam.QuoteIDNum, setupParam.NewQueue);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.QuoteIDNum = setupParam.QuoteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewQueue = setupParam.NewQueue;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ForwardDate = setupParam.ForwardDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ForwardQuote(setup) );
			
		}
		
		[WebMethod(MessageName="ForwardOpportunity")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ForwardOpportunity(System.String opportunityIDNum, System.String newQueue)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ForwardOpportunity(opportunityIDNum, newQueue) );	
			
		}
		
		[WebMethod(MessageName="ForwardOpportunity2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ForwardOpportunity(Protocols.Sales.ForwardOpportunitySetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.ForwardOpportunitySetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.ForwardOpportunitySetup(setupParam.OpportunityIDNum, setupParam.NewQueue);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.OpportunityIDNum = setupParam.OpportunityIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewQueue = setupParam.NewQueue;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ForwardDate = setupParam.ForwardDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ForwardOpportunity(setup) );
			
		}
		
		[WebMethod(MessageName="ForwardActionItem")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ForwardActionItem(System.String actionItemIDNum, System.String newQueue)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ForwardActionItem(actionItemIDNum, newQueue) );	
			
		}
		
		[WebMethod(MessageName="ForwardActionItem2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ForwardActionItem(Protocols.Sales.ForwardActionItemSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.ForwardActionItemSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.ForwardActionItemSetup(setupParam.ActionItemIDNum, setupParam.NewQueue);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ActionItemIDNum = setupParam.ActionItemIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewQueue = setupParam.NewQueue;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ForwardDate = setupParam.ForwardDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ForwardActionItem(setup) );
			
		}
		
		[WebMethod(MessageName="AcceptQuote")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AcceptQuote(System.String quoteIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AcceptQuote(quoteIDNum) );	
			
		}
		
		[WebMethod(MessageName="AcceptQuote2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AcceptQuote(Protocols.Sales.AcceptQuoteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.AcceptQuoteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.AcceptQuoteSetup(setupParam.QuoteIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.QuoteIDNum = setupParam.QuoteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.AcceptDate = setupParam.AcceptDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AcceptQuote(setup) );
			
		}
		
		[WebMethod(MessageName="AcceptOpportunity")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AcceptOpportunity(System.String opportunityIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AcceptOpportunity(opportunityIDNum) );	
			
		}
		
		[WebMethod(MessageName="AcceptOpportunity2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AcceptOpportunity(Protocols.Sales.AcceptOpportunitySetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.AcceptOpportunitySetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.AcceptOpportunitySetup(setupParam.OpportunityIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.OpportunityIDNum = setupParam.OpportunityIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.AcceptDate = setupParam.AcceptDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AcceptOpportunity(setup) );
			
		}
		
		[WebMethod(MessageName="AcceptActionItem")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AcceptActionItem(System.String actionItemIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AcceptActionItem(actionItemIDNum) );	
			
		}
		
		[WebMethod(MessageName="AcceptActionItem2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AcceptActionItem(Protocols.Sales.AcceptActionItemSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.AcceptActionItemSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.AcceptActionItemSetup(setupParam.ActionItemIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ActionItemIDNum = setupParam.ActionItemIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.AcceptDate = setupParam.AcceptDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AcceptActionItem(setup) );
			
		}
		
		[WebMethod(MessageName="RejectQuote")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RejectQuote(System.String quoteIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.RejectQuote(quoteIDNum) );	
			
		}
		
		[WebMethod(MessageName="RejectQuote2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RejectQuote(Protocols.Sales.RejectQuoteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.RejectQuoteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.RejectQuoteSetup(setupParam.QuoteIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.QuoteIDNum = setupParam.QuoteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.RejectDate = setupParam.RejectDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.RejectQuote(setup) );
			
		}
		
		[WebMethod(MessageName="RejectOpportunity")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RejectOpportunity(System.String opportunityIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.RejectOpportunity(opportunityIDNum) );	
			
		}
		
		[WebMethod(MessageName="RejectOpportunity2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RejectOpportunity(Protocols.Sales.RejectOpportunitySetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.RejectOpportunitySetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.RejectOpportunitySetup(setupParam.OpportunityIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.OpportunityIDNum = setupParam.OpportunityIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.RejectDate = setupParam.RejectDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.RejectOpportunity(setup) );
			
		}
		
		[WebMethod(MessageName="RejectActionItem")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RejectActionItem(System.String actionItemIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.RejectActionItem(actionItemIDNum) );	
			
		}
		
		[WebMethod(MessageName="RejectActionItem2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RejectActionItem(Protocols.Sales.RejectActionItemSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.RejectActionItemSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.RejectActionItemSetup(setupParam.ActionItemIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ActionItemIDNum = setupParam.ActionItemIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.RejectDate = setupParam.RejectDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.RejectActionItem(setup) );
			
		}
		
		[WebMethod(MessageName="DispatchQuote")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DispatchQuote(System.String quoteIDNum, System.String queue)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DispatchQuote(quoteIDNum, queue) );	
			
		}
		
		[WebMethod(MessageName="DispatchQuote2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DispatchQuote(Protocols.Sales.DispatchQuoteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.DispatchQuoteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.DispatchQuoteSetup(setupParam.QuoteIDNum, setupParam.Queue);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.QuoteIDNum = setupParam.QuoteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Queue = setupParam.Queue;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.DispatchDate = setupParam.DispatchDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DispatchQuote(setup) );
			
		}
		
		[WebMethod(MessageName="DispatchOpportunity")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DispatchOpportunity(System.String opportunityIDNum, System.String queue)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DispatchOpportunity(opportunityIDNum, queue) );	
			
		}
		
		[WebMethod(MessageName="DispatchOpportunity2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DispatchOpportunity(Protocols.Sales.DispatchOpportunitySetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.DispatchOpportunitySetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.DispatchOpportunitySetup(setupParam.OpportunityIDNum, setupParam.Queue);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.OpportunityIDNum = setupParam.OpportunityIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Queue = setupParam.Queue;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.DispatchDate = setupParam.DispatchDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DispatchOpportunity(setup) );
			
		}
		
		[WebMethod(MessageName="DispatchActionItem")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DispatchActionItem(System.String actionItemIDNum, System.String queue)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DispatchActionItem(actionItemIDNum, queue) );	
			
		}
		
		[WebMethod(MessageName="DispatchActionItem2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DispatchActionItem(Protocols.Sales.DispatchActionItemSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.DispatchActionItemSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.DispatchActionItemSetup(setupParam.ActionItemIDNum, setupParam.Queue);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ActionItemIDNum = setupParam.ActionItemIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Queue = setupParam.Queue;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.DispatchDate = setupParam.DispatchDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DispatchActionItem(setup) );
			
		}
		
		[WebMethod(MessageName="CreateOpportunity")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateOpportunity(System.String opportunityName, System.String salesStage, System.Single probability)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateOpportunity(opportunityName, salesStage, probability) );	
			
		}
		
		[WebMethod(MessageName="CreateOpportunity2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateOpportunity(Protocols.Sales.CreateOpportunitySetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.CreateOpportunitySetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.CreateOpportunitySetup(setupParam.OpportunityName, setupParam.SalesStage, setupParam.Probability);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.OpportunityName = setupParam.OpportunityName;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.AccountIDNum = setupParam.AccountIDNum;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ContactPhone = setupParam.ContactPhone;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.Territory = setupParam.Territory;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Amount = setupParam.Amount;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.CloseDate = setupParam.CloseDate;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.SalesStage = setupParam.SalesStage;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.LeadSource = setupParam.LeadSource;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.Currency = setupParam.Currency;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.Probability = setupParam.Probability;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.Process = setupParam.Process;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateOpportunity(setup) );
			
		}
		
//		[WebMethod(MessageName="UpdateOpportunity")]
//		[SoapHeader("AuthHeader")]
//		public Protocols.ToolkitResultProtocol UpdateOpportunity(System.String opportunityIDNum)
//		{
//			ClarifySession session = Global.GetSession( AuthHeader );
//			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
//			
//			return new Protocols.ToolkitResultProtocol( toolkit.UpdateOpportunity(opportunityIDNum) );	
//			
//		}
		
		[WebMethod(MessageName="UpdateOpportunity2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateOpportunity(Protocols.Sales.UpdateOpportunitySetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.UpdateOpportunitySetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.UpdateOpportunitySetup(setupParam.OpportunityIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.OpportunityIDNum = setupParam.OpportunityIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.OpportunityName = setupParam.OpportunityName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.AccountIDNum = setupParam.AccountIDNum;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ContactPhone = setupParam.ContactPhone;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Territory = setupParam.Territory;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.Amount = setupParam.Amount;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.CloseDate = setupParam.CloseDate;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.LeadSource = setupParam.LeadSource;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.Currency = setupParam.Currency;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.Probability = setupParam.Probability;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.Process = setupParam.Process;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.UpdateDate = setupParam.UpdateDate;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateOpportunity(setup) );
			
		}
		
		[WebMethod(MessageName="ChangeActionItemCondition")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ChangeActionItemCondition(System.String actionItemIDNum, System.String newcondition)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ChangeActionItemCondition(actionItemIDNum, newcondition) );	
			
		}
		
		[WebMethod(MessageName="ChangeActionItemCondition2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ChangeActionItemCondition(Protocols.Sales.ChangeActionItemConditionSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.ChangeActionItemConditionSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.ChangeActionItemConditionSetup(setupParam.ActionItemIDNum, setupParam.NewCondition);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ActionItemIDNum = setupParam.ActionItemIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewCondition = setupParam.NewCondition;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.NewStatus = setupParam.NewStatus;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ChangeDate = setupParam.ChangeDate;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ChangeActionItemCondition(setup) );
			
		}
		
		[WebMethod(MessageName="CreateActionItem")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateActionItem()
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateActionItem() );	
			
		}
		
		[WebMethod(MessageName="CreateActionItem2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateActionItem(Protocols.Sales.CreateActionItemSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.CreateActionItemSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.CreateActionItemSetup();
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.Title = setupParam.Title;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ContactPhone = setupParam.ContactPhone;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.AccountName = setupParam.AccountName;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.LeadFirstName = setupParam.LeadFirstName;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.LeadLastName = setupParam.LeadLastName;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.OpportunityIDNum = setupParam.OpportunityIDNum;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.TaskType = setupParam.TaskType;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.Priority = setupParam.Priority;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.StartDate = setupParam.StartDate;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.DueDate = setupParam.DueDate;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.CompleteDate = setupParam.CompleteDate;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(262144, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateActionItem(setup) );
			
		}
		
//		[WebMethod(MessageName="UpdateActionItem")]
//		[SoapHeader("AuthHeader")]
//		public Protocols.ToolkitResultProtocol UpdateActionItem(System.String actionItemIDNum)
//		{
//			ClarifySession session = Global.GetSession( AuthHeader );
//			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
//			
//			return new Protocols.ToolkitResultProtocol( toolkit.UpdateActionItem(actionItemIDNum) );	
//			
//		}
		
		[WebMethod(MessageName="UpdateActionItem2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateActionItem(Protocols.Sales.UpdateActionItemSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.UpdateActionItemSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.UpdateActionItemSetup(setupParam.ActionItemIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ActionItemIDNum = setupParam.ActionItemIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Title = setupParam.Title;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ContactPhone = setupParam.ContactPhone;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.AccountName = setupParam.AccountName;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.LeadFirstName = setupParam.LeadFirstName;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.LeadLastName = setupParam.LeadLastName;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.OpportunityIDNum = setupParam.OpportunityIDNum;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.TaskType = setupParam.TaskType;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.Priority = setupParam.Priority;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.StartDate = setupParam.StartDate;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.DueDate = setupParam.DueDate;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.CompleteDate = setupParam.CompleteDate;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.UpdateDate = setupParam.UpdateDate;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateActionItem(setup) );
			
		}
		
		[WebMethod(MessageName="ChangeOpportunityStage")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ChangeOpportunityStage(System.String opportunityIDNum, FChoice.Toolkits.Clarify.OpportunityStage stage)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ChangeOpportunityStage(opportunityIDNum, stage) );	
			
		}
		
		[WebMethod(MessageName="ChangeOpportunityStage2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ChangeOpportunityStage(Protocols.Sales.ChangeOpportunityStageSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Sales.SalesToolkit toolkit = new FChoice.Toolkits.Clarify.Sales.SalesToolkit( session );
			FChoice.Toolkits.Clarify.Sales.ChangeOpportunityStageSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Sales.ChangeOpportunityStageSetup(setupParam.OpportunityIDNum, setupParam.Stage);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.OpportunityIDNum = setupParam.OpportunityIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewStatus = setupParam.NewStatus;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ChangeDate = setupParam.ChangeDate;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Stage = setupParam.Stage;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ChangeOpportunityStage(setup) );
			
		}
		
	}
}
