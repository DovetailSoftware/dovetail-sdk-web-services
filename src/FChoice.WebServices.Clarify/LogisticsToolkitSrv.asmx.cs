//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Web;
using System.Web.Services;
using System.Web.Services.Protocols;

using FChoice.Foundation.Clarify;
using FChoice.Foundation.Clarify.Compatibility;
using FChoice.Foundation.Clarify.Compatibility.Toolkits;
using FChoice.Toolkits.Clarify;
using FChoice.WebServices.Clarify;

namespace FChoice.WebServices.Clarify
{
	[SoapRpcService(RoutingStyle=SoapServiceRoutingStyle.SoapAction)]
	[WebService(Description="fcSDK LogisticsToolkit Web Service", Namespace="http://www.fchoice.com/schemas/FChoice.WebServices.Clarify.LogisticsToolkitSrv_v1")]
	public class LogisticsToolkitSrv : System.Web.Services.WebService
	{
	
		public AuthenticationHeader AuthHeader;
		
		[WebMethod(MessageName="OpenContainer")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol OpenContainer(System.String containerName)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.OpenContainer(containerName) );	
			
		}
		
		[WebMethod(MessageName="OpenContainer2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol OpenContainer(Protocols.Logistics.OpenContainerSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.OpenContainerSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.OpenContainerSetup(setupParam.ContainerName);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ContainerName = setupParam.ContainerName;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.OpenContainer(setup) );
			
		}
		
		[WebMethod(MessageName="SealContainer")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol SealContainer(System.String containerName)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.SealContainer(containerName) );	
			
		}
		
		[WebMethod(MessageName="SealContainer2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol SealContainer(Protocols.Logistics.SealContainerSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.SealContainerSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.SealContainerSetup(setupParam.ContainerName);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ContainerName = setupParam.ContainerName;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.SealContainer(setup) );
			
		}
		
		[WebMethod(MessageName="CreateSubContainer")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateSubContainer(System.String containerName, System.String parentContainerName)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateSubContainer(containerName, parentContainerName) );	
			
		}
		
		[WebMethod(MessageName="CreateSubContainer2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateSubContainer(Protocols.Logistics.CreateSubContainerSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.CreateSubContainerSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.CreateSubContainerSetup(setupParam.ContainerName, setupParam.ParentContainerName);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ContainerName = setupParam.ContainerName;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ParentContainerName = setupParam.ParentContainerName;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateSubContainer(setup) );
			
		}
		
		[WebMethod(MessageName="CreateContainer")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateContainer(System.String containerName, System.String locationName)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateContainer(containerName, locationName) );	
			
		}
		
		[WebMethod(MessageName="CreateContainer2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateContainer(Protocols.Logistics.CreateContainerSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.CreateContainerSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.CreateContainerSetup(setupParam.ContainerName, setupParam.LocationName);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ContainerName = setupParam.ContainerName;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.LocationName = setupParam.LocationName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.BinName = setupParam.BinName;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateContainer(setup) );
			
		}
		
//		[WebMethod(MessageName="UpdatePartRequestDetail")]
//		[SoapHeader("AuthHeader")]
//		public Protocols.ToolkitResultProtocol UpdatePartRequestDetail(System.String partRequestDetailIDNum)
//		{
//			ClarifySession session = Global.GetSession( AuthHeader );
//			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
//			
//			return new Protocols.ToolkitResultProtocol( toolkit.UpdatePartRequestDetail(partRequestDetailIDNum) );	
//			
//		}
		
		[WebMethod(MessageName="UpdatePartRequestDetail2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdatePartRequestDetail(Protocols.Logistics.UpdatePartRequestDetailSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.UpdatePartRequestDetailSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.UpdatePartRequestDetailSetup(setupParam.PartRequestDetailIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartRequestDetailIDNum = setupParam.PartRequestDetailIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.SerialNumber = setupParam.SerialNumber;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.Quantity = setupParam.Quantity;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.SitePartObjid = setupParam.SitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.DetailType = setupParam.DetailType;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.Priority = setupParam.Priority;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.ShippingMethod = setupParam.ShippingMethod;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.CarrierName = setupParam.CarrierName;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.HasWarranty = setupParam.HasWarranty;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdatePartRequestDetail(setup) );
			
		}
		
//		[WebMethod(MessageName="UpdatePartRequestHeader")]
//		[SoapHeader("AuthHeader")]
//		public Protocols.ToolkitResultProtocol UpdatePartRequestHeader(System.String partRequestHeaderIDNum)
//		{
//			ClarifySession session = Global.GetSession( AuthHeader );
//			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
//			
//			return new Protocols.ToolkitResultProtocol( toolkit.UpdatePartRequestHeader(partRequestHeaderIDNum) );	
//			
//		}
		
		[WebMethod(MessageName="UpdatePartRequestHeader2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdatePartRequestHeader(Protocols.Logistics.UpdatePartRequestHeaderSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.UpdatePartRequestHeaderSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.UpdatePartRequestHeaderSetup(setupParam.PartRequestHeaderIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartRequestHeaderIDNum = setupParam.PartRequestHeaderIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ContactPhone = setupParam.ContactPhone;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ShipToSiteIDNum = setupParam.ShipToSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.BillSiteIDNum = setupParam.BillSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.PaymentMethod = setupParam.PaymentMethod;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.PaymentTerms = setupParam.PaymentTerms;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.Priority = setupParam.Priority;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdatePartRequestHeader(setup) );
			
		}
		
		[WebMethod(MessageName="CreatePartRequestHeader")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreatePartRequestHeader(System.String contactFirstName, System.String contactLastName, System.String contactPhone, System.String shipToSiteIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreatePartRequestHeader(contactFirstName, contactLastName, contactPhone, shipToSiteIDNum) );	
			
		}
		
		[WebMethod(MessageName="CreatePartRequestHeader2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreatePartRequestHeader(Protocols.Logistics.CreatePartRequestHeaderSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.CreatePartRequestHeaderSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.CreatePartRequestHeaderSetup(setupParam.ContactFirstName, setupParam.ContactLastName, setupParam.ContactPhone, setupParam.ShipToSiteIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ContactPhone = setupParam.ContactPhone;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ShipToSiteIDNum = setupParam.ShipToSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.BillSiteIDNum = setupParam.BillSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.PaymentMethod = setupParam.PaymentMethod;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.PaymentTerms = setupParam.PaymentTerms;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.Priority = setupParam.Priority;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.ContractObjid = setupParam.ContractObjid;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreatePartRequestHeader(setup) );
			
		}
		
		[WebMethod(MessageName="CreatePartRequestHeaderSubcase")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreatePartRequestHeaderSubcase(System.String contactFirstName, System.String contactLastName, System.String contactPhone, System.String shipToSiteIDNum, System.String caseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreatePartRequestHeaderSubcase(contactFirstName, contactLastName, contactPhone, shipToSiteIDNum, caseIDNum) );	
			
		}
		
		[WebMethod(MessageName="CreatePartRequestHeaderSubcase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreatePartRequestHeaderSubcase(Protocols.Logistics.CreatePartRequestHeaderSubcaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.CreatePartRequestHeaderSubcaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.CreatePartRequestHeaderSubcaseSetup(setupParam.ContactFirstName, setupParam.ContactLastName, setupParam.ContactPhone, setupParam.ShipToSiteIDNum, setupParam.CaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ContactPhone = setupParam.ContactPhone;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ShipToSiteIDNum = setupParam.ShipToSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.BillSiteIDNum = setupParam.BillSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.PaymentMethod = setupParam.PaymentMethod;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.PaymentTerms = setupParam.PaymentTerms;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.Priority = setupParam.Priority;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.ContractObjid = setupParam.ContractObjid;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreatePartRequestHeaderSubcase(setup) );
			
		}
		
		[WebMethod(MessageName="CreatePartRequestHeaderCase")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreatePartRequestHeaderCase(System.String contactFirstName, System.String contactLastName, System.String contactPhone, System.String shipToSiteIDNum, System.String caseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreatePartRequestHeaderCase(contactFirstName, contactLastName, contactPhone, shipToSiteIDNum, caseIDNum) );	
			
		}
		
		[WebMethod(MessageName="CreatePartRequestHeaderCase2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreatePartRequestHeaderCase(Protocols.Logistics.CreatePartRequestHeaderCaseSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.CreatePartRequestHeaderCaseSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.CreatePartRequestHeaderCaseSetup(setupParam.ContactFirstName, setupParam.ContactLastName, setupParam.ContactPhone, setupParam.ShipToSiteIDNum, setupParam.CaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ContactPhone = setupParam.ContactPhone;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ShipToSiteIDNum = setupParam.ShipToSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.BillSiteIDNum = setupParam.BillSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.PaymentMethod = setupParam.PaymentMethod;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.PaymentTerms = setupParam.PaymentTerms;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.Priority = setupParam.Priority;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.ContractObjid = setupParam.ContractObjid;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreatePartRequestHeaderCase(setup) );
			
		}
		
		[WebMethod(MessageName="PartTransfer")]
		[SoapHeader("AuthHeader")]
		public Protocols.Logistics.PartTransferResultProtocol PartTransfer(System.String partNumber, System.String partRevision, System.String partDomain, System.Int32 quantity, Protocols.LocationProtocol fromlocation, Protocols.LocationProtocol tolocation)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.Logistics.PartTransferResultProtocol( toolkit.PartTransfer(partNumber, partRevision, partDomain, quantity, fromlocation.ToLocation(), tolocation.ToLocation()) );	
			
		}
		
		[WebMethod(MessageName="PartTransfer2")]
		[SoapHeader("AuthHeader")]
		public Protocols.Logistics.PartTransferResultProtocol PartTransfer(System.String partNumber, System.String partRevision, System.String partDomain, System.String serialNumber, Protocols.LocationProtocol fromlocation, Protocols.LocationProtocol tolocation)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.Logistics.PartTransferResultProtocol( toolkit.PartTransfer(partNumber, partRevision, partDomain, serialNumber, fromlocation.ToLocation(), tolocation.ToLocation()) );	
			
		}
		
		[WebMethod(MessageName="PartTransfer3")]
		[SoapHeader("AuthHeader")]
		public Protocols.Logistics.PartTransferResultProtocol PartTransfer(Protocols.Logistics.PartTransferSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.PartTransferSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.PartTransferSetup(setupParam.PartNumber, setupParam.PartRevision, setupParam.PartDomain, setupParam.Quantity, setupParam.FromLocation.ToLocation(), setupParam.ToLocation.ToLocation());
					break;
				case 1:
					setup = new FChoice.Toolkits.Clarify.Logistics.PartTransferSetup(setupParam.PartNumber, setupParam.PartRevision, setupParam.PartDomain, setupParam.SerialNumber, setupParam.FromLocation.ToLocation(), setupParam.ToLocation.ToLocation());
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Quantity = setupParam.Quantity;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.SerialNumber = setupParam.SerialNumber;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.FromGood = setupParam.FromGood;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.ToGood = setupParam.ToGood;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.TransferDate = setupParam.TransferDate;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.ReferenceIDNum = setupParam.ReferenceIDNum;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(8388608, setupParam.DirtyFieldFlags) )
			{
				setupParam.ToLocation = new Protocols.LocationProtocol(); setupParam.ToLocation.IsPrimaryBinSuggestion = setup.ToLocation.IsPrimaryBinSuggestion; setupParam.ToLocation.LocationName = setup.ToLocation.LocationName; setupParam.ToLocation.BinName = setup.ToLocation.BinName;			
			}
				
			if( Global.IsPropertyDirty(16777216, setupParam.DirtyFieldFlags) )
			{
				setupParam.FromLocation = new Protocols.LocationProtocol(); setupParam.FromLocation.IsPrimaryBinSuggestion = setup.FromLocation.IsPrimaryBinSuggestion; setupParam.FromLocation.LocationName = setup.FromLocation.LocationName; setupParam.FromLocation.BinName = setup.FromLocation.BinName;			
			}
				
							
			return new Protocols.Logistics.PartTransferResultProtocol( toolkit.PartTransfer(setup) );
			
		}
		
		[WebMethod(MessageName="CreatePartRequestDetail")]
		[SoapHeader("AuthHeader")]
		public Protocols.Logistics.CreatePartRequestDetailResultProtocol CreatePartRequestDetail(System.String partRequestHeaderIDNum, System.String partNumber, System.String partDomain, System.String partRevision, System.Int32 quantity)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.Logistics.CreatePartRequestDetailResultProtocol( toolkit.CreatePartRequestDetail(partRequestHeaderIDNum, partNumber, partDomain, partRevision, quantity) );	
			
		}
		
		[WebMethod(MessageName="CreatePartRequestDetail2")]
		[SoapHeader("AuthHeader")]
		public Protocols.Logistics.CreatePartRequestDetailResultProtocol CreatePartRequestDetail(System.String partRequestHeaderIDNum, System.Int32 quantity, System.Int32 sitePartObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.Logistics.CreatePartRequestDetailResultProtocol( toolkit.CreatePartRequestDetail(partRequestHeaderIDNum, quantity, sitePartObjid) );	
			
		}
		
		[WebMethod(MessageName="CreatePartRequestDetail3")]
		[SoapHeader("AuthHeader")]
		public Protocols.Logistics.CreatePartRequestDetailResultProtocol CreatePartRequestDetail(System.String partRequestHeaderIDNum, System.String partNumber, System.String partDomain, System.String partRevision, System.String serialNumber)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.Logistics.CreatePartRequestDetailResultProtocol( toolkit.CreatePartRequestDetail(partRequestHeaderIDNum, partNumber, partDomain, partRevision, serialNumber) );	
			
		}
		
		[WebMethod(MessageName="CreatePartRequestDetail4")]
		[SoapHeader("AuthHeader")]
		public Protocols.Logistics.CreatePartRequestDetailResultProtocol CreatePartRequestDetail(System.String partRequestHeaderIDNum, System.String serialNumber, System.Int32 sitePartObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.Logistics.CreatePartRequestDetailResultProtocol( toolkit.CreatePartRequestDetail(partRequestHeaderIDNum, serialNumber, sitePartObjid) );	
			
		}
		
		[WebMethod(MessageName="CreatePartRequestDetail5")]
		[SoapHeader("AuthHeader")]
		public Protocols.Logistics.CreatePartRequestDetailResultProtocol CreatePartRequestDetail(Protocols.Logistics.CreatePartRequestDetailSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.CreatePartRequestDetailSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.CreatePartRequestDetailSetup(setupParam.PartRequestHeaderIDNum, setupParam.PartNumber, setupParam.PartDomain, setupParam.PartRevision, setupParam.Quantity);
					break;
				case 1:
					setup = new FChoice.Toolkits.Clarify.Logistics.CreatePartRequestDetailSetup(setupParam.PartRequestHeaderIDNum, setupParam.Quantity, setupParam.SitePartObjid);
					break;
				case 2:
					setup = new FChoice.Toolkits.Clarify.Logistics.CreatePartRequestDetailSetup(setupParam.PartRequestHeaderIDNum, setupParam.PartNumber, setupParam.PartDomain, setupParam.PartRevision, setupParam.SerialNumber);
					break;
				case 3:
					setup = new FChoice.Toolkits.Clarify.Logistics.CreatePartRequestDetailSetup(setupParam.PartRequestHeaderIDNum, setupParam.SerialNumber, setupParam.SitePartObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartRequestHeaderIDNum = setupParam.PartRequestHeaderIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Queue = setupParam.Queue;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.SerialNumber = setupParam.SerialNumber;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Quantity = setupParam.Quantity;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.SitePartObjid = setupParam.SitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.DetailType = setupParam.DetailType;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.Priority = setupParam.Priority;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.ShippingMethod = setupParam.ShippingMethod;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.CarrierName = setupParam.CarrierName;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.HasWarranty = setupParam.HasWarranty;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(262144, setupParam.DirtyFieldFlags) )
			{
				setup.DueDate = setupParam.DueDate;			
			}
				
			if( Global.IsPropertyDirty(524288, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(1048576, setupParam.DirtyFieldFlags) )
			{
				setup.ContractItemObjid = setupParam.ContractItemObjid;			
			}
				
			if( Global.IsPropertyDirty(2097152, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.Logistics.CreatePartRequestDetailResultProtocol( toolkit.CreatePartRequestDetail(setup) );
			
		}
		
		[WebMethod(MessageName="UpdatePartStockingLevel")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdatePartStockingLevel(Protocols.LocationProtocol currentLocation, System.String queue, System.String partNumber, System.String partRevision, System.String partDomain)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.UpdatePartStockingLevel(currentLocation.ToLocation(), queue, partNumber, partRevision, partDomain) );	
			
		}
		
		[WebMethod(MessageName="UpdatePartStockingLevel2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdatePartStockingLevel(Protocols.Logistics.UpdatePartStockingLevelSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.UpdatePartStockingLevelSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.UpdatePartStockingLevelSetup(setupParam.CurrentLocation.ToLocation(), setupParam.Queue, setupParam.PartNumber, setupParam.PartRevision, setupParam.PartDomain);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ToBinName = setupParam.ToBinName;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Queue = setupParam.Queue;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ToQueue = setupParam.ToQueue;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.PartMinimum = setupParam.PartMinimum;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.PartMaximum = setupParam.PartMaximum;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.PartReorderLevel = setupParam.PartReorderLevel;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.PartReorderQuantity = setupParam.PartReorderQuantity;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.IsActive = setupParam.IsActive;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setupParam.CurrentLocation = new Protocols.LocationProtocol(); setupParam.CurrentLocation.IsPrimaryBinSuggestion = setup.CurrentLocation.IsPrimaryBinSuggestion; setupParam.CurrentLocation.LocationName = setup.CurrentLocation.LocationName; setupParam.CurrentLocation.BinName = setup.CurrentLocation.BinName;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdatePartStockingLevel(setup) );
			
		}
		
		[WebMethod(MessageName="SetPartStockingLevel")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol SetPartStockingLevel(Protocols.LocationProtocol location, System.String queue, System.String partNumber, System.String partRevision, System.String partDomain, System.Int16 partMinimum, System.Int16 partMaximum, System.Int16 partReorderLevel, System.Int16 partReorderQuantity)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.SetPartStockingLevel(location.ToLocation(), queue, partNumber, partRevision, partDomain, partMinimum, partMaximum, partReorderLevel, partReorderQuantity) );	
			
		}
		
		[WebMethod(MessageName="SetPartStockingLevel2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol SetPartStockingLevel(Protocols.Logistics.SetPartStockingLevelSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.SetPartStockingLevelSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.SetPartStockingLevelSetup(setupParam.Location.ToLocation(), setupParam.Queue, setupParam.PartNumber, setupParam.PartRevision, setupParam.PartDomain, setupParam.PartMinimum, setupParam.PartMaximum, setupParam.PartReorderLevel, setupParam.PartReorderQuantity);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Queue = setupParam.Queue;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.PartMinimum = setupParam.PartMinimum;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.PartMaximum = setupParam.PartMaximum;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.PartReorderLevel = setupParam.PartReorderLevel;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.PartReorderQuantity = setupParam.PartReorderQuantity;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.IsActive = setupParam.IsActive;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setupParam.Location = new Protocols.LocationProtocol(); setupParam.Location.IsPrimaryBinSuggestion = setup.Location.IsPrimaryBinSuggestion; setupParam.Location.LocationName = setup.Location.LocationName; setupParam.Location.BinName = setup.Location.BinName;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.SetPartStockingLevel(setup) );
			
		}
		
		[WebMethod(MessageName="UpdateLocationServicingSite")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateLocationServicingSite(System.String siteIDNum, System.String locationName, System.Int16 locationRank)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateLocationServicingSite(siteIDNum, locationName, locationRank) );	
			
		}
		
		[WebMethod(MessageName="UpdateLocationServicingSite2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateLocationServicingSite(Protocols.Logistics.UpdateLocationServicingSiteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.UpdateLocationServicingSiteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.UpdateLocationServicingSiteSetup(setupParam.SiteIDNum, setupParam.LocationName, setupParam.LocationRank);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.LocationName = setupParam.LocationName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.LocationRank = setupParam.LocationRank;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateLocationServicingSite(setup) );
			
		}
		
		[WebMethod(MessageName="DeleteLocationServicingSite")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteLocationServicingSite(System.String siteIDNum, System.String locationName)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteLocationServicingSite(siteIDNum, locationName) );	
			
		}
		
		[WebMethod(MessageName="DeleteLocationServicingSite2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteLocationServicingSite(Protocols.Logistics.DeleteLocationServicingSiteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.DeleteLocationServicingSiteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.DeleteLocationServicingSiteSetup(setupParam.SiteIDNum, setupParam.LocationName);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.LocationName = setupParam.LocationName;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteLocationServicingSite(setup) );
			
		}
		
		[WebMethod(MessageName="AddLocationServicingSite")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddLocationServicingSite(System.String siteIDNum, System.String locationName, System.Int16 locationRank)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AddLocationServicingSite(siteIDNum, locationName, locationRank) );	
			
		}
		
		[WebMethod(MessageName="AddLocationServicingSite2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddLocationServicingSite(Protocols.Logistics.AddLocationServicingSiteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.AddLocationServicingSiteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.AddLocationServicingSiteSetup(setupParam.SiteIDNum, setupParam.LocationName, setupParam.LocationRank);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.LocationName = setupParam.LocationName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.IsActive = setupParam.IsActive;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.LocationRank = setupParam.LocationRank;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AddLocationServicingSite(setup) );
			
		}
		
//		[WebMethod(MessageName="UpdateInventoryLocation")]
//		[SoapHeader("AuthHeader")]
//		public Protocols.ToolkitResultProtocol UpdateInventoryLocation(System.String currentName)
//		{
//			ClarifySession session = Global.GetSession( AuthHeader );
//			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
//			
//			return new Protocols.ToolkitResultProtocol( toolkit.UpdateInventoryLocation(currentName) );	
//			
//		}
		
		[WebMethod(MessageName="UpdateInventoryLocation2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateInventoryLocation(Protocols.Logistics.UpdateInventoryLocationSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.UpdateInventoryLocationSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.UpdateInventoryLocationSetup(setupParam.CurrentName);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CurrentName = setupParam.CurrentName;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewName = setupParam.NewName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.AccountType = setupParam.AccountType;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ReportsToLocation = setupParam.ReportsToLocation;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.CapitalGLAccount = setupParam.CapitalGLAccount;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.IsActive = setupParam.IsActive;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.IsCompany = setupParam.IsCompany;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.PartAuthorizationLevel = setupParam.PartAuthorizationLevel;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateInventoryLocation(setup) );
			
		}
		
		[WebMethod(MessageName="AddInventoryLocation")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddInventoryLocation(System.String locationName, System.String capitalGLAccount, System.String siteIDNum, FChoice.Toolkits.Clarify.PartAuthorizationLevel partAuthorizationLevel)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AddInventoryLocation(locationName, capitalGLAccount, siteIDNum, partAuthorizationLevel) );	
			
		}
		
		[WebMethod(MessageName="AddInventoryLocation2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddInventoryLocation(Protocols.Logistics.AddInventoryLocationSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.AddInventoryLocationSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.AddInventoryLocationSetup(setupParam.LocationName, setupParam.CapitalGLAccount, setupParam.SiteIDNum, setupParam.PartAuthorizationLevel);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.LocationName = setupParam.LocationName;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.AccountType = setupParam.AccountType;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ReportsToLocation = setupParam.ReportsToLocation;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.CapitalGLAccount = setupParam.CapitalGLAccount;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.IsActive = setupParam.IsActive;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.IsCompany = setupParam.IsCompany;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.PartAuthorizationLevel = setupParam.PartAuthorizationLevel;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AddInventoryLocation(setup) );
			
		}
		
		[WebMethod(MessageName="UpdateGLAccount")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateGLAccount(System.String currentName, System.String siteIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateGLAccount(currentName, siteIDNum) );	
			
		}
		
		[WebMethod(MessageName="UpdateGLAccount2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateGLAccount(Protocols.Logistics.UpdateGLAccountSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.UpdateGLAccountSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.UpdateGLAccountSetup(setupParam.CurrentName, setupParam.SiteIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CurrentName = setupParam.CurrentName;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewName = setupParam.NewName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.AccountType = setupParam.AccountType;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.AccountNumber = setupParam.AccountNumber;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.IsExpenseGLAccount = setupParam.IsExpenseGLAccount;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.IsActive = setupParam.IsActive;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.IsCompany = setupParam.IsCompany;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateGLAccount(setup) );
			
		}
		
		[WebMethod(MessageName="AddGLAccount")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddGLAccount(System.String accountName, System.String siteIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AddGLAccount(accountName, siteIDNum) );	
			
		}
		
		[WebMethod(MessageName="AddGLAccount2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddGLAccount(Protocols.Logistics.AddGLAccountSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.AddGLAccountSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.AddGLAccountSetup(setupParam.AccountName, setupParam.SiteIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.AccountName = setupParam.AccountName;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.AccountType = setupParam.AccountType;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.AccountNumber = setupParam.AccountNumber;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.IsExpenseGLAccount = setupParam.IsExpenseGLAccount;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.IsActive = setupParam.IsActive;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.IsCompany = setupParam.IsCompany;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AddGLAccount(setup) );
			
		}
		
		[WebMethod(MessageName="UpdateInventoryBin")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateInventoryBin(Protocols.LocationProtocol currentLocation, System.String newBinName)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateInventoryBin(currentLocation.ToLocation(), newBinName) );	
			
		}
		
		[WebMethod(MessageName="UpdateInventoryBin2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateInventoryBin(Protocols.Logistics.UpdateInventoryBinSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.UpdateInventoryBinSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.UpdateInventoryBinSetup(setupParam.CurrentLocation.ToLocation(), setupParam.NewBinName);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewBinName = setupParam.NewBinName;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.IsActive = setupParam.IsActive;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setupParam.CurrentLocation = new Protocols.LocationProtocol(); setupParam.CurrentLocation.IsPrimaryBinSuggestion = setup.CurrentLocation.IsPrimaryBinSuggestion; setupParam.CurrentLocation.LocationName = setup.CurrentLocation.LocationName; setupParam.CurrentLocation.BinName = setup.CurrentLocation.BinName;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateInventoryBin(setup) );
			
		}
		
		[WebMethod(MessageName="AddInventoryBin")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddInventoryBin(Protocols.LocationProtocol location)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AddInventoryBin(location.ToLocation()) );	
			
		}
		
		[WebMethod(MessageName="AddInventoryBin2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddInventoryBin(Protocols.Logistics.AddInventoryBinSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.AddInventoryBinSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.AddInventoryBinSetup(setupParam.Location.ToLocation());
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.IsActive = setupParam.IsActive;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setupParam.Location = new Protocols.LocationProtocol(); setupParam.Location.IsPrimaryBinSuggestion = setup.Location.IsPrimaryBinSuggestion; setupParam.Location.LocationName = setup.Location.LocationName; setupParam.Location.BinName = setup.Location.BinName;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AddInventoryBin(setup) );
			
		}
		
		[WebMethod(MessageName="YankPartRequest")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol YankPartRequest(System.String partRequestDetailIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.YankPartRequest(partRequestDetailIDNum) );	
			
		}
		
		[WebMethod(MessageName="YankPartRequest2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol YankPartRequest(Protocols.Logistics.YankPartRequestSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.YankPartRequestSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.YankPartRequestSetup(setupParam.PartRequestDetailIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartRequestDetailIDNum = setupParam.PartRequestDetailIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.YankDate = setupParam.YankDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.YankPartRequest(setup) );
			
		}
		
		[WebMethod(MessageName="Ship")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol Ship(System.String partRequestDetailIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.Ship(partRequestDetailIDNum) );	
			
		}
		
		[WebMethod(MessageName="Ship2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol Ship(Protocols.Logistics.ShipSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.ShipSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.ShipSetup(setupParam.PartRequestDetailIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartRequestDetailIDNum = setupParam.PartRequestDetailIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.SiteName = setupParam.SiteName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Address1 = setupParam.Address1;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Address2 = setupParam.Address2;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.City = setupParam.City;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.State = setupParam.State;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.ZipCode = setupParam.ZipCode;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.Country = setupParam.Country;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.WaybillName = setupParam.WaybillName;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.PackingList = setupParam.PackingList;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.PieceCount = setupParam.PieceCount;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.TotalWeight = setupParam.TotalWeight;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.ShipDate = setupParam.ShipDate;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				setup.CarrierName = setupParam.CarrierName;			
			}
				
			if( Global.IsPropertyDirty(262144, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.Ship(setup) );
			
		}
		
		[WebMethod(MessageName="ReopenPartRequest")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReopenPartRequest(System.String partRequestDetailIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ReopenPartRequest(partRequestDetailIDNum) );	
			
		}
		
		[WebMethod(MessageName="ReopenPartRequest2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReopenPartRequest(Protocols.Logistics.ReopenPartRequestSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.ReopenPartRequestSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.ReopenPartRequestSetup(setupParam.PartRequestDetailIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartRequestDetailIDNum = setupParam.PartRequestDetailIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewStatus = setupParam.NewStatus;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ReopenDate = setupParam.ReopenDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ReopenPartRequest(setup) );
			
		}
		
		[WebMethod(MessageName="RejectPartRequest")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RejectPartRequest(System.String partRequestDetailIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.RejectPartRequest(partRequestDetailIDNum) );	
			
		}
		
		[WebMethod(MessageName="RejectPartRequest2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RejectPartRequest(Protocols.Logistics.RejectPartRequestSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.RejectPartRequestSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.RejectPartRequestSetup(setupParam.PartRequestDetailIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartRequestDetailIDNum = setupParam.PartRequestDetailIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.RejectDate = setupParam.RejectDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.RejectPartRequest(setup) );
			
		}
		
		[WebMethod(MessageName="MovePartRequest")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MovePartRequest(System.String partRequestDetailIDNum, System.String newWipBin)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.MovePartRequest(partRequestDetailIDNum, newWipBin) );	
			
		}
		
		[WebMethod(MessageName="MovePartRequest2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MovePartRequest(Protocols.Logistics.MovePartRequestSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.MovePartRequestSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.MovePartRequestSetup(setupParam.PartRequestDetailIDNum, setupParam.NewWipBin);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartRequestDetailIDNum = setupParam.PartRequestDetailIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewWipBin = setupParam.NewWipBin;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.MovePartRequest(setup) );
			
		}
		
		[WebMethod(MessageName="GetLocationsServicingSite")]
		[SoapHeader("AuthHeader")]
		public Protocols.Logistics.GetLocationsServicingSiteResultProtocol GetLocationsServicingSite(System.String siteIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.Logistics.GetLocationsServicingSiteResultProtocol( toolkit.GetLocationsServicingSite(siteIDNum) );	
			
		}
		
		[WebMethod(MessageName="GetLocationsServicingSite2")]
		[SoapHeader("AuthHeader")]
		public Protocols.Logistics.GetLocationsServicingSiteResultProtocol GetLocationsServicingSite(Protocols.Logistics.GetLocationsServicingSiteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.GetLocationsServicingSiteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.GetLocationsServicingSiteSetup(setupParam.SiteIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
							
			return new Protocols.Logistics.GetLocationsServicingSiteResultProtocol( toolkit.GetLocationsServicingSite(setup) );
			
		}
		
		[WebMethod(MessageName="GetAlternateParts")]
		[SoapHeader("AuthHeader")]
		public Protocols.Logistics.GetAlternatePartsResultProtocol GetAlternateParts(System.String partNumber, System.String partDomain, System.String partRevision)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.Logistics.GetAlternatePartsResultProtocol( toolkit.GetAlternateParts(partNumber, partDomain, partRevision) );	
			
		}
		
		[WebMethod(MessageName="GetAlternateParts2")]
		[SoapHeader("AuthHeader")]
		public Protocols.Logistics.GetAlternatePartsResultProtocol GetAlternateParts(Protocols.Logistics.GetAlternatePartsSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.GetAlternatePartsSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.GetAlternatePartsSetup(setupParam.PartNumber, setupParam.PartDomain, setupParam.PartRevision);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
							
			return new Protocols.Logistics.GetAlternatePartsResultProtocol( toolkit.GetAlternateParts(setup) );
			
		}
		
		[WebMethod(MessageName="DeleteAlternatePart")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteAlternatePart(System.String partNumber, System.String partRevision, System.String partDomain, System.String alternatePartNumber, System.String alternatePartRevision, System.String alternatePartDomain)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteAlternatePart(partNumber, partRevision, partDomain, alternatePartNumber, alternatePartRevision, alternatePartDomain) );	
			
		}
		
		[WebMethod(MessageName="DeleteAlternatePart2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteAlternatePart(Protocols.Logistics.DeleteAlternatePartSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.DeleteAlternatePartSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.DeleteAlternatePartSetup(setupParam.PartNumber, setupParam.PartRevision, setupParam.PartDomain, setupParam.AlternatePartNumber, setupParam.AlternatePartRevision, setupParam.AlternatePartDomain);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.AlternatePartNumber = setupParam.AlternatePartNumber;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.AlternatePartRevision = setupParam.AlternatePartRevision;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.AlternatePartDomain = setupParam.AlternatePartDomain;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteAlternatePart(setup) );
			
		}
		
		[WebMethod(MessageName="AddAlternatePart")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddAlternatePart(System.String partNumber, System.String partRevision, System.String partDomain, System.String alternatePartNumber, System.String alternatePartRevision, System.String alternatePartDomain)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AddAlternatePart(partNumber, partRevision, partDomain, alternatePartNumber, alternatePartRevision, alternatePartDomain) );	
			
		}
		
		[WebMethod(MessageName="AddAlternatePart2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddAlternatePart(Protocols.Logistics.AddAlternatePartSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.AddAlternatePartSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.AddAlternatePartSetup(setupParam.PartNumber, setupParam.PartRevision, setupParam.PartDomain, setupParam.AlternatePartNumber, setupParam.AlternatePartRevision, setupParam.AlternatePartDomain);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.AlternatePartNumber = setupParam.AlternatePartNumber;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.AlternatePartRevision = setupParam.AlternatePartRevision;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.AlternatePartDomain = setupParam.AlternatePartDomain;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.IsReciprocal = setupParam.IsReciprocal;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AddAlternatePart(setup) );
			
		}
		
		[WebMethod(MessageName="ForwardPartRequest")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ForwardPartRequest(System.String partRequestDetailIDNum, System.String newQueue)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ForwardPartRequest(partRequestDetailIDNum, newQueue) );	
			
		}
		
		[WebMethod(MessageName="ForwardPartRequest2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ForwardPartRequest(Protocols.Logistics.ForwardPartRequestSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.ForwardPartRequestSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.ForwardPartRequestSetup(setupParam.PartRequestDetailIDNum, setupParam.NewQueue);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartRequestDetailIDNum = setupParam.PartRequestDetailIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewQueue = setupParam.NewQueue;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ForwardDate = setupParam.ForwardDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ForwardPartRequest(setup) );
			
		}
		
		[WebMethod(MessageName="DispatchPartRequest")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DispatchPartRequest(System.String partRequestDetailIDNum, System.String queue)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DispatchPartRequest(partRequestDetailIDNum, queue) );	
			
		}
		
		[WebMethod(MessageName="DispatchPartRequest2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DispatchPartRequest(Protocols.Logistics.DispatchPartRequestSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.DispatchPartRequestSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.DispatchPartRequestSetup(setupParam.PartRequestDetailIDNum, setupParam.Queue);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartRequestDetailIDNum = setupParam.PartRequestDetailIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Queue = setupParam.Queue;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.DispatchDate = setupParam.DispatchDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DispatchPartRequest(setup) );
			
		}
		
		[WebMethod(MessageName="ClosePartRequest")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ClosePartRequest(System.String partRequestDetailIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ClosePartRequest(partRequestDetailIDNum) );	
			
		}
		
		[WebMethod(MessageName="ClosePartRequest2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ClosePartRequest(Protocols.Logistics.ClosePartRequestSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.ClosePartRequestSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.ClosePartRequestSetup(setupParam.PartRequestDetailIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartRequestDetailIDNum = setupParam.PartRequestDetailIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewStatus = setupParam.NewStatus;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.CloseDate = setupParam.CloseDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ClosePartRequest(setup) );
			
		}
		
		[WebMethod(MessageName="ChangePartRequestStatus")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ChangePartRequestStatus(System.String partRequestDetailIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ChangePartRequestStatus(partRequestDetailIDNum) );	
			
		}
		
		[WebMethod(MessageName="ChangePartRequestStatus2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ChangePartRequestStatus(Protocols.Logistics.ChangePartRequestStatusSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.ChangePartRequestStatusSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.ChangePartRequestStatusSetup(setupParam.PartRequestDetailIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartRequestDetailIDNum = setupParam.PartRequestDetailIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewStatus = setupParam.NewStatus;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ChangeDate = setupParam.ChangeDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ChangePartRequestStatus(setup) );
			
		}
		
		[WebMethod(MessageName="AssignPartRequest")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AssignPartRequest(System.String partRequestDetailIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AssignPartRequest(partRequestDetailIDNum) );	
			
		}
		
		[WebMethod(MessageName="AssignPartRequest2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AssignPartRequest(Protocols.Logistics.AssignPartRequestSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.AssignPartRequestSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.AssignPartRequestSetup(setupParam.PartRequestDetailIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartRequestDetailIDNum = setupParam.PartRequestDetailIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewUser = setupParam.NewUser;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.AssignDate = setupParam.AssignDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AssignPartRequest(setup) );
			
		}
		
		[WebMethod(MessageName="AcceptPartRequest")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AcceptPartRequest(System.String partRequestDetailIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AcceptPartRequest(partRequestDetailIDNum) );	
			
		}
		
		[WebMethod(MessageName="AcceptPartRequest2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AcceptPartRequest(Protocols.Logistics.AcceptPartRequestSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.AcceptPartRequestSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.AcceptPartRequestSetup(setupParam.PartRequestDetailIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartRequestDetailIDNum = setupParam.PartRequestDetailIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.AcceptDate = setupParam.AcceptDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AcceptPartRequest(setup) );
			
		}
		
		[WebMethod(MessageName="Pick")]
		[SoapHeader("AuthHeader")]
		public Protocols.Logistics.PickResultProtocol Pick(System.String partRequestDetailIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.Logistics.PickResultProtocol( toolkit.Pick(partRequestDetailIDNum) );	
			
		}
		
		[WebMethod(MessageName="Pick2")]
		[SoapHeader("AuthHeader")]
		public Protocols.Logistics.PickResultProtocol Pick(System.String partRequestDetailIDNum, System.String[] serialNumbers)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.Logistics.PickResultProtocol( toolkit.Pick(partRequestDetailIDNum, serialNumbers) );	
			
		}
		
		[WebMethod(MessageName="Pick3")]
		[SoapHeader("AuthHeader")]
		public Protocols.Logistics.PickResultProtocol Pick(System.String partRequestDetailIDNum, System.Boolean useTransitions)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.Logistics.PickResultProtocol( toolkit.Pick(partRequestDetailIDNum, useTransitions) );	
			
		}
		
		[WebMethod(MessageName="Pick4")]
		[SoapHeader("AuthHeader")]
		public Protocols.Logistics.PickResultProtocol Pick(System.String partRequestDetailIDNum, System.Boolean useTransitions, System.String[] serialNumbers)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.Logistics.PickResultProtocol( toolkit.Pick(partRequestDetailIDNum, useTransitions, serialNumbers) );	
			
		}
		
		[WebMethod(MessageName="Pick5")]
		[SoapHeader("AuthHeader")]
		public Protocols.Logistics.PickResultProtocol Pick(Protocols.Logistics.PickSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.PickSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.PickSetup(setupParam.PartRequestDetailIDNum);
					break;
				case 1:
					setup = new FChoice.Toolkits.Clarify.Logistics.PickSetup(setupParam.PartRequestDetailIDNum, setupParam.SerialNumbers);
					break;
				case 2:
					setup = new FChoice.Toolkits.Clarify.Logistics.PickSetup(setupParam.PartRequestDetailIDNum, setupParam.UseTransitions);
					break;
				case 3:
					setup = new FChoice.Toolkits.Clarify.Logistics.PickSetup(setupParam.PartRequestDetailIDNum, setupParam.UseTransitions, setupParam.SerialNumbers);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartRequestDetailIDNum = setupParam.PartRequestDetailIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.LocationProtocol loc in setupParam.Locations){FChoice.Toolkits.Clarify.Location newLoc = new FChoice.Toolkits.Clarify.Location();newLoc.IsPrimaryBinSuggestion = loc.IsPrimaryBinSuggestion;newLoc.LocationName = loc.LocationName;newLoc.BinName = loc.BinName;setup.Locations.Add( newLoc );}			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.UseGood = setupParam.UseGood;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.PickDate = setupParam.PickDate;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.NewStatus = setupParam.NewStatus;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.SerialNumbers = setupParam.SerialNumbers;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.UseTransitions = setupParam.UseTransitions;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.Logistics.PickResultProtocol( toolkit.Pick(setup) );
			
		}
		
		[WebMethod(MessageName="Unpick")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol Unpick(System.String partRequestDetailIDNum, Protocols.LocationProtocol location)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.Unpick(partRequestDetailIDNum, location.ToLocation()) );	
			
		}
		
		[WebMethod(MessageName="Unpick2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol Unpick(System.String partRequestDetailIDNum, Protocols.LocationProtocol location, System.String[] serialNumbers)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.Unpick(partRequestDetailIDNum, location.ToLocation(), serialNumbers) );	
			
		}
		
		[WebMethod(MessageName="Unpick3")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol Unpick(System.String partRequestDetailIDNum, Protocols.LocationProtocol location, System.Boolean useTransitions)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.Unpick(partRequestDetailIDNum, location.ToLocation(), useTransitions) );	
			
		}
		
		[WebMethod(MessageName="Unpick4")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol Unpick(System.String partRequestDetailIDNum, Protocols.LocationProtocol location, System.Boolean useTransitions, System.String[] serialNumbers)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.Unpick(partRequestDetailIDNum, location.ToLocation(), useTransitions, serialNumbers) );	
			
		}
		
		[WebMethod(MessageName="Unpick5")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol Unpick(Protocols.Logistics.UnpickSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.UnpickSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.UnpickSetup(setupParam.PartRequestDetailIDNum, setupParam.Location.ToLocation());
					break;
				case 1:
					setup = new FChoice.Toolkits.Clarify.Logistics.UnpickSetup(setupParam.PartRequestDetailIDNum, setupParam.Location.ToLocation(), setupParam.SerialNumbers);
					break;
				case 2:
					setup = new FChoice.Toolkits.Clarify.Logistics.UnpickSetup(setupParam.PartRequestDetailIDNum, setupParam.Location.ToLocation(), setupParam.UseTransitions);
					break;
				case 3:
					setup = new FChoice.Toolkits.Clarify.Logistics.UnpickSetup(setupParam.PartRequestDetailIDNum, setupParam.Location.ToLocation(), setupParam.UseTransitions, setupParam.SerialNumbers);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartRequestDetailIDNum = setupParam.PartRequestDetailIDNum;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UseGood = setupParam.UseGood;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.UnpickDate = setupParam.UnpickDate;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.SerialNumbers = setupParam.SerialNumbers;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.UseTransitions = setupParam.UseTransitions;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setupParam.Location = new Protocols.LocationProtocol(); setupParam.Location.IsPrimaryBinSuggestion = setup.Location.IsPrimaryBinSuggestion; setupParam.Location.LocationName = setup.Location.LocationName; setupParam.Location.BinName = setup.Location.BinName;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.Unpick(setup) );
			
		}
		
		[WebMethod(MessageName="BackorderPartRequest")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol BackorderPartRequest(System.String partRequestDetailIDNum, System.DateTime expectedDate, System.Int32 quantity)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.BackorderPartRequest(partRequestDetailIDNum, expectedDate, quantity) );	
			
		}
		
		[WebMethod(MessageName="BackorderPartRequest2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol BackorderPartRequest(System.String partRequestDetailIDNum, System.DateTime expectedDate, System.String serialNumber)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.BackorderPartRequest(partRequestDetailIDNum, expectedDate, serialNumber) );	
			
		}
		
		[WebMethod(MessageName="BackorderPartRequest3")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol BackorderPartRequest(System.String partRequestDetailIDNum, System.DateTime expectedDate, System.Boolean useTransitions, System.Int32 quantity)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.BackorderPartRequest(partRequestDetailIDNum, expectedDate, useTransitions, quantity) );	
			
		}
		
		[WebMethod(MessageName="BackorderPartRequest4")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol BackorderPartRequest(System.String partRequestDetailIDNum, System.DateTime expectedDate, System.Boolean useTransitions, System.String serialNumber)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.BackorderPartRequest(partRequestDetailIDNum, expectedDate, useTransitions, serialNumber) );	
			
		}
		
		[WebMethod(MessageName="BackorderPartRequest5")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol BackorderPartRequest(Protocols.Logistics.BackorderPartRequestSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.BackorderPartRequestSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.BackorderPartRequestSetup(setupParam.PartRequestDetailIDNum, setupParam.ExpectedDate, setupParam.Quantity);
					break;
				case 1:
					setup = new FChoice.Toolkits.Clarify.Logistics.BackorderPartRequestSetup(setupParam.PartRequestDetailIDNum, setupParam.ExpectedDate, setupParam.SerialNumber);
					break;
				case 2:
					setup = new FChoice.Toolkits.Clarify.Logistics.BackorderPartRequestSetup(setupParam.PartRequestDetailIDNum, setupParam.ExpectedDate, setupParam.UseTransitions, setupParam.Quantity);
					break;
				case 3:
					setup = new FChoice.Toolkits.Clarify.Logistics.BackorderPartRequestSetup(setupParam.PartRequestDetailIDNum, setupParam.ExpectedDate, setupParam.UseTransitions, setupParam.SerialNumber);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartRequestDetailIDNum = setupParam.PartRequestDetailIDNum;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Quantity = setupParam.Quantity;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.FromGood = setupParam.FromGood;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.ToGood = setupParam.ToGood;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.SerialNumber = setupParam.SerialNumber;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.NewStatus = setupParam.NewStatus;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.ExpectedDate = setupParam.ExpectedDate;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				setup.UseTransitions = setupParam.UseTransitions;			
			}
				
			if( Global.IsPropertyDirty(262144, setupParam.DirtyFieldFlags) )
			{
				setupParam.ToLocation = new Protocols.LocationProtocol(); setupParam.ToLocation.IsPrimaryBinSuggestion = setup.ToLocation.IsPrimaryBinSuggestion; setupParam.ToLocation.LocationName = setup.ToLocation.LocationName; setupParam.ToLocation.BinName = setup.ToLocation.BinName;			
			}
				
			if( Global.IsPropertyDirty(524288, setupParam.DirtyFieldFlags) )
			{
				setupParam.FromLocation = new Protocols.LocationProtocol(); setupParam.FromLocation.IsPrimaryBinSuggestion = setup.FromLocation.IsPrimaryBinSuggestion; setupParam.FromLocation.LocationName = setup.FromLocation.LocationName; setupParam.FromLocation.BinName = setup.FromLocation.BinName;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.BackorderPartRequest(setup) );
			
		}
		
		[WebMethod(MessageName="FulfillPartRequest")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol FulfillPartRequest(System.String partRequestDetailIDNum, System.Int32 quantity)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.FulfillPartRequest(partRequestDetailIDNum, quantity) );	
			
		}
		
		[WebMethod(MessageName="FulfillPartRequest2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol FulfillPartRequest(System.String partRequestDetailIDNum, System.String serialNumber)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.FulfillPartRequest(partRequestDetailIDNum, serialNumber) );	
			
		}
		
		[WebMethod(MessageName="FulfillPartRequest3")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol FulfillPartRequest(System.String partRequestDetailIDNum, System.Boolean useTransitions, System.Int32 quantity)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.FulfillPartRequest(partRequestDetailIDNum, useTransitions, quantity) );	
			
		}
		
		[WebMethod(MessageName="FulfillPartRequest4")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol FulfillPartRequest(System.String partRequestDetailIDNum, System.Boolean useTransitions, System.String serialNumber)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.FulfillPartRequest(partRequestDetailIDNum, useTransitions, serialNumber) );	
			
		}
		
		[WebMethod(MessageName="FulfillPartRequest5")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol FulfillPartRequest(Protocols.Logistics.FulfillPartRequestSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.FulfillPartRequestSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.FulfillPartRequestSetup(setupParam.PartRequestDetailIDNum, setupParam.Quantity);
					break;
				case 1:
					setup = new FChoice.Toolkits.Clarify.Logistics.FulfillPartRequestSetup(setupParam.PartRequestDetailIDNum, setupParam.SerialNumber);
					break;
				case 2:
					setup = new FChoice.Toolkits.Clarify.Logistics.FulfillPartRequestSetup(setupParam.PartRequestDetailIDNum, setupParam.UseTransitions, setupParam.Quantity);
					break;
				case 3:
					setup = new FChoice.Toolkits.Clarify.Logistics.FulfillPartRequestSetup(setupParam.PartRequestDetailIDNum, setupParam.UseTransitions, setupParam.SerialNumber);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartRequestDetailIDNum = setupParam.PartRequestDetailIDNum;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Quantity = setupParam.Quantity;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.FromGood = setupParam.FromGood;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.ToGood = setupParam.ToGood;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.SerialNumber = setupParam.SerialNumber;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.NewStatus = setupParam.NewStatus;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.FulfillDate = setupParam.FulfillDate;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				setup.UseTransitions = setupParam.UseTransitions;			
			}
				
			if( Global.IsPropertyDirty(262144, setupParam.DirtyFieldFlags) )
			{
				setupParam.ToLocation = new Protocols.LocationProtocol(); setupParam.ToLocation.IsPrimaryBinSuggestion = setup.ToLocation.IsPrimaryBinSuggestion; setupParam.ToLocation.LocationName = setup.ToLocation.LocationName; setupParam.ToLocation.BinName = setup.ToLocation.BinName;			
			}
				
			if( Global.IsPropertyDirty(524288, setupParam.DirtyFieldFlags) )
			{
				setupParam.FromLocation = new Protocols.LocationProtocol(); setupParam.FromLocation.IsPrimaryBinSuggestion = setup.FromLocation.IsPrimaryBinSuggestion; setupParam.FromLocation.LocationName = setup.FromLocation.LocationName; setupParam.FromLocation.BinName = setup.FromLocation.BinName;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.FulfillPartRequest(setup) );
			
		}
		
		[WebMethod(MessageName="ReceivePartRequest")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReceivePartRequest(System.String partRequestDetailIDNum, System.Int32 quantity, Protocols.LocationProtocol toLocation)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ReceivePartRequest(partRequestDetailIDNum, quantity, toLocation.ToLocation()) );	
			
		}
		
		[WebMethod(MessageName="ReceivePartRequest2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReceivePartRequest(System.String partRequestDetailIDNum, System.String serialNumber, Protocols.LocationProtocol toLocation)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ReceivePartRequest(partRequestDetailIDNum, serialNumber, toLocation.ToLocation()) );	
			
		}
		
		[WebMethod(MessageName="ReceivePartRequest3")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReceivePartRequest(System.String partRequestDetailIDNum, System.Int32 quantity, Protocols.LocationProtocol toLocation, System.Boolean useTransitions)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ReceivePartRequest(partRequestDetailIDNum, quantity, toLocation.ToLocation(), useTransitions) );	
			
		}
		
		[WebMethod(MessageName="ReceivePartRequest4")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReceivePartRequest(System.String partRequestDetailIDNum, System.String serialNumber, Protocols.LocationProtocol toLocation, System.Boolean useTransitions)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ReceivePartRequest(partRequestDetailIDNum, serialNumber, toLocation.ToLocation(), useTransitions) );	
			
		}
		
		[WebMethod(MessageName="ReceivePartRequest5")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReceivePartRequest(Protocols.Logistics.ReceivePartRequestSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.ReceivePartRequestSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.ReceivePartRequestSetup(setupParam.PartRequestDetailIDNum, setupParam.Quantity, setupParam.ToLocation.ToLocation());
					break;
				case 1:
					setup = new FChoice.Toolkits.Clarify.Logistics.ReceivePartRequestSetup(setupParam.PartRequestDetailIDNum, setupParam.SerialNumber, setupParam.ToLocation.ToLocation());
					break;
				case 2:
					setup = new FChoice.Toolkits.Clarify.Logistics.ReceivePartRequestSetup(setupParam.PartRequestDetailIDNum, setupParam.Quantity, setupParam.ToLocation.ToLocation(), setupParam.UseTransitions);
					break;
				case 3:
					setup = new FChoice.Toolkits.Clarify.Logistics.ReceivePartRequestSetup(setupParam.PartRequestDetailIDNum, setupParam.SerialNumber, setupParam.ToLocation.ToLocation(), setupParam.UseTransitions);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartRequestDetailIDNum = setupParam.PartRequestDetailIDNum;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.FromGood = setupParam.FromGood;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.ToGood = setupParam.ToGood;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.Quantity = setupParam.Quantity;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.SerialNumber = setupParam.SerialNumber;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.CarrierName = setupParam.CarrierName;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.WaybillName = setupParam.WaybillName;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.PossibleDamage = setupParam.PossibleDamage;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.NotProperlyPacked = setupParam.NotProperlyPacked;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.RouteToTest = setupParam.RouteToTest;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(262144, setupParam.DirtyFieldFlags) )
			{
				setup.ReceiveDate = setupParam.ReceiveDate;			
			}
				
			if( Global.IsPropertyDirty(524288, setupParam.DirtyFieldFlags) )
			{
				setup.AutoClose = setupParam.AutoClose;			
			}
				
			if( Global.IsPropertyDirty(1048576, setupParam.DirtyFieldFlags) )
			{
				setup.UseTransitions = setupParam.UseTransitions;			
			}
				
			if( Global.IsPropertyDirty(2097152, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(4194304, setupParam.DirtyFieldFlags) )
			{
				setupParam.ToLocation = new Protocols.LocationProtocol(); setupParam.ToLocation.IsPrimaryBinSuggestion = setup.ToLocation.IsPrimaryBinSuggestion; setupParam.ToLocation.LocationName = setup.ToLocation.LocationName; setupParam.ToLocation.BinName = setup.ToLocation.BinName;			
			}
				
			if( Global.IsPropertyDirty(8388608, setupParam.DirtyFieldFlags) )
			{
				setupParam.FromLocation = new Protocols.LocationProtocol(); setupParam.FromLocation.IsPrimaryBinSuggestion = setup.FromLocation.IsPrimaryBinSuggestion; setupParam.FromLocation.LocationName = setup.FromLocation.LocationName; setupParam.FromLocation.BinName = setup.FromLocation.BinName;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ReceivePartRequest(setup) );
			
		}
		
		[WebMethod(MessageName="SetLogisticsTransition")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol SetLogisticsTransition(FChoice.Toolkits.Clarify.PartRequestType partRequestType, FChoice.Toolkits.Clarify.PartRequestCondition startCondition, FChoice.Toolkits.Clarify.PartRequestCondition endCondition, System.String[] privilegeClasses)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.SetLogisticsTransition(partRequestType, startCondition, endCondition, privilegeClasses) );	
			
		}
		
		[WebMethod(MessageName="SetLogisticsTransition2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol SetLogisticsTransition(Protocols.Logistics.SetLogisticsTransitionSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit toolkit = new FChoice.Toolkits.Clarify.Logistics.LogisticsToolkit( session );
			FChoice.Toolkits.Clarify.Logistics.SetLogisticsTransitionSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Logistics.SetLogisticsTransitionSetup(setupParam.PartRequestType, setupParam.StartCondition, setupParam.EndCondition, setupParam.PrivilegeClasses);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartRequestType = setupParam.PartRequestType;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.StartCondition = setupParam.StartCondition;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.EndCondition = setupParam.EndCondition;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.PrivilegeClasses = setupParam.PrivilegeClasses;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.SetLogisticsTransition(setup) );
			
		}
		
	}
}
