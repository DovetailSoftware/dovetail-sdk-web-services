<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="assembly" Type="System.String" Description="The assembly to reflect" %>
<%@ Property Name="className" Type="System.String" Description="Class to reflect" %>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Reflection" %>


<%@ Assembly Name="FChoice.Toolkits.Clarify" %>
<%@ Import Namespace="FChoice.Toolkits.Clarify" %>

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
#if !NOWEBSERVICES
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Web;
using System.Web.Services;

using FChoice.Toolkits.Clarify;
<%
Hashtable toolkitResults = new Hashtable();
Assembly assem = Assembly.LoadFrom( assembly );

Type[] types = assem.GetTypes();

foreach(Type t in types)
{
	if( t.Name == className )
	{
%>
using WSProxies = FChoice.WebServices.Clarify.Client.Proxies.<%=WebServiceCodeGen.ConvertToBaseName(t.Name)%>;
namespace FChoice.Toolkits.Clarify.<%=WebServiceCodeGen.ConvertToBaseName(t.Name)%>
{
	internal class <%=t.Name%>WSWrapper
	{
		public <%=t.Name%>WSWrapper(string sessionToken, string url)
		{
			this.wsToolkit = new WSProxies.<%=t.Name%>WS();

			this.wsToolkit.Url = url;
			this.wsToolkit.AuthenticationHeaderValue = new WSProxies.AuthenticationHeader();
			this.wsToolkit.AuthenticationHeaderValue.SessionID = sessionToken;
		}
		
		private WSProxies.<%=t.Name%>WS wsToolkit;
		
<%
		MethodInfo[] methods = t.GetMethods() ;
		foreach(MethodInfo m in methods)
		{
			if( m.ReturnType.Name.EndsWith("Result") && !toolkitResults.ContainsKey(m.ReturnType.Name) )
				toolkitResults.Add(m.ReturnType.Name, m.ReturnType);
			
			if( WebServiceCodeGen.IsCodeGenMethod(m) && WebServiceCodeGen.IsSetupOverload(m) )
			{
				ParameterInfo[] parameters = m.GetParameters();
				foreach(ParameterInfo p in parameters)
				{
%>
		#region <%=m.Name%>
		public <%=m.ReturnType.Name%>  <%=m.Name%>( <%=p.ParameterType.Name%> setup )
		{
			WSProxies.<%=p.ParameterType.Name%>WS setupWS = new WSProxies.<%=p.ParameterType.Name%>WS();
			
<%
					int propertyCount = 0;
					PropertyInfo[] properties = p.ParameterType.GetProperties();
					foreach(PropertyInfo prop in properties)
					{
%>
			<%=WebServiceCodeGen.GetFullConvertToWSExpression(prop.PropertyType, prop.Name, "setupWS", "setup")%>
<%
						propertyCount++;			
					}
%>

			setupWS.ConstructorCue = setup.ConstructorCue;
			setupWS.DirtyFieldFlags = setup.DirtyFieldFlags;
			
			return ConvertTo<%=m.ReturnType.Name%>( this.wsToolkit.<%=m.Name%>( setupWS ) );
		
		}
		#endregion
		
<%			
				}
			}
		}
		
		if(t.Name != "DepotRepairToolkit")
		{
%>
		private static WSProxies.AdditionalField[] ConvertToAdditionalFieldsWS(AdditionalFields addFields)
		{
			FChoice.Foundation.Clarify.Compatibility.IFCList fields = addFields.GetFieldList();
			FChoice.Foundation.Clarify.Compatibility.IFCList types = addFields.GetTypeList();
			FChoice.Foundation.Clarify.Compatibility.IFCList vals = addFields.GetValList();

			WSProxies.AdditionalField[] newFields = new WSProxies.AdditionalField[fields.Count];

			for(short i = 0; i < fields.Count; i++)
			{
				newFields[i] = new WSProxies.AdditionalField();
				newFields[i].FieldName = fields.ItemByIndex(i).ToString();
				newFields[i].FieldType = (WSProxies.AdditionalFieldType)Enum.Parse(typeof(WSProxies.AdditionalFieldType), types.ItemByIndex(i).ToString(), true );
				newFields[i].FieldValue = vals.ItemByIndex(i).ToString();

			}

			return newFields;
		}
<%
		}
%>		
		
		private static object ConvertToEnumWS(string val, Type type)
		{
			return Enum.Parse( Type.GetType( "WSProxies." + type.Name ), val, true );
		}
		
<%		
		if(t.Name == "LogisticsToolkit")
		{
%>
		private static WSProxies.Location ConvertToLocationWS(Location location)
		{
			WSProxies.Location newLocation = new WSProxies.Location();
			
			newLocation.IsPrimaryBinSuggestion = location.IsPrimaryBinSuggestion;
			newLocation.LocationName = location.LocationName;
			newLocation.BinName = location.BinName;
			
			return newLocation;
		}
		
		private static WSProxies.Location[] ConvertToLocationsWS(LocationCollection locations)
		{
			WSProxies.Location[] newLocations = new WSProxies.Location[locations.Count];
			
			for(int i = 0; i < locations.Count; i++)
			{
				newLocations[i] = new WSProxies.Location();
				
				newLocations[i].IsPrimaryBinSuggestion = locations[i].IsPrimaryBinSuggestion;
				newLocations[i].LocationName = locations[i].LocationName;
				newLocations[i].BinName = locations[i].BinName;
			
			}
			
			return newLocations;
		}		
<%
		}
%>		


<%		
		if(t.Name == "SupportToolkit")
		{
%>
		private static WSProxies.CaseTimeAndExpensesWS ConvertToCaseTimeAndExpensesWS(CaseTimeAndExpenses totals)
		{
			WSProxies.CaseTimeAndExpensesWS newTotals = new WSProxies.CaseTimeAndExpensesWS();
			
			newTotals.TotalPhoneTime = totals.TotalPhoneTime.Seconds;
			newTotals.TotalActualPhoneTime = totals.TotalActualPhoneTime.Seconds;
			newTotals.CasePhoneTime = totals.CasePhoneTime.Seconds;
			newTotals.CaseActualPhoneTime = totals.CaseActualPhoneTime.Seconds;
			newTotals.TotalResearchTime = totals.TotalResearchTime.Seconds;
			newTotals.TotalActualResearchTime = totals.TotalActualResearchTime.Seconds;
			newTotals.CaseResearchTime = totals.CaseResearchTime.Seconds;
			newTotals.CaseActualResearchTime = totals.CaseActualResearchTime.Seconds;
			newTotals.TotalNonBillableTime = totals.TotalNonBillableTime.Seconds;
			newTotals.CaseNonBillableTime = totals.CaseNonBillableTime.Seconds;
			newTotals.TotalBillableTime = totals.TotalBillableTime.Seconds;
			newTotals.CaseBillableTime = totals.CaseBillableTime.Seconds;
			newTotals.TotalNonBillableExpenses = totals.TotalNonBillableExpenses;
			newTotals.CaseNonBillableExpenses = totals.CaseNonBillableExpenses;
			newTotals.TotalBillableExpenses = totals.TotalBillableExpenses;
			newTotals.CaseBillableExpenses = totals.CaseBillableExpenses;
			
			return newTotals;
		}
		
		private static CaseTimeAndExpenses ConvertToCaseTimeAndExpenses(WSProxies.CaseTimeAndExpensesWS totals)
		{
			CaseTimeAndExpenses newTotals = new CaseTimeAndExpenses();
			
			newTotals.TotalPhoneTime = TimeSpan.FromSeconds(totals.TotalPhoneTime);
			newTotals.TotalActualPhoneTime = TimeSpan.FromSeconds(totals.TotalActualPhoneTime);
			newTotals.CasePhoneTime = TimeSpan.FromSeconds(totals.CasePhoneTime);
			newTotals.CaseActualPhoneTime = TimeSpan.FromSeconds(totals.CaseActualPhoneTime);
			newTotals.TotalResearchTime = TimeSpan.FromSeconds(totals.TotalResearchTime);
			newTotals.TotalActualResearchTime = TimeSpan.FromSeconds(totals.TotalActualResearchTime);
			newTotals.CaseResearchTime = TimeSpan.FromSeconds(totals.CaseResearchTime);
			newTotals.CaseActualResearchTime = TimeSpan.FromSeconds(totals.CaseActualResearchTime);
			newTotals.TotalNonBillableTime = TimeSpan.FromSeconds(totals.TotalNonBillableTime);
			newTotals.CaseNonBillableTime = TimeSpan.FromSeconds(totals.CaseNonBillableTime);
			newTotals.TotalBillableTime = TimeSpan.FromSeconds(totals.TotalBillableTime);
			newTotals.CaseBillableTime = TimeSpan.FromSeconds(totals.CaseBillableTime);
			newTotals.TotalNonBillableExpenses = totals.TotalNonBillableExpenses;
			newTotals.CaseNonBillableExpenses = totals.CaseNonBillableExpenses;
			newTotals.TotalBillableExpenses = totals.TotalBillableExpenses;
			newTotals.CaseBillableExpenses = totals.CaseBillableExpenses;
			
			return newTotals;
		}
		
		private static SubcaseTimeAndExpenses ConvertToSubcaseTimeAndExpenses(WSProxies.SubcaseTimeAndExpensesWS totals)
		{
			SubcaseTimeAndExpenses newTotals = new SubcaseTimeAndExpenses();
			
			newTotals.CapturedPhoneTime = TimeSpan.FromSeconds(totals.CapturedPhoneTime);
			newTotals.CapturedResearchTime = TimeSpan.FromSeconds(totals.CapturedResearchTime);
			newTotals.TotalNonBillableTime = TimeSpan.FromSeconds(totals.TotalNonBillableTime);
			newTotals.TotalBillableTime = TimeSpan.FromSeconds(totals.TotalBillableTime);
			newTotals.TotalNonBillableExpenses = totals.TotalNonBillableExpenses;
			newTotals.TotalBillableExpenses = totals.TotalBillableExpenses;			
			
			return newTotals;
		}		
		
<%
		}
%>				


<%
		foreach(DictionaryEntry result in toolkitResults)
		{
			Type resultType = (Type)result.Value;
%>
		private <%=resultType.Name%> ConvertTo<%=resultType.Name%>( WSProxies.<%=resultType.Name%>WS wsResult )
		{
			<%=resultType.Name%> result = new <%=resultType.Name%>();
			
<%
			foreach(PropertyInfo prop in resultType.GetProperties())
			{%>
			<%=WebServiceCodeGen.GetConvertFullFromWSExpression(prop.PropertyType, prop.Name, "result", "wsResult")%>
			<%}
%>			
						
			return result;
		}
<%			
		}
%>			
	}
}
#endif
<%
	}
}
%>