//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Web;
using System.Web.Services;
using System.Web.Services.Protocols;

using FChoice.Foundation.Clarify;
using FChoice.Foundation.Clarify.Compatibility;
using FChoice.Foundation.Clarify.Compatibility.Toolkits;
using FChoice.Toolkits.Clarify;
using FChoice.WebServices.Clarify;

namespace FChoice.WebServices.Clarify
{
	[SoapRpcService(RoutingStyle=SoapServiceRoutingStyle.SoapAction)]
	[WebService(Description="fcSDK DepotRepairToolkit Web Service", Namespace="http://www.fchoice.com/schemas/FChoice.WebServices.Clarify.DepotRepairToolkitSrv_v1")]
	public class DepotRepairToolkitSrv : System.Web.Services.WebService
	{
	
		public AuthenticationHeader AuthHeader;
		
		[WebMethod(MessageName="ApplyEco")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ApplyEco(System.Int32 demandDetailObjid, System.String ecoHeaderIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ApplyEco(demandDetailObjid, ecoHeaderIDNum) );	
			
		}
		
		[WebMethod(MessageName="ApplyEco2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ApplyEco(Protocols.DepotRepair.ApplyEcoSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			FChoice.Toolkits.Clarify.DepotRepair.ApplyEcoSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.DepotRepair.ApplyEcoSetup(setupParam.DemandDetailObjid, setupParam.EcoHeaderIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.DemandDetailObjid = setupParam.DemandDetailObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.EcoHeaderIDNum = setupParam.EcoHeaderIDNum;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ApplyEco(setup) );
			
		}
		
		[WebMethod(MessageName="UpdateDepotRepairMaterial")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateDepotRepairMaterial(System.Int32 materialLogObjid, FChoice.Toolkits.Clarify.RepairPartDisposition disposition)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateDepotRepairMaterial(materialLogObjid, disposition) );	
			
		}
		
		[WebMethod(MessageName="UpdateDepotRepairMaterial2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateDepotRepairMaterial(Protocols.DepotRepair.UpdateDepotRepairMaterialSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			FChoice.Toolkits.Clarify.DepotRepair.UpdateDepotRepairMaterialSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.DepotRepair.UpdateDepotRepairMaterialSetup(setupParam.MaterialLogObjid, setupParam.Disposition);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.MaterialLogObjid = setupParam.MaterialLogObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.RepairCode = setupParam.RepairCode;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.FailureCode = setupParam.FailureCode;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevisionObjid = setupParam.PartRevisionObjid;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.IsBillable = setupParam.IsBillable;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.BillTo = setupParam.BillTo;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.WorkCenter = setupParam.WorkCenter;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.Disposition = setupParam.Disposition;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.ReferenceDesignator = setupParam.ReferenceDesignator;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.TransactionID = setupParam.TransactionID;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateDepotRepairMaterial(setup) );
			
		}
		
//		[WebMethod(MessageName="UpdateDepotRepairLabor")]
//		[SoapHeader("AuthHeader")]
//		public Protocols.ToolkitResultProtocol UpdateDepotRepairLabor(System.Int32 timeLogObjid)
//		{
//			ClarifySession session = Global.GetSession( AuthHeader );
//			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
//			
//			return new Protocols.ToolkitResultProt2ocol( toolkit.UpdateDepotRepairLabor(timeLogObjid) );	
//			
//		}
		
		[WebMethod(MessageName="UpdateDepotRepairLabor2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateDepotRepairLabor(Protocols.DepotRepair.UpdateDepotRepairLaborSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			FChoice.Toolkits.Clarify.DepotRepair.UpdateDepotRepairLaborSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.DepotRepair.UpdateDepotRepairLaborSetup(setupParam.TimeLogObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.TimeLogObjid = setupParam.TimeLogObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.LaborType = setupParam.LaborType;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.StartDate = setupParam.StartDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Duration = TimeSpan.FromSeconds(setupParam.Duration);			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.IsBillable = setupParam.IsBillable;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.BillTo = setupParam.BillTo;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.WorkCenter = setupParam.WorkCenter;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.LaborRate = setupParam.LaborRate;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateDepotRepairLabor(setup) );
			
		}
		
		[WebMethod(MessageName="DeleteDepotRepairMaterial")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteDepotRepairMaterial(System.Int32 materialLogObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteDepotRepairMaterial(materialLogObjid) );	
			
		}
		
		[WebMethod(MessageName="DeleteDepotRepairMaterial2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteDepotRepairMaterial(Protocols.DepotRepair.DeleteDepotRepairMaterialSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			FChoice.Toolkits.Clarify.DepotRepair.DeleteDepotRepairMaterialSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.DepotRepair.DeleteDepotRepairMaterialSetup(setupParam.MaterialLogObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.MaterialLogObjid = setupParam.MaterialLogObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteDepotRepairMaterial(setup) );
			
		}
		
		[WebMethod(MessageName="DeleteDepotRepairLabor")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteDepotRepairLabor(System.Int32 timeLogObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteDepotRepairLabor(timeLogObjid) );	
			
		}
		
		[WebMethod(MessageName="DeleteDepotRepairLabor2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteDepotRepairLabor(Protocols.DepotRepair.DeleteDepotRepairLaborSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			FChoice.Toolkits.Clarify.DepotRepair.DeleteDepotRepairLaborSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.DepotRepair.DeleteDepotRepairLaborSetup(setupParam.TimeLogObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.TimeLogObjid = setupParam.TimeLogObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteDepotRepairLabor(setup) );
			
		}
		
		[WebMethod(MessageName="CreateDepotRepairMaterial")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateDepotRepairMaterial(System.Int32 demandDetailObjid, System.Int32 partRevisionObjid, FChoice.Toolkits.Clarify.RepairPartDisposition disposition)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateDepotRepairMaterial(demandDetailObjid, partRevisionObjid, disposition) );	
			
		}
		
		[WebMethod(MessageName="CreateDepotRepairMaterial2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateDepotRepairMaterial(Protocols.DepotRepair.CreateDepotRepairMaterialSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			FChoice.Toolkits.Clarify.DepotRepair.CreateDepotRepairMaterialSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.DepotRepair.CreateDepotRepairMaterialSetup(setupParam.DemandDetailObjid, setupParam.PartRevisionObjid, setupParam.Disposition);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.DemandDetailObjid = setupParam.DemandDetailObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.RepairCode = setupParam.RepairCode;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.FailureCode = setupParam.FailureCode;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevisionObjid = setupParam.PartRevisionObjid;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.IsBillable = setupParam.IsBillable;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.BillTo = setupParam.BillTo;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.WorkCenter = setupParam.WorkCenter;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.Disposition = setupParam.Disposition;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.ReferenceDesignator = setupParam.ReferenceDesignator;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.TransactionID = setupParam.TransactionID;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateDepotRepairMaterial(setup) );
			
		}
		
		[WebMethod(MessageName="CreateDepotRepairLabor")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateDepotRepairLabor(System.Int32 demandDetailObjid, System.DateTime startDate, System.Int32 duration)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateDepotRepairLabor(demandDetailObjid, startDate, TimeSpan.FromSeconds(duration)) );	
			
		}
		
		[WebMethod(MessageName="CreateDepotRepairLabor2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateDepotRepairLabor(Protocols.DepotRepair.CreateDepotRepairLaborSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			FChoice.Toolkits.Clarify.DepotRepair.CreateDepotRepairLaborSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.DepotRepair.CreateDepotRepairLaborSetup(setupParam.DemandDetailObjid, setupParam.StartDate, TimeSpan.FromSeconds(setupParam.Duration));
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.DemandDetailObjid = setupParam.DemandDetailObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.LaborType = setupParam.LaborType;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.StartDate = setupParam.StartDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Duration = TimeSpan.FromSeconds(setupParam.Duration);			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.IsBillable = setupParam.IsBillable;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.BillTo = setupParam.BillTo;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.WorkCenter = setupParam.WorkCenter;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.LaborRate = setupParam.LaborRate;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateDepotRepairLabor(setup) );
			
		}
		
//		[WebMethod(MessageName="UpdateEcoLaborDetail")]
//		[SoapHeader("AuthHeader")]
//		public Protocols.ToolkitResultProtocol UpdateEcoLaborDetail(System.Int32 ecoDetailObjid)
//		{
//			ClarifySession session = Global.GetSession( AuthHeader );
//			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
//			
//			return new Protocols.ToolkitResultProtocol( toolkit.UpdateEcoLaborDetail(ecoDetailObjid) );	
//			
//		}
		
		[WebMethod(MessageName="UpdateEcoLaborDetail2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateEcoLaborDetail(Protocols.DepotRepair.UpdateEcoLaborDetailSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			FChoice.Toolkits.Clarify.DepotRepair.UpdateEcoLaborDetailSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.DepotRepair.UpdateEcoLaborDetailSetup(setupParam.EcoDetailObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.EcoDetailObjid = setupParam.EcoDetailObjid;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.IsRequired = setupParam.IsRequired;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.LaborType = setupParam.LaborType;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ElapsedTime = TimeSpan.FromSeconds(setupParam.ElapsedTime);			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.EcoHeaderIDNum = setupParam.EcoHeaderIDNum;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateEcoLaborDetail(setup) );
			
		}
		
		[WebMethod(MessageName="UpdateEcoMaterialDetail")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateEcoMaterialDetail(System.Int32 ecoDetailObjid, System.Int32 partRevisionObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateEcoMaterialDetail(ecoDetailObjid, partRevisionObjid) );	
			
		}
		
		[WebMethod(MessageName="UpdateEcoMaterialDetail2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateEcoMaterialDetail(Protocols.DepotRepair.UpdateEcoMaterialDetailSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			FChoice.Toolkits.Clarify.DepotRepair.UpdateEcoMaterialDetailSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.DepotRepair.UpdateEcoMaterialDetailSetup(setupParam.EcoDetailObjid, setupParam.PartRevisionObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.EcoDetailObjid = setupParam.EcoDetailObjid;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.IsRequired = setupParam.IsRequired;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ElapsedTime = TimeSpan.FromSeconds(setupParam.ElapsedTime);			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Location = setupParam.Location;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.EcoHeaderIDNum = setupParam.EcoHeaderIDNum;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevisionObjid = setupParam.PartRevisionObjid;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateEcoMaterialDetail(setup) );
			
		}
		
		[WebMethod(MessageName="DeleteEcoDetail")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteEcoDetail(System.Int32 ecoDetailObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteEcoDetail(ecoDetailObjid) );	
			
		}
		
		[WebMethod(MessageName="DeleteEcoDetail2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteEcoDetail(Protocols.DepotRepair.DeleteEcoDetailSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			FChoice.Toolkits.Clarify.DepotRepair.DeleteEcoDetailSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.DepotRepair.DeleteEcoDetailSetup(setupParam.EcoDetailObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.EcoDetailObjid = setupParam.EcoDetailObjid;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteEcoDetail(setup) );
			
		}
		
		[WebMethod(MessageName="CreateEcoMaterialDetail")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateEcoMaterialDetail(System.Boolean isRequired, System.String ecoHeaderIDNum, System.Int32 partRevisionObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateEcoMaterialDetail(isRequired, ecoHeaderIDNum, partRevisionObjid) );	
			
		}
		
		[WebMethod(MessageName="CreateEcoMaterialDetail2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateEcoMaterialDetail(Protocols.DepotRepair.CreateEcoMaterialDetailSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			FChoice.Toolkits.Clarify.DepotRepair.CreateEcoMaterialDetailSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.DepotRepair.CreateEcoMaterialDetailSetup(setupParam.IsRequired, setupParam.EcoHeaderIDNum, setupParam.PartRevisionObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.IsRequired = setupParam.IsRequired;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.Location = setupParam.Location;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.EcoHeaderIDNum = setupParam.EcoHeaderIDNum;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevisionObjid = setupParam.PartRevisionObjid;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateEcoMaterialDetail(setup) );
			
		}
		
		[WebMethod(MessageName="CreateEcoLaborDetail")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateEcoLaborDetail(System.Boolean isRequired, System.Int32 elapsedTime, System.String ecoHeaderIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateEcoLaborDetail(isRequired, TimeSpan.FromSeconds(elapsedTime), ecoHeaderIDNum) );	
			
		}
		
		[WebMethod(MessageName="CreateEcoLaborDetail2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateEcoLaborDetail(Protocols.DepotRepair.CreateEcoLaborDetailSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			FChoice.Toolkits.Clarify.DepotRepair.CreateEcoLaborDetailSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.DepotRepair.CreateEcoLaborDetailSetup(setupParam.IsRequired, TimeSpan.FromSeconds(setupParam.ElapsedTime), setupParam.EcoHeaderIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.IsRequired = setupParam.IsRequired;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.LaborType = setupParam.LaborType;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ElapsedTime = TimeSpan.FromSeconds(setupParam.ElapsedTime);			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.EcoHeaderIDNum = setupParam.EcoHeaderIDNum;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevisionObjid = setupParam.PartRevisionObjid;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateEcoLaborDetail(setup) );
			
		}
		
		[WebMethod(MessageName="DeleteEcoItem")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteEcoItem(System.Int32 ecoItemObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteEcoItem(ecoItemObjid) );	
			
		}
		
		[WebMethod(MessageName="DeleteEcoItem2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteEcoItem(Protocols.DepotRepair.DeleteEcoItemSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			FChoice.Toolkits.Clarify.DepotRepair.DeleteEcoItemSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.DepotRepair.DeleteEcoItemSetup(setupParam.EcoItemObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.EcoItemObjid = setupParam.EcoItemObjid;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteEcoItem(setup) );
			
		}
		
		[WebMethod(MessageName="UpdateEcoItem")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateEcoItem(System.Int32 ecoItemObjid, System.Boolean isActive, System.String ecoHeaderIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateEcoItem(ecoItemObjid, isActive, ecoHeaderIDNum) );	
			
		}
		
		[WebMethod(MessageName="UpdateEcoItem2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateEcoItem(Protocols.DepotRepair.UpdateEcoItemSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			FChoice.Toolkits.Clarify.DepotRepair.UpdateEcoItemSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.DepotRepair.UpdateEcoItemSetup(setupParam.EcoItemObjid, setupParam.IsActive, setupParam.EcoHeaderIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.EcoItemObjid = setupParam.EcoItemObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.AppliesTo = setupParam.AppliesTo;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.IsActive = setupParam.IsActive;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.EcoHeaderIDNum = setupParam.EcoHeaderIDNum;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ApplyPartRevisionObjid = setupParam.ApplyPartRevisionObjid;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ResultPartRevisionObjid = setupParam.ResultPartRevisionObjid;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateEcoItem(setup) );
			
		}
		
		[WebMethod(MessageName="CreateEcoItem")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateEcoItem(FChoice.Toolkits.Clarify.EcoItemAppliesTo appliesTo, System.Boolean isActive, System.String ecoHeaderIDNum, System.Int32 applyPartRevisionObjid, System.Int32 resultPartRevisionObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateEcoItem(appliesTo, isActive, ecoHeaderIDNum, applyPartRevisionObjid, resultPartRevisionObjid) );	
			
		}
		
		[WebMethod(MessageName="CreateEcoItem2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateEcoItem(Protocols.DepotRepair.CreateEcoItemSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			FChoice.Toolkits.Clarify.DepotRepair.CreateEcoItemSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.DepotRepair.CreateEcoItemSetup(setupParam.AppliesTo, setupParam.IsActive, setupParam.EcoHeaderIDNum, setupParam.ApplyPartRevisionObjid, setupParam.ResultPartRevisionObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.AppliesTo = setupParam.AppliesTo;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.IsActive = setupParam.IsActive;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.EcoHeaderIDNum = setupParam.EcoHeaderIDNum;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ApplyPartRevisionObjid = setupParam.ApplyPartRevisionObjid;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ResultPartRevisionObjid = setupParam.ResultPartRevisionObjid;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateEcoItem(setup) );
			
		}
		
		[WebMethod(MessageName="CreateEcoHeader")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateEcoHeader(System.DateTime startDate, System.DateTime endDate)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateEcoHeader(startDate, endDate) );	
			
		}
		
		[WebMethod(MessageName="CreateEcoHeader2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateEcoHeader(Protocols.DepotRepair.CreateEcoHeaderSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit toolkit = new FChoice.Toolkits.Clarify.DepotRepair.DepotRepairToolkit( session );
			FChoice.Toolkits.Clarify.DepotRepair.CreateEcoHeaderSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.DepotRepair.CreateEcoHeaderSetup(setupParam.StartDate, setupParam.EndDate);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.EcoTitle = setupParam.EcoTitle;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.EcoType = setupParam.EcoType;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.EffectType = setupParam.EffectType;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.StartDate = setupParam.StartDate;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.EndDate = setupParam.EndDate;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateEcoHeader(setup) );
			
		}
		
	}
}
