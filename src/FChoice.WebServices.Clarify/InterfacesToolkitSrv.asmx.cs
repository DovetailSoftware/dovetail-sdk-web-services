//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Web;
using System.Web.Services;
using System.Web.Services.Protocols;

using FChoice.Foundation.Clarify;
using FChoice.Foundation.Clarify.Compatibility;
using FChoice.Foundation.Clarify.Compatibility.Toolkits;
using FChoice.Toolkits.Clarify;
using FChoice.WebServices.Clarify;

namespace FChoice.WebServices.Clarify
{
	[SoapRpcService(RoutingStyle=SoapServiceRoutingStyle.SoapAction)]
	[WebService(Description="fcSDK InterfacesToolkit Web Service", Namespace="http://www.fchoice.com/schemas/FChoice.WebServices.Clarify.InterfacesToolkitSrv_v1")]
	public class InterfacesToolkitSrv : System.Web.Services.WebService
	{
	
		public AuthenticationHeader AuthHeader;
		
		[WebMethod(MessageName="MoveSitePartToSite")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveSitePartToSite(System.Int32 sitePartObjid, System.String parentSiteIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.MoveSitePartToSite(sitePartObjid, parentSiteIDNum) );	
			
		}
		
		[WebMethod(MessageName="MoveSitePartToSite2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveSitePartToSite(Protocols.Interfaces.MoveSitePartToSiteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.MoveSitePartToSiteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.MoveSitePartToSiteSetup(setupParam.SitePartObjid, setupParam.ParentSiteIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SitePartObjid = setupParam.SitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.MoveDate = setupParam.MoveDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ParentSiteIDNum = setupParam.ParentSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.AddActivityLog = setupParam.AddActivityLog;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.InstallAndMove = setupParam.InstallAndMove;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.MoveSitePartToSite(setup) );
			
		}
		
		[WebMethod(MessageName="MoveSitePartToBin")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveSitePartToBin(System.Int32 sitePartObjid, System.Int32 parentBinObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.MoveSitePartToBin(sitePartObjid, parentBinObjid) );	
			
		}
		
		[WebMethod(MessageName="MoveSitePartToBin2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveSitePartToBin(Protocols.Interfaces.MoveSitePartToBinSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.MoveSitePartToBinSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.MoveSitePartToBinSetup(setupParam.SitePartObjid, setupParam.ParentBinObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SitePartObjid = setupParam.SitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.MoveDate = setupParam.MoveDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ParentBinObjid = setupParam.ParentBinObjid;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.AddActivityLog = setupParam.AddActivityLog;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.InstallAndMove = setupParam.InstallAndMove;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.MoveSitePartToBin(setup) );
			
		}
		
		[WebMethod(MessageName="MoveSitePartToPart")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveSitePartToPart(System.Int32 sitePartObjid, System.Int32 parentSitePartObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.MoveSitePartToPart(sitePartObjid, parentSitePartObjid) );	
			
		}
		
		[WebMethod(MessageName="MoveSitePartToPart2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveSitePartToPart(Protocols.Interfaces.MoveSitePartToPartSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.MoveSitePartToPartSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.MoveSitePartToPartSetup(setupParam.SitePartObjid, setupParam.ParentSitePartObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SitePartObjid = setupParam.SitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.MoveDate = setupParam.MoveDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ParentSitePartObjid = setupParam.ParentSitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.AddActivityLog = setupParam.AddActivityLog;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.InstallAndMove = setupParam.InstallAndMove;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.MoveSitePartToPart(setup) );
			
		}
		
		[WebMethod(MessageName="ReinstallSitePartToPart")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReinstallSitePartToPart(System.Int32 sitePartObjid, System.String siteIDNum, System.Int32 parentSitePartObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ReinstallSitePartToPart(sitePartObjid, siteIDNum, parentSitePartObjid) );	
			
		}
		
		[WebMethod(MessageName="ReinstallSitePartToPart2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReinstallSitePartToPart(Protocols.Interfaces.ReinstallSitePartToPartSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.ReinstallSitePartToPartSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.ReinstallSitePartToPartSetup(setupParam.SitePartObjid, setupParam.SiteIDNum, setupParam.ParentSitePartObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SitePartObjid = setupParam.SitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ParentSitePartObjid = setupParam.ParentSitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ReinstallDate = setupParam.ReinstallDate;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.AddActivityLog = setupParam.AddActivityLog;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.UseInstall = setupParam.UseInstall;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ReinstallSitePartToPart(setup) );
			
		}
		
		[WebMethod(MessageName="ReinstallSitePartToBin")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReinstallSitePartToBin(System.Int32 sitePartObjid, System.String siteIDNum, System.Int32 parentBinObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ReinstallSitePartToBin(sitePartObjid, siteIDNum, parentBinObjid) );	
			
		}
		
		[WebMethod(MessageName="ReinstallSitePartToBin2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReinstallSitePartToBin(Protocols.Interfaces.ReinstallSitePartToBinSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.ReinstallSitePartToBinSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.ReinstallSitePartToBinSetup(setupParam.SitePartObjid, setupParam.SiteIDNum, setupParam.ParentBinObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SitePartObjid = setupParam.SitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ParentBinObjid = setupParam.ParentBinObjid;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ReinstallDate = setupParam.ReinstallDate;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.AddActivityLog = setupParam.AddActivityLog;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.UseInstall = setupParam.UseInstall;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ReinstallSitePartToBin(setup) );
			
		}
		
		[WebMethod(MessageName="ReinstallSitePartToSite")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReinstallSitePartToSite(System.Int32 sitePartObjid, System.String siteIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ReinstallSitePartToSite(sitePartObjid, siteIDNum) );	
			
		}
		
		[WebMethod(MessageName="ReinstallSitePartToSite2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ReinstallSitePartToSite(Protocols.Interfaces.ReinstallSitePartToSiteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.ReinstallSitePartToSiteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.ReinstallSitePartToSiteSetup(setupParam.SitePartObjid, setupParam.SiteIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SitePartObjid = setupParam.SitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ReinstallDate = setupParam.ReinstallDate;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.AddActivityLog = setupParam.AddActivityLog;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.UseInstall = setupParam.UseInstall;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ReinstallSitePartToSite(setup) );
			
		}
		
		[WebMethod(MessageName="CreateProductBin")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateProductBin(System.String binName, System.String siteIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateProductBin(binName, siteIDNum) );	
			
		}
		
		[WebMethod(MessageName="CreateProductBin2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateProductBin(Protocols.Interfaces.CreateProductBinSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.CreateProductBinSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.CreateProductBinSetup(setupParam.BinName, setupParam.SiteIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.BinName = setupParam.BinName;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ParentBinObjid = setupParam.ParentBinObjid;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.PrimarySupportEmployeeObjid = setupParam.PrimarySupportEmployeeObjid;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.SecondarySupportEmployeeObjid = setupParam.SecondarySupportEmployeeObjid;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateProductBin(setup) );
			
		}
		
//		[WebMethod(MessageName="UpdateProductBin")]
//		[SoapHeader("AuthHeader")]
//		public Protocols.ToolkitResultProtocol UpdateProductBin(System.Int32 binObjid)
//		{
//			ClarifySession session = Global.GetSession( AuthHeader );
//			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
//			
//			return new Protocols.ToolkitResultProtocol( toolkit.UpdateProductBin(binObjid) );	
//			
//		}
		
		[WebMethod(MessageName="UpdateProductBin2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateProductBin(Protocols.Interfaces.UpdateProductBinSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.UpdateProductBinSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.UpdateProductBinSetup(setupParam.BinObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.BinObjid = setupParam.BinObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.BinName = setupParam.BinName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.PrimarySupportEmployeeObjid = setupParam.PrimarySupportEmployeeObjid;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.SecondarySupportEmployeeObjid = setupParam.SecondarySupportEmployeeObjid;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.UpdateDate = setupParam.UpdateDate;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateProductBin(setup) );
			
		}
		
		[WebMethod(MessageName="DeleteProductBin")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteProductBin(System.Int32 binObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteProductBin(binObjid) );	
			
		}
		
		[WebMethod(MessageName="DeleteProductBin2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeleteProductBin(Protocols.Interfaces.DeleteProductBinSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.DeleteProductBinSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.DeleteProductBinSetup(setupParam.BinObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.BinObjid = setupParam.BinObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.DeleteDate = setupParam.DeleteDate;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DeleteProductBin(setup) );
			
		}
		
		[WebMethod(MessageName="DeinstallSitePart")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeinstallSitePart(System.Int32 sitePartObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DeinstallSitePart(sitePartObjid) );	
			
		}
		
		[WebMethod(MessageName="DeinstallSitePart2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DeinstallSitePart(Protocols.Interfaces.DeinstallSitePartSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.DeinstallSitePartSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.DeinstallSitePartSetup(setupParam.SitePartObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SitePartObjid = setupParam.SitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.DeinstallDate = setupParam.DeinstallDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UseRemove = setupParam.UseRemove;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DeinstallSitePart(setup) );
			
		}
		
		[WebMethod(MessageName="CreateInteraction")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateInteraction(System.String contactFirstName, System.String contactLastName, System.String contactPhone, System.Int32 duration)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateInteraction(contactFirstName, contactLastName, contactPhone, TimeSpan.FromSeconds(duration)) );	
			
		}
		
		[WebMethod(MessageName="CreateInteraction2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateInteraction(Protocols.Interfaces.CreateInteractionSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.CreateInteractionSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.CreateInteractionSetup(setupParam.ContactFirstName, setupParam.ContactLastName, setupParam.ContactPhone, TimeSpan.FromSeconds(setupParam.Duration));
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.Title = setupParam.Title;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ContactPhone = setupParam.ContactPhone;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ZipCode = setupParam.ZipCode;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Reason1 = setupParam.Reason1;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.Reason2 = setupParam.Reason2;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.ProductName = setupParam.ProductName;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.Direction = setupParam.Direction;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.InteractionType = setupParam.InteractionType;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.Origin = setupParam.Origin;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.IsDoneInOne = setupParam.IsDoneInOne;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.Result = setupParam.Result;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.FeeBased = setupParam.FeeBased;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.PayOption = setupParam.PayOption;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.LeadSource = setupParam.LeadSource;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				setup.StartDate = setupParam.StartDate;			
			}
				
			if( Global.IsPropertyDirty(262144, setupParam.DirtyFieldFlags) )
			{
				setup.Duration = TimeSpan.FromSeconds(setupParam.Duration);			
			}
				
			if( Global.IsPropertyDirty(524288, setupParam.DirtyFieldFlags) )
			{
				setup.WaitDuration = TimeSpan.FromSeconds(setupParam.WaitDuration);			
			}
				
			if( Global.IsPropertyDirty(1048576, setupParam.DirtyFieldFlags) )
			{
				setup.EnteredDuration = TimeSpan.FromSeconds(setupParam.EnteredDuration);			
			}
				
			if( Global.IsPropertyDirty(2097152, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(4194304, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(8388608, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateInteraction(setup) );
			
		}
		
		[WebMethod(MessageName="CreateEmployee")]
		[SoapHeader("AuthHeader")]
		public Protocols.Interfaces.CreateEmployeeResultProtocol CreateEmployee(System.String firstName, System.String lastName, System.String loginName, System.String password, System.String siteIDNum, System.String email, System.String onlinePrivilegeClass)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.Interfaces.CreateEmployeeResultProtocol( toolkit.CreateEmployee(firstName, lastName, loginName, password, siteIDNum, email, onlinePrivilegeClass) );	
			
		}
		
		[WebMethod(MessageName="CreateEmployee2")]
		[SoapHeader("AuthHeader")]
		public Protocols.Interfaces.CreateEmployeeResultProtocol CreateEmployee(Protocols.Interfaces.CreateEmployeeSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.CreateEmployeeSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.CreateEmployeeSetup(setupParam.FirstName, setupParam.LastName, setupParam.LoginName, setupParam.Password, setupParam.SiteIDNum, setupParam.Email, setupParam.OnlinePrivilegeClass);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.FirstName = setupParam.FirstName;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.LastName = setupParam.LastName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.LoginName = setupParam.LoginName;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Password = setupParam.Password;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.Email = setupParam.Email;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Phone = setupParam.Phone;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.Pager = setupParam.Pager;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.OnlinePrivilegeClass = setupParam.OnlinePrivilegeClass;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.OfflinePrivilegeClass = setupParam.OfflinePrivilegeClass;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.EmployeeIdentifier = setupParam.EmployeeIdentifier;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.IsActive = setupParam.IsActive;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.AllowProxy = setupParam.AllowProxy;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.StartDate = setupParam.StartDate;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.Supervisor = setupParam.Supervisor;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.WorkGroup = setupParam.WorkGroup;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.WorkGroupStartDate = setupParam.WorkGroupStartDate;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				setup.LaborRate = setupParam.LaborRate;			
			}
				
			if( Global.IsPropertyDirty(262144, setupParam.DirtyFieldFlags) )
			{
				setup.IsSupervisor = setupParam.IsSupervisor;			
			}
				
			if( Global.IsPropertyDirty(524288, setupParam.DirtyFieldFlags) )
			{
				setup.IsFieldEngineer = setupParam.IsFieldEngineer;			
			}
				
			if( Global.IsPropertyDirty(1048576, setupParam.DirtyFieldFlags) )
			{
				setup.NormalBusinessHoursHigh = setupParam.NormalBusinessHoursHigh;			
			}
				
			if( Global.IsPropertyDirty(2097152, setupParam.DirtyFieldFlags) )
			{
				setup.NormalBusinessHoursMed = setupParam.NormalBusinessHoursMed;			
			}
				
			if( Global.IsPropertyDirty(4194304, setupParam.DirtyFieldFlags) )
			{
				setup.NormalBusinessHoursLow = setupParam.NormalBusinessHoursLow;			
			}
				
			if( Global.IsPropertyDirty(8388608, setupParam.DirtyFieldFlags) )
			{
				setup.AfterBusinessHoursHigh = setupParam.AfterBusinessHoursHigh;			
			}
				
			if( Global.IsPropertyDirty(16777216, setupParam.DirtyFieldFlags) )
			{
				setup.AfterBusinessHoursMed = setupParam.AfterBusinessHoursMed;			
			}
				
			if( Global.IsPropertyDirty(33554432, setupParam.DirtyFieldFlags) )
			{
				setup.AfterBusinessHoursLow = setupParam.AfterBusinessHoursLow;			
			}
				
			if( Global.IsPropertyDirty(67108864, setupParam.DirtyFieldFlags) )
			{
				setup.DefaultWipBinTitle = setupParam.DefaultWipBinTitle;			
			}
				
			if( Global.IsPropertyDirty(134217728, setupParam.DirtyFieldFlags) )
			{
				setup.ResourceConfig = setupParam.ResourceConfig;			
			}
				
			if( Global.IsPropertyDirty(268435456, setupParam.DirtyFieldFlags) )
			{
				setup.DefaultTablespace = setupParam.DefaultTablespace;			
			}
				
			if( Global.IsPropertyDirty(536870912, setupParam.DirtyFieldFlags) )
			{
				setup.TempTablespace = setupParam.TempTablespace;			
			}
				
			if( Global.IsPropertyDirty(1073741824, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.Interfaces.CreateEmployeeResultProtocol( toolkit.CreateEmployee(setup) );
			
		}
		
		[WebMethod(MessageName="YankSolution")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol YankSolution(System.String solutionIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.YankSolution(solutionIDNum) );	
			
		}
		
		[WebMethod(MessageName="YankSolution2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol YankSolution(Protocols.Interfaces.YankSolutionSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.YankSolutionSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.YankSolutionSetup(setupParam.SolutionIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SolutionIDNum = setupParam.SolutionIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.YankDate = setupParam.YankDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.YankSolution(setup) );
			
		}
		
		[WebMethod(MessageName="RejectSolution")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RejectSolution(System.String solutionIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.RejectSolution(solutionIDNum) );	
			
		}
		
		[WebMethod(MessageName="RejectSolution2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RejectSolution(Protocols.Interfaces.RejectSolutionSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.RejectSolutionSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.RejectSolutionSetup(setupParam.SolutionIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SolutionIDNum = setupParam.SolutionIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.RejectDate = setupParam.RejectDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.RejectSolution(setup) );
			
		}
		
		[WebMethod(MessageName="MoveSolution")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveSolution(System.String solutionIDNum, System.String newWipBin)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.MoveSolution(solutionIDNum, newWipBin) );	
			
		}
		
		[WebMethod(MessageName="MoveSolution2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol MoveSolution(Protocols.Interfaces.MoveSolutionSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.MoveSolutionSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.MoveSolutionSetup(setupParam.SolutionIDNum, setupParam.NewWipBin);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SolutionIDNum = setupParam.SolutionIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewWipBin = setupParam.NewWipBin;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.MoveSolution(setup) );
			
		}
		
		[WebMethod(MessageName="ForwardSolution")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ForwardSolution(System.String solutionIDNum, System.String newQueue)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.ForwardSolution(solutionIDNum, newQueue) );	
			
		}
		
		[WebMethod(MessageName="ForwardSolution2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol ForwardSolution(Protocols.Interfaces.ForwardSolutionSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.ForwardSolutionSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.ForwardSolutionSetup(setupParam.SolutionIDNum, setupParam.NewQueue);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SolutionIDNum = setupParam.SolutionIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewQueue = setupParam.NewQueue;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ForwardDate = setupParam.ForwardDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.ForwardSolution(setup) );
			
		}
		
		[WebMethod(MessageName="DispatchSolution")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DispatchSolution(System.String solutionIDNum, System.String queue)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.DispatchSolution(solutionIDNum, queue) );	
			
		}
		
		[WebMethod(MessageName="DispatchSolution2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol DispatchSolution(Protocols.Interfaces.DispatchSolutionSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.DispatchSolutionSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.DispatchSolutionSetup(setupParam.SolutionIDNum, setupParam.Queue);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SolutionIDNum = setupParam.SolutionIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Queue = setupParam.Queue;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.DispatchDate = setupParam.DispatchDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.DispatchSolution(setup) );
			
		}
		
		[WebMethod(MessageName="AssignSolution")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AssignSolution(System.String solutionIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AssignSolution(solutionIDNum) );	
			
		}
		
		[WebMethod(MessageName="AssignSolution2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AssignSolution(Protocols.Interfaces.AssignSolutionSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.AssignSolutionSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.AssignSolutionSetup(setupParam.SolutionIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SolutionIDNum = setupParam.SolutionIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewUser = setupParam.NewUser;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.AssignDate = setupParam.AssignDate;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AssignSolution(setup) );
			
		}
		
		[WebMethod(MessageName="AcceptSolution")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AcceptSolution(System.String solutionIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AcceptSolution(solutionIDNum) );	
			
		}
		
		[WebMethod(MessageName="AcceptSolution2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AcceptSolution(Protocols.Interfaces.AcceptSolutionSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.AcceptSolutionSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.AcceptSolutionSetup(setupParam.SolutionIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SolutionIDNum = setupParam.SolutionIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.AcceptDate = setupParam.AcceptDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.WipBin = setupParam.WipBin;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AcceptSolution(setup) );
			
		}
		
		[WebMethod(MessageName="UpdateSitePart")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateSitePart(System.Int32 sitePartObjid, System.Int32 quantity)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateSitePart(sitePartObjid, quantity) );	
			
		}
		
		[WebMethod(MessageName="UpdateSitePart2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateSitePart(System.Int32 sitePartObjid, System.String serialNumber)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateSitePart(sitePartObjid, serialNumber) );	
			
		}
		
		[WebMethod(MessageName="UpdateSitePart3")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateSitePart(Protocols.Interfaces.UpdateSitePartSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.UpdateSitePartSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.UpdateSitePartSetup(setupParam.SitePartObjid, setupParam.Quantity);
					break;
				case 1:
					setup = new FChoice.Toolkits.Clarify.Interfaces.UpdateSitePartSetup(setupParam.SitePartObjid, setupParam.SerialNumber);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SitePartObjid = setupParam.SitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.InstanceName = setupParam.InstanceName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.SerialNumber = setupParam.SerialNumber;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.InvoiceNumber = setupParam.InvoiceNumber;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ShipDate = setupParam.ShipDate;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.InstallDate = setupParam.InstallDate;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.WarrantyDate = setupParam.WarrantyDate;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.Quantity = setupParam.Quantity;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.PartStatus = setupParam.PartStatus;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.Comments = setupParam.Comments;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.ServiceEndDate = setupParam.ServiceEndDate;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.AddActivityLog = setupParam.AddActivityLog;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateSitePart(setup) );
			
		}
		
		[WebMethod(MessageName="InstallSitePartToPart")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol InstallSitePartToPart(System.String siteIDNum, System.Int32 parentSitePartObjid, System.String partNumber, System.String partRevision, System.String partDomain, System.Int32 quantity)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.InstallSitePartToPart(siteIDNum, parentSitePartObjid, partNumber, partRevision, partDomain, quantity) );	
			
		}
		
		[WebMethod(MessageName="InstallSitePartToPart2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol InstallSitePartToPart(System.String siteIDNum, System.String partNumber, System.String partRevision, System.String partDomain, System.String serialNumber)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.InstallSitePartToPart(siteIDNum, partNumber, partRevision, partDomain, serialNumber) );	
			
		}
		
		[WebMethod(MessageName="InstallSitePartToPart3")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol InstallSitePartToPart(Protocols.Interfaces.InstallSitePartToPartSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.InstallSitePartToPartSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.InstallSitePartToPartSetup(setupParam.SiteIDNum, setupParam.ParentSitePartObjid, setupParam.PartNumber, setupParam.PartRevision, setupParam.PartDomain, setupParam.Quantity);
					break;
				case 1:
					setup = new FChoice.Toolkits.Clarify.Interfaces.InstallSitePartToPartSetup(setupParam.SiteIDNum, setupParam.PartNumber, setupParam.PartRevision, setupParam.PartDomain, setupParam.SerialNumber);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.Quantity = setupParam.Quantity;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.SerialNumber = setupParam.SerialNumber;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.ParentSitePartObjid = setupParam.ParentSitePartObjid;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.InstanceName = setupParam.InstanceName;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.Comments = setupParam.Comments;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.PartStatus = setupParam.PartStatus;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.InvoiceNumber = setupParam.InvoiceNumber;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.InstallDate = setupParam.InstallDate;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.ShipDate = setupParam.ShipDate;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.AddActivityLog = setupParam.AddActivityLog;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.InstallSitePartToPart(setup) );
			
		}
		
		[WebMethod(MessageName="InstallSitePartToBin")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol InstallSitePartToBin(System.String siteIDNum, System.Int32 parentBinObjid, System.String partNumber, System.String partRevision, System.String partDomain, System.Int32 quantity)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.InstallSitePartToBin(siteIDNum, parentBinObjid, partNumber, partRevision, partDomain, quantity) );	
			
		}
		
		[WebMethod(MessageName="InstallSitePartToBin2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol InstallSitePartToBin(System.String siteIDNum, System.String partNumber, System.String partRevision, System.String partDomain, System.String serialNumber)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.InstallSitePartToBin(siteIDNum, partNumber, partRevision, partDomain, serialNumber) );	
			
		}
		
		[WebMethod(MessageName="InstallSitePartToBin3")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol InstallSitePartToBin(Protocols.Interfaces.InstallSitePartToBinSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.InstallSitePartToBinSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.InstallSitePartToBinSetup(setupParam.SiteIDNum, setupParam.ParentBinObjid, setupParam.PartNumber, setupParam.PartRevision, setupParam.PartDomain, setupParam.Quantity);
					break;
				case 1:
					setup = new FChoice.Toolkits.Clarify.Interfaces.InstallSitePartToBinSetup(setupParam.SiteIDNum, setupParam.PartNumber, setupParam.PartRevision, setupParam.PartDomain, setupParam.SerialNumber);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.Quantity = setupParam.Quantity;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.SerialNumber = setupParam.SerialNumber;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.ParentBinObjid = setupParam.ParentBinObjid;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.InstanceName = setupParam.InstanceName;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.Comments = setupParam.Comments;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.PartStatus = setupParam.PartStatus;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.InvoiceNumber = setupParam.InvoiceNumber;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.InstallDate = setupParam.InstallDate;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.ShipDate = setupParam.ShipDate;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.AddActivityLog = setupParam.AddActivityLog;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.InstallSitePartToBin(setup) );
			
		}
		
		[WebMethod(MessageName="InstallSitePartToSite")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol InstallSitePartToSite(System.String siteIDNum, System.String partNumber, System.String partRevision, System.String partDomain, System.Int32 quantity)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.InstallSitePartToSite(siteIDNum, partNumber, partRevision, partDomain, quantity) );	
			
		}
		
		[WebMethod(MessageName="InstallSitePartToSite2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol InstallSitePartToSite(System.String siteIDNum, System.String partNumber, System.String partRevision, System.String partDomain, System.String serialNumber)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.InstallSitePartToSite(siteIDNum, partNumber, partRevision, partDomain, serialNumber) );	
			
		}
		
		[WebMethod(MessageName="InstallSitePartToSite3")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol InstallSitePartToSite(Protocols.Interfaces.InstallSitePartToSiteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.InstallSitePartToSiteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.InstallSitePartToSiteSetup(setupParam.SiteIDNum, setupParam.PartNumber, setupParam.PartRevision, setupParam.PartDomain, setupParam.Quantity);
					break;
				case 1:
					setup = new FChoice.Toolkits.Clarify.Interfaces.InstallSitePartToSiteSetup(setupParam.SiteIDNum, setupParam.PartNumber, setupParam.PartRevision, setupParam.PartDomain, setupParam.SerialNumber);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.Quantity = setupParam.Quantity;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.SerialNumber = setupParam.SerialNumber;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.InstanceName = setupParam.InstanceName;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.Comments = setupParam.Comments;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.PartStatus = setupParam.PartStatus;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.InvoiceNumber = setupParam.InvoiceNumber;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.InstallDate = setupParam.InstallDate;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.ShipDate = setupParam.ShipDate;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.AddActivityLog = setupParam.AddActivityLog;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.InstallSitePartToSite(setup) );
			
		}
		
		[WebMethod(MessageName="AddContactToContract")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddContactToContract(System.String contractIDNum, System.String contactFirstName, System.String contactLastName, System.String contactPhone, System.String siteIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AddContactToContract(contractIDNum, contactFirstName, contactLastName, contactPhone, siteIDNum) );	
			
		}
		
		[WebMethod(MessageName="AddContactToContract2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddContactToContract(Protocols.Interfaces.AddContactToContractSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.AddContactToContractSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.AddContactToContractSetup(setupParam.ContractIDNum, setupParam.ContactFirstName, setupParam.ContactLastName, setupParam.ContactPhone, setupParam.SiteIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ContractIDNum = setupParam.ContractIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ContactFirstName = setupParam.ContactFirstName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ContactLastName = setupParam.ContactLastName;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ContactPhone = setupParam.ContactPhone;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AddContactToContract(setup) );
			
		}
		
		[WebMethod(MessageName="AddSitePartToContract")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddSitePartToContract(System.String contractIDNum, System.String siteIDNum, System.Int32 sitePartObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AddSitePartToContract(contractIDNum, siteIDNum, sitePartObjid) );	
			
		}
		
		[WebMethod(MessageName="AddSitePartToContract2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddSitePartToContract(Protocols.Interfaces.AddSitePartToContractSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.AddSitePartToContractSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.AddSitePartToContractSetup(setupParam.ContractIDNum, setupParam.SiteIDNum, setupParam.SitePartObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ContractIDNum = setupParam.ContractIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.SitePartObjid = setupParam.SitePartObjid;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AddSitePartToContract(setup) );
			
		}
		
		[WebMethod(MessageName="AddSiteToContract")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddSiteToContract(System.String contractIDNum, System.String siteIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AddSiteToContract(contractIDNum, siteIDNum) );	
			
		}
		
		[WebMethod(MessageName="AddSiteToContract2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddSiteToContract(Protocols.Interfaces.AddSiteToContractSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.AddSiteToContractSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.AddSiteToContractSetup(setupParam.ContractIDNum, setupParam.SiteIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ContractIDNum = setupParam.ContractIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AddSiteToContract(setup) );
			
		}
		
		[WebMethod(MessageName="CreateContract")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateContract()
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateContract() );	
			
		}
		
		[WebMethod(MessageName="CreateContract2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateContract(Protocols.Interfaces.CreateContractSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.CreateContractSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.CreateContractSetup();
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ContractType = setupParam.ContractType;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.PONumber = setupParam.PONumber;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.PayOptions = setupParam.PayOptions;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.PhoneResponseDuration = TimeSpan.FromSeconds(setupParam.PhoneResponseDuration);			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.OnsiteResponseDuration = TimeSpan.FromSeconds(setupParam.OnsiteResponseDuration);			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.BusinessHoursForPM = setupParam.BusinessHoursForPM;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.StartDate = setupParam.StartDate;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.ExpireDate = setupParam.ExpireDate;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.UnitType = setupParam.UnitType;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.UnitsPurchased = setupParam.UnitsPurchased;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.UnitsUsed = setupParam.UnitsUsed;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.UnitsAvailable = setupParam.UnitsAvailable;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.UseSpecialConsiderations = setupParam.UseSpecialConsiderations;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateContract(setup) );
			
		}
		
//		[WebMethod(MessageName="UpdateContract")]
//		[SoapHeader("AuthHeader")]
//		public Protocols.ToolkitResultProtocol UpdateContract(System.String contractIDNum)
//		{
//			ClarifySession session = Global.GetSession( AuthHeader );
//			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
//			
//			return new Protocols.ToolkitResultProtocol( toolkit.UpdateContract(contractIDNum) );	
//			
//		}
		
		[WebMethod(MessageName="UpdateContract2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateContract(Protocols.Interfaces.UpdateContractSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.UpdateContractSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.UpdateContractSetup(setupParam.ContractIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ContractIDNum = setupParam.ContractIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ContractType = setupParam.ContractType;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.PONumber = setupParam.PONumber;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.PayOptions = setupParam.PayOptions;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.PhoneResponseDuration = TimeSpan.FromSeconds(setupParam.PhoneResponseDuration);			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.OnsiteResponseDuration = TimeSpan.FromSeconds(setupParam.OnsiteResponseDuration);			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.BusinessHoursForPM = setupParam.BusinessHoursForPM;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.StartDate = setupParam.StartDate;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.ExpireDate = setupParam.ExpireDate;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.UnitType = setupParam.UnitType;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.UnitsPurchased = setupParam.UnitsPurchased;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.UnitsUsed = setupParam.UnitsUsed;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.UnitsAvailable = setupParam.UnitsAvailable;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.UseSpecialConsiderations = setupParam.UseSpecialConsiderations;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateContract(setup) );
			
		}
		
		[WebMethod(MessageName="UpdatePartRevision")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdatePartRevision(System.String partNumber, System.String partDomain, System.String partRevision)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.UpdatePartRevision(partNumber, partDomain, partRevision) );	
			
		}
		
		[WebMethod(MessageName="UpdatePartRevision2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdatePartRevision(Protocols.Interfaces.UpdatePartRevisionSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.UpdatePartRevisionSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.UpdatePartRevisionSetup(setupParam.PartNumber, setupParam.PartDomain, setupParam.PartRevision);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ReplacePartNumber = setupParam.ReplacePartNumber;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ReplacePartDomain = setupParam.ReplacePartDomain;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ReplacePartRevision = setupParam.ReplacePartRevision;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.ReplaceDate = setupParam.ReplaceDate;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.NewPartRevision = setupParam.NewPartRevision;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdatePartRevision(setup) );
			
		}
		
		[WebMethod(MessageName="CreatePartRevision")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreatePartRevision(System.String partNumber, System.String partDomain, System.String partRevision)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreatePartRevision(partNumber, partDomain, partRevision) );	
			
		}
		
		[WebMethod(MessageName="CreatePartRevision2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreatePartRevision(Protocols.Interfaces.CreatePartRevisionSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.CreatePartRevisionSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.CreatePartRevisionSetup(setupParam.PartNumber, setupParam.PartDomain, setupParam.PartRevision);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ReplacePartNumber = setupParam.ReplacePartNumber;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ReplacePartDomain = setupParam.ReplacePartDomain;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ReplacePartRevision = setupParam.ReplacePartRevision;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.ReplaceDate = setupParam.ReplaceDate;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreatePartRevision(setup) );
			
		}
		
		[WebMethod(MessageName="UpdatePart")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdatePart(System.String partNumber, System.String partDomain, System.Int32 warrantyDays)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.UpdatePart(partNumber, partDomain, warrantyDays) );	
			
		}
		
		[WebMethod(MessageName="UpdatePart2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdatePart(Protocols.Interfaces.UpdatePartSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.UpdatePartSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.UpdatePartSetup(setupParam.PartNumber, setupParam.PartDomain, setupParam.WarrantyDays);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ModelNumber = setupParam.ModelNumber;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.WarrantyDays = setupParam.WarrantyDays;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.WarrantyStartOnShipment = setupParam.WarrantyStartOnShipment;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.UnitMeasure = setupParam.UnitMeasure;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.Family = setupParam.Family;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.Line = setupParam.Line;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.RepairType = setupParam.RepairType;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.PartType = setupParam.PartType;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.Weight = setupParam.Weight;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.Dimension = setupParam.Dimension;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.PartClass = setupParam.PartClass;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdatePart(setup) );
			
		}
		
		[WebMethod(MessageName="CreatePart")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreatePart(System.String partNumber, System.String partDomain, System.Int32 warrantyDays, FChoice.Toolkits.Clarify.PartRepairType repairType)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreatePart(partNumber, partDomain, warrantyDays, repairType) );	
			
		}
		
		[WebMethod(MessageName="CreatePart2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreatePart(Protocols.Interfaces.CreatePartSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.CreatePartSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.CreatePartSetup(setupParam.PartNumber, setupParam.PartDomain, setupParam.WarrantyDays, setupParam.RepairType);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Notes = setupParam.Notes;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ModelNumber = setupParam.ModelNumber;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.WarrantyDays = setupParam.WarrantyDays;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.WarrantyStartOnShipment = setupParam.WarrantyStartOnShipment;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.UnitMeasure = setupParam.UnitMeasure;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.Family = setupParam.Family;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.Line = setupParam.Line;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.RepairType = setupParam.RepairType;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.PartType = setupParam.PartType;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.Weight = setupParam.Weight;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.Dimension = setupParam.Dimension;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.PartClass = setupParam.PartClass;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreatePart(setup) );
			
		}
		
		[WebMethod(MessageName="AddUserToQueue")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddUserToQueue(System.String queue, System.String userName)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AddUserToQueue(queue, userName) );	
			
		}
		
		[WebMethod(MessageName="AddUserToQueue2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddUserToQueue(Protocols.Interfaces.AddUserToQueueSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.AddUserToQueueSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.AddUserToQueueSetup(setupParam.Queue, setupParam.UserName);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.Queue = setupParam.Queue;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.IsSupervisor = setupParam.IsSupervisor;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AddUserToQueue(setup) );
			
		}
		
		[WebMethod(MessageName="CreateQueue")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateQueue(System.String title, System.Boolean allowCR, System.Boolean allowCase, System.Boolean allowContract, System.Boolean allowDialogue, System.Boolean allowDemandDetail, System.Boolean allowJob, System.Boolean allowOpportunity, System.Boolean allowSolution, System.Boolean allowSubcase, System.Boolean allowActionItem)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateQueue(title, allowCR, allowCase, allowContract, allowDialogue, allowDemandDetail, allowJob, allowOpportunity, allowSolution, allowSubcase, allowActionItem) );	
			
		}
		
		[WebMethod(MessageName="CreateQueue2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateQueue(Protocols.Interfaces.CreateQueueSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.CreateQueueSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.CreateQueueSetup(setupParam.Title, setupParam.AllowCR, setupParam.AllowCase, setupParam.AllowContract, setupParam.AllowDialogue, setupParam.AllowDemandDetail, setupParam.AllowJob, setupParam.AllowOpportunity, setupParam.AllowSolution, setupParam.AllowSubcase, setupParam.AllowActionItem);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.Title = setupParam.Title;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.IsPersonal = setupParam.IsPersonal;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.AllowCR = setupParam.AllowCR;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.AllowCase = setupParam.AllowCase;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.AllowContract = setupParam.AllowContract;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.AllowDialogue = setupParam.AllowDialogue;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.AllowDemandDetail = setupParam.AllowDemandDetail;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.AllowJob = setupParam.AllowJob;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.AllowOpportunity = setupParam.AllowOpportunity;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.AllowSolution = setupParam.AllowSolution;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.AllowSubcase = setupParam.AllowSubcase;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.AllowActionItem = setupParam.AllowActionItem;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.Supervisor = setupParam.Supervisor;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateQueue(setup) );
			
		}
		
//		[WebMethod(MessageName="UpdateQueue")]
//		[SoapHeader("AuthHeader")]
//		public Protocols.ToolkitResultProtocol UpdateQueue(System.String title)
//		{
//			ClarifySession session = Global.GetSession( AuthHeader );
//			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
//			
//			return new Protocols.ToolkitResultProtocol( toolkit.UpdateQueue(title) );	
//			
//		}
		
		[WebMethod(MessageName="UpdateQueue2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateQueue(Protocols.Interfaces.UpdateQueueSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.UpdateQueueSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.UpdateQueueSetup(setupParam.Title);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.Title = setupParam.Title;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.IsPersonal = setupParam.IsPersonal;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.AllowCR = setupParam.AllowCR;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.AllowCase = setupParam.AllowCase;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.AllowContract = setupParam.AllowContract;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.AllowDialogue = setupParam.AllowDialogue;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.AllowDemandDetail = setupParam.AllowDemandDetail;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.AllowJob = setupParam.AllowJob;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.AllowOpportunity = setupParam.AllowOpportunity;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.AllowSolution = setupParam.AllowSolution;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.AllowSubcase = setupParam.AllowSubcase;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.AllowActionItem = setupParam.AllowActionItem;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.Supervisor = setupParam.Supervisor;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.NewTitle = setupParam.NewTitle;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateQueue(setup) );
			
		}
		
		[WebMethod(MessageName="CreateWipBin")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateWipBin(System.String title)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateWipBin(title) );	
			
		}
		
		[WebMethod(MessageName="CreateWipBin2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateWipBin(Protocols.Interfaces.CreateWipBinSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.CreateWipBinSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.CreateWipBinSetup(setupParam.Title);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.Title = setupParam.Title;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.IsDefaultBin = setupParam.IsDefaultBin;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateWipBin(setup) );
			
		}
		
//		[WebMethod(MessageName="UpdateWipBin")]
//		[SoapHeader("AuthHeader")]
//		public Protocols.ToolkitResultProtocol UpdateWipBin(System.String title)
//		{
//			ClarifySession session = Global.GetSession( AuthHeader );
//			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
//			
//			return new Protocols.ToolkitResultProtocol( toolkit.UpdateWipBin(title) );	
//			
//		}
		
		[WebMethod(MessageName="UpdateWipBin2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateWipBin(Protocols.Interfaces.UpdateWipBinSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.UpdateWipBinSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.UpdateWipBinSetup(setupParam.Title);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.Title = setupParam.Title;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.NewTitle = setupParam.NewTitle;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.IsDefaultBin = setupParam.IsDefaultBin;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateWipBin(setup) );
			
		}
		
		[WebMethod(MessageName="CreateContact")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateContact(System.String firstName, System.String lastName, System.String phone, System.String siteIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateContact(firstName, lastName, phone, siteIDNum) );	
			
		}
		
		[WebMethod(MessageName="CreateContact2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateContact(Protocols.Interfaces.CreateContactSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.CreateContactSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.CreateContactSetup(setupParam.FirstName, setupParam.LastName, setupParam.Phone, setupParam.SiteIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.FirstName = setupParam.FirstName;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.LastName = setupParam.LastName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Phone = setupParam.Phone;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.RoleName = setupParam.RoleName;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.Fax = setupParam.Fax;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Email = setupParam.Email;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.MailStop = setupParam.MailStop;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.Title = setupParam.Title;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.Hours = setupParam.Hours;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.Salutation = setupParam.Salutation;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateContact(setup) );
			
		}
		
		[WebMethod(MessageName="RemoveEmployeeFromAccount")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RemoveEmployeeFromAccount(System.String userName, System.String accountIDNum, System.String roleName)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.RemoveEmployeeFromAccount(userName, accountIDNum, roleName) );	
			
		}
		
		[WebMethod(MessageName="RemoveEmployeeFromAccount2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RemoveEmployeeFromAccount(Protocols.Interfaces.RemoveEmployeeFromAccountSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.RemoveEmployeeFromAccountSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.RemoveEmployeeFromAccountSetup(setupParam.UserName, setupParam.AccountIDNum, setupParam.RoleName);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.AccountIDNum = setupParam.AccountIDNum;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.RoleName = setupParam.RoleName;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.RemoveEmployeeFromAccount(setup) );
			
		}
		
		[WebMethod(MessageName="AddEmployeeToAccount")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddEmployeeToAccount(System.String userName, System.String accountIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AddEmployeeToAccount(userName, accountIDNum) );	
			
		}
		
		[WebMethod(MessageName="AddEmployeeToAccount2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddEmployeeToAccount(Protocols.Interfaces.AddEmployeeToAccountSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.AddEmployeeToAccountSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.AddEmployeeToAccountSetup(setupParam.UserName, setupParam.AccountIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.AccountIDNum = setupParam.AccountIDNum;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.RoleName = setupParam.RoleName;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AddEmployeeToAccount(setup) );
			
		}
		
		[WebMethod(MessageName="RemoveSiteFromAccount")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RemoveSiteFromAccount(System.String siteIDNum, System.String accountIDNum, System.String roleName)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.RemoveSiteFromAccount(siteIDNum, accountIDNum, roleName) );	
			
		}
		
		[WebMethod(MessageName="RemoveSiteFromAccount2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol RemoveSiteFromAccount(Protocols.Interfaces.RemoveSiteFromAccountSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.RemoveSiteFromAccountSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.RemoveSiteFromAccountSetup(setupParam.SiteIDNum, setupParam.AccountIDNum, setupParam.RoleName);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.AccountIDNum = setupParam.AccountIDNum;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.RoleName = setupParam.RoleName;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.RemoveSiteFromAccount(setup) );
			
		}
		
		[WebMethod(MessageName="AddSiteToAccount")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddSiteToAccount(System.String siteIDNum, System.String accountIDNum, System.String roleName)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AddSiteToAccount(siteIDNum, accountIDNum, roleName) );	
			
		}
		
		[WebMethod(MessageName="AddSiteToAccount2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddSiteToAccount(Protocols.Interfaces.AddSiteToAccountSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.AddSiteToAccountSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.AddSiteToAccountSetup(setupParam.SiteIDNum, setupParam.AccountIDNum, setupParam.RoleName);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.AccountIDNum = setupParam.AccountIDNum;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.RoleName = setupParam.RoleName;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AddSiteToAccount(setup) );
			
		}
		
		[WebMethod(MessageName="CreateAccount")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateAccount()
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateAccount() );	
			
		}
		
		[WebMethod(MessageName="CreateAccount2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateAccount(Protocols.Interfaces.CreateAccountSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.CreateAccountSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.CreateAccountSetup();
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.AccountName = setupParam.AccountName;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Territory = setupParam.Territory;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Stock = setupParam.Stock;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.FiscalYear = setupParam.FiscalYear;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.AccountType = setupParam.AccountType;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Size = setupParam.Size;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.Revenue = setupParam.Revenue;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.Ownership = setupParam.Ownership;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.Phone = setupParam.Phone;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.Fax = setupParam.Fax;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.WebSite = setupParam.WebSite;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateAccount(setup) );
			
		}
		
//		[WebMethod(MessageName="UpdateAccount")]
//		[SoapHeader("AuthHeader")]
//		public Protocols.ToolkitResultProtocol UpdateAccount(System.String accountIDNum)
//		{
//			ClarifySession session = Global.GetSession( AuthHeader );
//			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
//			
//			return new Protocols.ToolkitResultProtocol( toolkit.UpdateAccount(accountIDNum) );	
//			
//		}
		
		[WebMethod(MessageName="UpdateAccount2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateAccount(Protocols.Interfaces.UpdateAccountSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.UpdateAccountSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.UpdateAccountSetup(setupParam.AccountIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.AccountName = setupParam.AccountName;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Territory = setupParam.Territory;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Stock = setupParam.Stock;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.FiscalYear = setupParam.FiscalYear;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.AccountType = setupParam.AccountType;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Size = setupParam.Size;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.Revenue = setupParam.Revenue;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.Ownership = setupParam.Ownership;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.Phone = setupParam.Phone;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.Fax = setupParam.Fax;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.WebSite = setupParam.WebSite;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.AccountIDNum = setupParam.AccountIDNum;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateAccount(setup) );
			
		}
		
		[WebMethod(MessageName="UnlinkCRFromSolution")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UnlinkCRFromSolution(System.String crIDNum, System.String solutionIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.UnlinkCRFromSolution(crIDNum, solutionIDNum) );	
			
		}
		
		[WebMethod(MessageName="UnlinkCRFromSolution2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UnlinkCRFromSolution(Protocols.Interfaces.UnlinkCRFromSolutionSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.UnlinkCRFromSolutionSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.UnlinkCRFromSolutionSetup(setupParam.CRIDNum, setupParam.SolutionIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CRIDNum = setupParam.CRIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.SolutionIDNum = setupParam.SolutionIDNum;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.UnlinkDate = setupParam.UnlinkDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UnlinkCRFromSolution(setup) );
			
		}
		
		[WebMethod(MessageName="LinkCRToSolution")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LinkCRToSolution(System.String crIDNum, System.String solutionIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LinkCRToSolution(crIDNum, solutionIDNum) );	
			
		}
		
		[WebMethod(MessageName="LinkCRToSolution2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LinkCRToSolution(Protocols.Interfaces.LinkCRToSolutionSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.LinkCRToSolutionSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.LinkCRToSolutionSetup(setupParam.CRIDNum, setupParam.SolutionIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CRIDNum = setupParam.CRIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.SolutionIDNum = setupParam.SolutionIDNum;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.LinkDate = setupParam.LinkDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.LinkCRToSolution(setup) );
			
		}
		
		[WebMethod(MessageName="UnlinkCaseFromWorkaround")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UnlinkCaseFromWorkaround(System.String caseIDNum)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.UnlinkCaseFromWorkaround(caseIDNum) );	
			
		}
		
		[WebMethod(MessageName="UnlinkCaseFromWorkaround2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UnlinkCaseFromWorkaround(Protocols.Interfaces.UnlinkCaseFromWorkaroundSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.UnlinkCaseFromWorkaroundSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.UnlinkCaseFromWorkaroundSetup(setupParam.CaseIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.UnlinkDate = setupParam.UnlinkDate;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UnlinkCaseFromWorkaround(setup) );
			
		}
		
		[WebMethod(MessageName="LinkCaseToWorkaround")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LinkCaseToWorkaround(System.String caseIDNum, System.Int32 workaroundObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.LinkCaseToWorkaround(caseIDNum, workaroundObjid) );	
			
		}
		
		[WebMethod(MessageName="LinkCaseToWorkaround2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol LinkCaseToWorkaround(Protocols.Interfaces.LinkCaseToWorkaroundSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.LinkCaseToWorkaroundSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.LinkCaseToWorkaroundSetup(setupParam.CaseIDNum, setupParam.WorkaroundObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.CaseIDNum = setupParam.CaseIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.WorkaroundObjid = setupParam.WorkaroundObjid;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.LinkDate = setupParam.LinkDate;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.LinkCaseToWorkaround(setup) );
			
		}
		
		[WebMethod(MessageName="AddWorkaround")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddWorkaround(System.String solutionIDNum, System.String workaround)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AddWorkaround(solutionIDNum, workaround) );	
			
		}
		
		[WebMethod(MessageName="AddWorkaround2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddWorkaround(System.Int32 solutionObjid, System.String workaround)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.AddWorkaround(solutionObjid, workaround) );	
			
		}
		
		[WebMethod(MessageName="AddWorkaround3")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol AddWorkaround(Protocols.Interfaces.AddWorkaroundSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.AddWorkaroundSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.AddWorkaroundSetup(setupParam.SolutionIDNum, setupParam.Workaround);
					break;
				case 1:
					setup = new FChoice.Toolkits.Clarify.Interfaces.AddWorkaroundSetup(setupParam.SolutionObjid, setupParam.Workaround);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SolutionIDNum = setupParam.SolutionIDNum;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.SolutionObjid = setupParam.SolutionObjid;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Workaround = setupParam.Workaround;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.IsPublic = setupParam.IsPublic;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ResolutionCode = setupParam.ResolutionCode;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.AddWorkaround(setup) );
			
		}
		
		[WebMethod(MessageName="CreateSolution")]
		[SoapHeader("AuthHeader")]
		public Protocols.Interfaces.CreateSolutionResultProtocol CreateSolution()
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.Interfaces.CreateSolutionResultProtocol( toolkit.CreateSolution() );	
			
		}
		
		[WebMethod(MessageName="CreateSolution2")]
		[SoapHeader("AuthHeader")]
		public Protocols.Interfaces.CreateSolutionResultProtocol CreateSolution(Protocols.Interfaces.CreateSolutionSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.CreateSolutionSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.CreateSolutionSetup();
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.Title = setupParam.Title;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Description = setupParam.Description;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Workaround = setupParam.Workaround;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.IsPublic = setupParam.IsPublic;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ResolutionCode = setupParam.ResolutionCode;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.Queue = setupParam.Queue;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.CreateDate = setupParam.CreateDate;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.UserName = setupParam.UserName;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.GenerateTimeBombs = setupParam.GenerateTimeBombs;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.Interfaces.CreateSolutionResultProtocol( toolkit.CreateSolution(setup) );
			
		}
		
		[WebMethod(MessageName="UpdatePriceInstance")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdatePriceInstance(System.String partNumber, System.String partDomain, System.String partRevision, System.String priceProgram, System.Int32 pricedQuantity, System.Decimal price, System.DateTime updateDate)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.UpdatePriceInstance(partNumber, partDomain, partRevision, priceProgram, pricedQuantity, price, updateDate) );	
			
		}
		
		[WebMethod(MessageName="UpdatePriceInstance2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdatePriceInstance(Protocols.Interfaces.UpdatePriceInstanceSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.UpdatePriceInstanceSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.UpdatePriceInstanceSetup(setupParam.PartNumber, setupParam.PartDomain, setupParam.PartRevision, setupParam.PriceProgram, setupParam.PricedQuantity, setupParam.Price, setupParam.UpdateDate);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.PriceProgram = setupParam.PriceProgram;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.PricedQuantity = setupParam.PricedQuantity;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.Price = setupParam.Price;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.UpdateDate = setupParam.UpdateDate;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdatePriceInstance(setup) );
			
		}
		
		[WebMethod(MessageName="CreatePriceInstance")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreatePriceInstance(System.String partNumber, System.String partDomain, System.String partRevision, System.String priceProgram, FChoice.Toolkits.Clarify.PriceInstanceType priceType, System.Int32 pricedQuantity, System.Decimal price)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreatePriceInstance(partNumber, partDomain, partRevision, priceProgram, priceType, pricedQuantity, price) );	
			
		}
		
		[WebMethod(MessageName="CreatePriceInstance2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreatePriceInstance(Protocols.Interfaces.CreatePriceInstanceSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.CreatePriceInstanceSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.CreatePriceInstanceSetup(setupParam.PartNumber, setupParam.PartDomain, setupParam.PartRevision, setupParam.PriceProgram, setupParam.PriceType, setupParam.PricedQuantity, setupParam.Price);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.PartNumber = setupParam.PartNumber;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.PartDomain = setupParam.PartDomain;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.PartRevision = setupParam.PartRevision;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.PriceProgram = setupParam.PriceProgram;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.PriceType = setupParam.PriceType;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.PricedQuantity = setupParam.PricedQuantity;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Price = setupParam.Price;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.StartDate = setupParam.StartDate;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.EndDate = setupParam.EndDate;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreatePriceInstance(setup) );
			
		}
		
		[WebMethod(MessageName="CreateBOM")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateBOM(System.String parentPartNumber, System.String parentPartDomain, System.String parentPartRevision, System.String childPartNumber, System.String childPartDomain, System.String childPartRevision, System.Int32 quantity)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateBOM(parentPartNumber, parentPartDomain, parentPartRevision, childPartNumber, childPartDomain, childPartRevision, quantity) );	
			
		}
		
		[WebMethod(MessageName="CreateBOM2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateBOM(Protocols.Interfaces.CreateBOMSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.CreateBOMSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.CreateBOMSetup(setupParam.ParentPartNumber, setupParam.ParentPartDomain, setupParam.ParentPartRevision, setupParam.ChildPartNumber, setupParam.ChildPartDomain, setupParam.ChildPartRevision, setupParam.Quantity);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.ParentPartNumber = setupParam.ParentPartNumber;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.ParentPartDomain = setupParam.ParentPartDomain;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.ParentPartRevision = setupParam.ParentPartRevision;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.ChildPartNumber = setupParam.ChildPartNumber;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.ChildPartDomain = setupParam.ChildPartDomain;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ChildPartRevision = setupParam.ChildPartRevision;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Quantity = setupParam.Quantity;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateBOM(setup) );
			
		}
		
//		[WebMethod(MessageName="UpdateSite")]
//		[SoapHeader("AuthHeader")]
//		public Protocols.ToolkitResultProtocol UpdateSite(System.String siteIDNum)
//		{
//			ClarifySession session = Global.GetSession( AuthHeader );
//			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
//			
//			return new Protocols.ToolkitResultProtocol( toolkit.UpdateSite(siteIDNum) );	
//			
//		}
		
		[WebMethod(MessageName="UpdateSite2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateSite(Protocols.Interfaces.UpdateSiteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.UpdateSiteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.UpdateSiteSetup(setupParam.SiteIDNum);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.SiteName = setupParam.SiteName;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.SiteType = setupParam.SiteType;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.AccountIDNum = setupParam.AccountIDNum;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Region = setupParam.Region;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.District = setupParam.District;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.IndustryType = setupParam.IndustryType;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.PrimaryUse = setupParam.PrimaryUse;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.PrimaryAddressObjid = setupParam.PrimaryAddressObjid;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.ShippingAddressObjid = setupParam.ShippingAddressObjid;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.BillingAddressObjid = setupParam.BillingAddressObjid;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.ParentSiteIDNum = setupParam.ParentSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.SupportOfficeSiteIDNum = setupParam.SupportOfficeSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.PrimarySupportEmployeeObjid = setupParam.PrimarySupportEmployeeObjid;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.SecondarySupportEmployeeObjid = setupParam.SecondarySupportEmployeeObjid;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateSite(setup) );
			
		}
		
		[WebMethod(MessageName="CreateSite")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateSite(FChoice.Toolkits.Clarify.SiteType siteType, FChoice.Toolkits.Clarify.SiteStatus status, System.Int32 primaryAddressObjid)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateSite(siteType, status, primaryAddressObjid) );	
			
		}
		
		[WebMethod(MessageName="CreateSite2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateSite(Protocols.Interfaces.CreateSiteSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.CreateSiteSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.CreateSiteSetup(setupParam.SiteType, setupParam.Status, setupParam.PrimaryAddressObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.SiteIDNum = setupParam.SiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.SiteName = setupParam.SiteName;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.SiteType = setupParam.SiteType;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.AccountIDNum = setupParam.AccountIDNum;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Region = setupParam.Region;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.District = setupParam.District;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.IndustryType = setupParam.IndustryType;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.PrimaryUse = setupParam.PrimaryUse;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.PrimaryAddressObjid = setupParam.PrimaryAddressObjid;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.ShippingAddressObjid = setupParam.ShippingAddressObjid;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.BillingAddressObjid = setupParam.BillingAddressObjid;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.ParentSiteIDNum = setupParam.ParentSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.SupportOfficeSiteIDNum = setupParam.SupportOfficeSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.PrimarySupportEmployeeObjid = setupParam.PrimarySupportEmployeeObjid;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.SecondarySupportEmployeeObjid = setupParam.SecondarySupportEmployeeObjid;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateSite(setup) );
			
		}
		
//		[WebMethod(MessageName="UpdateSiteByObjid")]
//		[SoapHeader("AuthHeader")]
//		public Protocols.ToolkitResultProtocol UpdateSiteByObjid(System.Int32 siteObjid)
//		{
//			ClarifySession session = Global.GetSession( AuthHeader );
//			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
//			
//			return new Protocols.ToolkitResultProtocol( toolkit.UpdateSiteByObjid(siteObjid) );	
//			
//		}
		
		[WebMethod(MessageName="UpdateSiteByObjid2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateSiteByObjid(Protocols.Interfaces.UpdateSiteByObjidSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.UpdateSiteByObjidSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.UpdateSiteByObjidSetup(setupParam.SiteObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.SiteObjid = setupParam.SiteObjid;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.SiteName = setupParam.SiteName;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.SiteType = setupParam.SiteType;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.AccountIDNum = setupParam.AccountIDNum;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.Status = setupParam.Status;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Region = setupParam.Region;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.District = setupParam.District;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.IndustryType = setupParam.IndustryType;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				setup.PrimaryUse = setupParam.PrimaryUse;			
			}
				
			if( Global.IsPropertyDirty(1024, setupParam.DirtyFieldFlags) )
			{
				setup.PrimaryAddressObjid = setupParam.PrimaryAddressObjid;			
			}
				
			if( Global.IsPropertyDirty(2048, setupParam.DirtyFieldFlags) )
			{
				setup.ShippingAddressObjid = setupParam.ShippingAddressObjid;			
			}
				
			if( Global.IsPropertyDirty(4096, setupParam.DirtyFieldFlags) )
			{
				setup.BillingAddressObjid = setupParam.BillingAddressObjid;			
			}
				
			if( Global.IsPropertyDirty(8192, setupParam.DirtyFieldFlags) )
			{
				setup.ParentSiteIDNum = setupParam.ParentSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(16384, setupParam.DirtyFieldFlags) )
			{
				setup.SupportOfficeSiteIDNum = setupParam.SupportOfficeSiteIDNum;			
			}
				
			if( Global.IsPropertyDirty(32768, setupParam.DirtyFieldFlags) )
			{
				setup.PrimarySupportEmployeeObjid = setupParam.PrimarySupportEmployeeObjid;			
			}
				
			if( Global.IsPropertyDirty(65536, setupParam.DirtyFieldFlags) )
			{
				setup.SecondarySupportEmployeeObjid = setupParam.SecondarySupportEmployeeObjid;			
			}
				
			if( Global.IsPropertyDirty(131072, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateSiteByObjid(setup) );
			
		}
		
		[WebMethod(MessageName="CreateTimeZone")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateTimeZone(System.String timeZone, System.String fullName, System.String country)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateTimeZone(timeZone, fullName, country) );	
			
		}
		
		[WebMethod(MessageName="CreateTimeZone2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateTimeZone(Protocols.Interfaces.CreateTimeZoneSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.CreateTimeZoneSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.CreateTimeZoneSetup(setupParam.TimeZone, setupParam.FullName, setupParam.Country);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.TimeZone = setupParam.TimeZone;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.FullName = setupParam.FullName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Country = setupParam.Country;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.GMTDifference = setupParam.GMTDifference;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateTimeZone(setup) );
			
		}
		
		[WebMethod(MessageName="CreateState")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateState(System.String state, System.String fullName, System.String country)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateState(state, fullName, country) );	
			
		}
		
		[WebMethod(MessageName="CreateState2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateState(Protocols.Interfaces.CreateStateSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.CreateStateSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.CreateStateSetup(setupParam.State, setupParam.FullName, setupParam.Country);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.State = setupParam.State;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.FullName = setupParam.FullName;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.IsDefault = setupParam.IsDefault;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.Country = setupParam.Country;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateState(setup) );
			
		}
		
		[WebMethod(MessageName="CreateCountry")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateCountry(System.String country, System.Int32 countryCode)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateCountry(country, countryCode) );	
			
		}
		
		[WebMethod(MessageName="CreateCountry2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateCountry(Protocols.Interfaces.CreateCountrySetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.CreateCountrySetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.CreateCountrySetup(setupParam.Country, setupParam.CountryCode);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.Country = setupParam.Country;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.CountryCode = setupParam.CountryCode;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Currency = setupParam.Currency;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.CurrencySymbol = setupParam.CurrencySymbol;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.CurrencyDescription = setupParam.CurrencyDescription;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.CurrencyConversionRate = setupParam.CurrencyConversionRate;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.CurrencyISOCode = setupParam.CurrencyISOCode;			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateCountry(setup) );
			
		}
		
//		[WebMethod(MessageName="UpdateAddress")]
//		[SoapHeader("AuthHeader")]
//		public Protocols.ToolkitResultProtocol UpdateAddress(System.Int32 addressObjid)
//		{
//			ClarifySession session = Global.GetSession( AuthHeader );
//			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
//			
//			return new Protocols.ToolkitResultProtocol( toolkit.UpdateAddress(addressObjid) );	
//			
//		}
		
		[WebMethod(MessageName="UpdateAddress2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol UpdateAddress(Protocols.Interfaces.UpdateAddressSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.UpdateAddressSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.UpdateAddressSetup(setupParam.AddressObjid);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.AddressObjid = setupParam.AddressObjid;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Address1 = setupParam.Address1;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.Address2 = setupParam.Address2;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.City = setupParam.City;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.State = setupParam.State;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.IsShortState = setupParam.IsShortState;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.ZipCode = setupParam.ZipCode;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.Country = setupParam.Country;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				setup.TimeZone = setupParam.TimeZone;			
			}
				
			if( Global.IsPropertyDirty(512, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.UpdateAddress(setup) );
			
		}
		
		[WebMethod(MessageName="CreateAddress")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateAddress(System.String address1, System.String city, System.String state, System.String zipCode, System.String country, System.String timeZone)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			
			return new Protocols.ToolkitResultProtocol( toolkit.CreateAddress(address1, city, state, zipCode, country, timeZone) );	
			
		}
		
		[WebMethod(MessageName="CreateAddress2")]
		[SoapHeader("AuthHeader")]
		public Protocols.ToolkitResultProtocol CreateAddress(Protocols.Interfaces.CreateAddressSetupProtocol setupParam)
		{
			ClarifySession session = Global.GetSession( AuthHeader );
			FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit toolkit = new FChoice.Toolkits.Clarify.Interfaces.InterfacesToolkit( session );
			FChoice.Toolkits.Clarify.Interfaces.CreateAddressSetup setup;
			
			switch( setupParam.ConstructorCue )
			{
				case 0:
					setup = new FChoice.Toolkits.Clarify.Interfaces.CreateAddressSetup(setupParam.Address1, setupParam.City, setupParam.State, setupParam.ZipCode, setupParam.Country, setupParam.TimeZone);
					break;
				default:
					throw new InvalidOperationException(string.Format("Constructor index '{0}' does not exist.", setupParam.ConstructorCue));
			}
			
			if( Global.IsPropertyDirty(1, setupParam.DirtyFieldFlags) )
			{
				setup.Address1 = setupParam.Address1;			
			}
				
			if( Global.IsPropertyDirty(2, setupParam.DirtyFieldFlags) )
			{
				setup.Address2 = setupParam.Address2;			
			}
				
			if( Global.IsPropertyDirty(4, setupParam.DirtyFieldFlags) )
			{
				setup.City = setupParam.City;			
			}
				
			if( Global.IsPropertyDirty(8, setupParam.DirtyFieldFlags) )
			{
				setup.State = setupParam.State;			
			}
				
			if( Global.IsPropertyDirty(16, setupParam.DirtyFieldFlags) )
			{
				setup.IsShortState = setupParam.IsShortState;			
			}
				
			if( Global.IsPropertyDirty(32, setupParam.DirtyFieldFlags) )
			{
				setup.ZipCode = setupParam.ZipCode;			
			}
				
			if( Global.IsPropertyDirty(64, setupParam.DirtyFieldFlags) )
			{
				setup.Country = setupParam.Country;			
			}
				
			if( Global.IsPropertyDirty(128, setupParam.DirtyFieldFlags) )
			{
				setup.TimeZone = setupParam.TimeZone;			
			}
				
			if( Global.IsPropertyDirty(256, setupParam.DirtyFieldFlags) )
			{
				foreach(Protocols.AdditionalFieldProtocol field in setupParam.AdditionalFields){setup.AdditionalFields.Append( field.FieldName, field.FieldType, field.FieldValue);}			
			}
				
							
			return new Protocols.ToolkitResultProtocol( toolkit.CreateAddress(setup) );
			
		}
		
	}
}
